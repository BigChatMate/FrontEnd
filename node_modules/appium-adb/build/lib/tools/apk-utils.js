"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _helpers = require("../helpers.js");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _semver = _interopRequireDefault(require("semver"));

var _os = _interopRequireDefault(require("os"));

let apkUtilsMethods = {};
const ACTIVITIES_TROUBLESHOOTING_LINK = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md';

apkUtilsMethods.isAppInstalled = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (pkg) {
    _logger.default.debug(`Getting install status for ${pkg}`);

    const installedPattern = new RegExp(`^\\s*Package\\s+\\[${_lodash.default.escapeRegExp(pkg)}\\][^:]+:$`, 'm');

    try {
      const stdout = yield this.shell(['dumpsys', 'package', pkg]);
      const isInstalled = installedPattern.test(stdout);

      _logger.default.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);

      return isInstalled;
    } catch (e) {
      throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

apkUtilsMethods.startUri = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (uri, pkg) {
    if (!uri || !pkg) {
      throw new Error("URI and package arguments are required");
    }

    const args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri.replace(/&/g, '\\&'), pkg];

    try {
      const res = yield this.shell(args);

      if (res.toLowerCase().includes('unable to resolve intent')) {
        throw new Error(res);
      }
    } catch (e) {
      throw new Error(`Error attempting to start URI. Original error: ${e}`);
    }
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

apkUtilsMethods.startApp = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (startAppOptions = {}) {
    if (!startAppOptions.activity || !startAppOptions.pkg) {
      throw new Error("activity and pkg are required to start an application");
    }

    startAppOptions = _lodash.default.clone(startAppOptions);
    startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');

    _lodash.default.defaults(startAppOptions, {
      waitPkg: startAppOptions.pkg,
      waitActivity: false,
      retry: true,
      stopApp: true
    });

    startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
    const apiLevel = yield this.getApiLevel();
    const cmd = (0, _helpers.buildStartCmd)(startAppOptions, apiLevel);

    try {
      const shellOpts = {};

      if (_lodash.default.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration > 20000) {
        shellOpts.timeout = startAppOptions.waitDuration;
      }

      const stdout = yield this.shell(cmd, shellOpts);

      if (stdout.includes("Error: Activity class") && stdout.includes("does not exist")) {
        if (startAppOptions.retry && !startAppOptions.activity.startsWith(".")) {
          _logger.default.debug(`We tried to start an activity that doesn't exist, ` + `retrying with '.${startAppOptions.activity}' activity name`);

          startAppOptions.activity = `.${startAppOptions.activity}`;
          startAppOptions.retry = false;
          return yield this.startApp(startAppOptions);
        }

        throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` + `exist or cannot be launched! Make sure it exists and is a launchable activity`);
      } else if (stdout.includes("java.lang.SecurityException")) {
        throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` + `Make sure the activity/package names are correct.`);
      }

      if (startAppOptions.waitActivity) {
        yield this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);
      }

      return stdout;
    } catch (e) {
      throw new Error(`Cannot start the '${startAppOptions.pkg}' application. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting. ` + `Original error: ${e.message}`);
    }
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

apkUtilsMethods.getFocusedPackageAndActivity = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Getting focused package and activity");

  const cmd = ['dumpsys', 'window', 'windows'];
  const nullFocusedAppRe = new RegExp(/^\s*mFocusedApp=null/, 'm');
  const focusedAppRe = new RegExp('^\\s*mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}', 'm');
  const nullCurrentFocusRe = new RegExp(/^\s*mCurrentFocus=null/, 'm');
  const currentFocusAppRe = new RegExp('^\\s*mCurrentFocus.+\\{.+\\s([^\\s\\/]+)\\/([^\\s]+)\\b', 'm');

  try {
    const stdout = yield this.shell(cmd);
    var _arr = [focusedAppRe, currentFocusAppRe];

    for (var _i = 0; _i < _arr.length; _i++) {
      const pattern = _arr[_i];
      const match = pattern.exec(stdout);

      if (match) {
        return {
          appPackage: match[1].trim(),
          appActivity: match[2].trim()
        };
      }
    }

    var _arr2 = [nullFocusedAppRe, nullCurrentFocusRe];

    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
      const pattern = _arr2[_i2];

      if (pattern.exec(stdout)) {
        return {
          appPackage: null,
          appActivity: null
        };
      }
    }

    throw new Error("Could not parse activity from dumpsys");
  } catch (e) {
    throw new Error(`Could not get focusPackageAndActivity. Original error: ${e.message}`);
  }
});

apkUtilsMethods.waitForActivityOrNot = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (pkg, activity, waitForStop, waitMs = 20000) {
    var _this = this;

    if (!pkg || !activity) {
      throw new Error('Package and activity required.');
    }

    _logger.default.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` + `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);

    const splitNames = names => names.split(',').map(name => name.trim());

    const allPackages = splitNames(pkg);
    const allActivities = splitNames(activity);
    let possibleActivityNames = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = allActivities[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let oneActivity = _step.value;

        if (oneActivity.startsWith('.')) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = allPackages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let currentPkg = _step2.value;
              possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\.+/g, '.'));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        } else {
          possibleActivityNames.push(oneActivity);
          possibleActivityNames.push(`${pkg}.${oneActivity}`);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _logger.default.debug(`Possible activities, to be checked: ${possibleActivityNames.map(name => `'${name}'`).join(', ')}`);

    let possibleActivityPatterns = possibleActivityNames.map(possibleActivityName => new RegExp(`^${possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$')}$`));
    let retries = parseInt(waitMs / 750, 10) || 1;
    retries = isNaN(retries) ? 30 : retries;
    yield (0, _asyncbox.retryInterval)(retries, 750, (0, _asyncToGenerator2.default)(function* () {
      let _ref7 = yield _this.getFocusedPackageAndActivity(),
          appPackage = _ref7.appPackage,
          appActivity = _ref7.appActivity;

      if (appActivity && appPackage) {
        let fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;

        _logger.default.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);

        let foundAct = _lodash.default.includes(allPackages, appPackage) && _lodash.default.findIndex(possibleActivityPatterns, possiblePattern => possiblePattern.test(fullyQualifiedActivity)) !== -1;

        if (!waitForStop && foundAct || waitForStop && !foundAct) {
          return;
        }
      }

      _logger.default.debug('Incorrect package and activity. Retrying.');

      throw new Error(`${possibleActivityNames.map(name => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting`);
    }));
  });

  return function (_x4, _x5, _x6) {
    return _ref5.apply(this, arguments);
  };
}();

apkUtilsMethods.waitForActivity = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (pkg, act, waitMs = 20000) {
    yield this.waitForActivityOrNot(pkg, act, false, waitMs);
  });

  return function (_x7, _x8) {
    return _ref8.apply(this, arguments);
  };
}();

apkUtilsMethods.waitForNotActivity = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (pkg, act, waitMs = 20000) {
    yield this.waitForActivityOrNot(pkg, act, true, waitMs);
  });

  return function (_x9, _x10) {
    return _ref9.apply(this, arguments);
  };
}();

const APK_UNINSTALL_TIMEOUT = 20000;

apkUtilsMethods.uninstallApk = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (pkg, options = {}) {
    options = Object.assign({
      timeout: APK_UNINSTALL_TIMEOUT
    }, options);

    _logger.default.debug(`Uninstalling ${pkg}`);

    if (!(yield this.isAppInstalled(pkg))) {
      _logger.default.info(`${pkg} was not uninstalled, because it was not present on the device`);

      return false;
    }

    const cmd = ['uninstall'];

    if (options.keepData) {
      cmd.push('-k');
    }

    cmd.push(pkg);
    let stdout;

    try {
      yield this.forceStop(pkg);
      stdout = (yield this.adbExec(cmd, {
        timeout: options.timeout
      })).trim();
    } catch (e) {
      throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);
    }

    _logger.default.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);

    if (stdout.includes("Success")) {
      _logger.default.info(`${pkg} was successfully uninstalled`);

      return true;
    }

    _logger.default.info(`${pkg} was not uninstalled`);

    return false;
  });

  return function (_x11) {
    return _ref10.apply(this, arguments);
  };
}();

apkUtilsMethods.installFromDevicePath = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (apkPathOnDevice, opts = {}) {
    let stdout = yield this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);

    if (stdout.indexOf("Failure") !== -1) {
      throw new Error(`Remote install failed: ${stdout}`);
    }
  });

  return function (_x12) {
    return _ref11.apply(this, arguments);
  };
}();

apkUtilsMethods.install = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (appPath, options = {}) {
    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      return yield this.installApks(appPath, options);
    }

    options = Object.assign({
      replace: true,
      timeout: _helpers.APK_INSTALL_TIMEOUT
    }, options);
    const installArgs = (0, _helpers.buildInstallArgs)((yield this.getApiLevel()), options);

    try {
      const output = yield this.adbExec(['install', ...installArgs, appPath], {
        timeout: options.timeout
      });
      const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

      _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

      if (_lodash.default.includes(output, 'INSTALL_FAILED')) {
        throw new Error(output);
      }
    } catch (err) {
      if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
        throw err;
      }

      _logger.default.debug(`Application '${appPath}' already installed. Continuing.`);
    }
  });

  return function (_x13) {
    return _ref12.apply(this, arguments);
  };
}();

apkUtilsMethods.installOrUpgrade = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (appPath, pkg = null, options = {}) {
    if (!_appiumSupport.util.hasValue(options.timeout)) {
      options.timeout = _helpers.APK_INSTALL_TIMEOUT;
    }

    let apkInfo = null;

    if (!pkg) {
      apkInfo = yield this.getApkInfo(appPath);
      pkg = apkInfo.name;
    }

    if (!pkg) {
      _logger.default.warn(`Cannot read the package name of ${appPath}. Assuming correct app version is already installed`);

      return;
    }

    if (!(yield this.isAppInstalled(pkg))) {
      _logger.default.debug(`App '${appPath}' not installed. Installing`);

      yield this.install(appPath, Object.assign({}, options, {
        replace: false
      }));
      return;
    }

    const _ref14 = yield this.getPackageInfo(pkg),
          pkgVersionCode = _ref14.versionCode,
          pkgVersionNameStr = _ref14.versionName;

    const pkgVersionName = _semver.default.valid(_semver.default.coerce(pkgVersionNameStr));

    if (!apkInfo) {
      apkInfo = yield this.getApkInfo(appPath);
    }

    const _apkInfo = apkInfo,
          apkVersionCode = _apkInfo.versionCode,
          apkVersionNameStr = _apkInfo.versionName;

    const apkVersionName = _semver.default.valid(_semver.default.coerce(apkVersionNameStr));

    if (!_lodash.default.isInteger(apkVersionCode) || !_lodash.default.isInteger(pkgVersionCode)) {
      _logger.default.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);

      if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
        _logger.default.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'. Assuming correct app version is already installed`);

        return;
      }
    }

    if (_lodash.default.isInteger(apkVersionCode) && _lodash.default.isInteger(pkgVersionCode)) {
      if (pkgVersionCode > apkVersionCode) {
        _logger.default.debug(`The installed '${pkg}' package does not require upgrade (${pkgVersionCode} > ${apkVersionCode})`);

        return;
      }

      if (pkgVersionCode === apkVersionCode) {
        if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
          _logger.default.debug(`The installed '${pkg}' package does not require upgrade ('${pkgVersionName}' >= '${apkVersionName}')`);

          return;
        }

        if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
          _logger.default.debug(`The installed '${pkg}' package does not require upgrade (${pkgVersionCode} === ${apkVersionCode})`);

          return;
        }
      }
    } else if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
      _logger.default.debug(`The installed '${pkg}' package does not require upgrade ('${pkgVersionName}' >= '${apkVersionName}')`);

      return;
    }

    _logger.default.debug(`The installed '${pkg}' package is older than '${appPath}' ` + `(${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'. ` + `Executing upgrade`);

    try {
      yield this.install(appPath, Object.assign({}, options, {
        replace: true
      }));
    } catch (err) {
      _logger.default.warn(`Cannot upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);

      if (!(yield this.uninstallApk(pkg))) {
        throw new Error(`'${pkg}' package cannot be uninstalled`);
      }

      yield this.install(appPath, Object.assign({}, options, {
        replace: false
      }));
    }
  });

  return function (_x14) {
    return _ref13.apply(this, arguments);
  };
}();

apkUtilsMethods.extractStringsFromApk = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (appPath, language, out) {
    _logger.default.debug(`Extracting strings from for language: ${language || 'default'}`);

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractLanguageApk(appPath, language);
    }

    yield this.initAapt();
    let rawAaptOutput;

    try {
      const _ref16 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', '--values', 'resources', appPath]),
            stdout = _ref16.stdout;

      rawAaptOutput = stdout;
    } catch (e) {
      throw new Error(`Cannot extract resources from '${appPath}'. Original error: ${e.message}`);
    }

    const defaultConfigMarker = '(default)';
    let configMarker = language || defaultConfigMarker;

    if (configMarker.includes('-') && !configMarker.includes('-r')) {
      configMarker = configMarker.replace('-', '-r');
    }

    if (configMarker.toLowerCase().startsWith('en')) {
      const _ref17 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', 'configurations', appPath]),
            stdout = _ref17.stdout;

      const configs = stdout.split(_os.default.EOL);

      if (!configs.includes(configMarker)) {
        _logger.default.debug(`There is no '${configMarker}' configuration. ` + `Replacing it with '${defaultConfigMarker}'`);

        configMarker = defaultConfigMarker;
      }
    }

    const apkStrings = {};
    let isInConfig = false;
    let currentResourceId = null;
    let isInPluralGroup = false;

    const startsWithAny = (s, arr) => arr.reduce((acc, x) => acc || s.startsWith(x), false);

    const normalizeStringMatch = s => s.replace(/"$/, '').replace(/^"/, '').replace(/\\"/g, '"');

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = rawAaptOutput.split(_os.default.EOL)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        const line = _step3.value;
        const trimmedLine = line.trim();

        if (_lodash.default.isEmpty(trimmedLine)) {
          continue;
        }

        if (startsWithAny(trimmedLine, ['config', 'type', 'spec', 'Package'])) {
          isInConfig = trimmedLine.startsWith(`config ${configMarker}:`);
          currentResourceId = null;
          isInPluralGroup = false;
          continue;
        }

        if (!isInConfig) {
          continue;
        }

        if (trimmedLine.startsWith('resource')) {
          isInPluralGroup = false;
          currentResourceId = null;

          if (trimmedLine.includes(':string/')) {
            const match = /:string\/(\S+):/.exec(trimmedLine);

            if (match) {
              currentResourceId = match[1];
            }
          } else if (trimmedLine.includes(':plurals/')) {
            const match = /:plurals\/(\S+):/.exec(trimmedLine);

            if (match) {
              currentResourceId = match[1];
              isInPluralGroup = true;
            }
          }

          continue;
        }

        if (currentResourceId && trimmedLine.startsWith('(string')) {
          const match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

          if (match) {
            apkStrings[currentResourceId] = normalizeStringMatch(match[0]);
          }

          currentResourceId = null;
          continue;
        }

        if (currentResourceId && isInPluralGroup && trimmedLine.includes(': (string')) {
          const match = /"[^"\\]*(?:\\.[^"\\]*)*"/.exec(trimmedLine);

          if (match) {
            apkStrings[currentResourceId] = [...(apkStrings[currentResourceId] || []), normalizeStringMatch(match[0])];
          }

          continue;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (_lodash.default.isEmpty(apkStrings)) {
      _logger.default.warn(`No strings have been found in '${appPath}' resources ` + `for '${configMarker}' configuration`);
    } else {
      _logger.default.info(`Successfully extracted ${_lodash.default.keys(apkStrings).length} strings from '${appPath}' resources ` + `for '${configMarker}' configuration`);
    }

    const localPath = _path.default.resolve(out, 'strings.json');

    yield (0, _appiumSupport.mkdirp)(out);
    yield _appiumSupport.fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');
    return {
      apkStrings,
      localPath
    };
  });

  return function (_x15, _x16, _x17) {
    return _ref15.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceLanguage = (0, _asyncToGenerator2.default)(function* () {
  let language;

  if ((yield this.getApiLevel()) < 23) {
    language = yield this.getDeviceSysLanguage();

    if (!language) {
      language = yield this.getDeviceProductLanguage();
    }
  } else {
    language = (yield this.getDeviceLocale()).split("-")[0];
  }

  return language;
});

apkUtilsMethods.setDeviceLanguage = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (language) {
    yield this.setDeviceSysLanguage(language);
  });

  return function (_x18) {
    return _ref19.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceCountry = (0, _asyncToGenerator2.default)(function* () {
  let country = yield this.getDeviceSysCountry();

  if (!country) {
    country = yield this.getDeviceProductCountry();
  }

  return country;
});

apkUtilsMethods.setDeviceCountry = function () {
  var _ref21 = (0, _asyncToGenerator2.default)(function* (country) {
    yield this.setDeviceSysCountry(country);
  });

  return function (_x19) {
    return _ref21.apply(this, arguments);
  };
}();

apkUtilsMethods.getDeviceLocale = (0, _asyncToGenerator2.default)(function* () {
  let locale = yield this.getDeviceSysLocale();

  if (!locale) {
    locale = yield this.getDeviceProductLocale();
  }

  return locale;
});

apkUtilsMethods.setDeviceLocale = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (locale) {
    const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

    if (!validateLocale.test(locale)) {
      _logger.default.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);

      return;
    }

    let split_locale = locale.split("-");
    yield this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);
  });

  return function (_x20) {
    return _ref23.apply(this, arguments);
  };
}();

apkUtilsMethods.ensureCurrentLocale = function () {
  var _ref24 = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    var _this2 = this;

    const hasLanguage = _lodash.default.isString(language);

    const hasCountry = _lodash.default.isString(country);

    if (!hasLanguage && !hasCountry) {
      _logger.default.warn('ensureCurrentLocale requires language or country');

      return false;
    }

    language = (language || '').toLowerCase();
    country = (country || '').toLowerCase();
    const apiLevel = yield this.getApiLevel();
    return yield (0, _asyncbox.retryInterval)(5, 1000, (0, _asyncToGenerator2.default)(function* () {
      try {
        if (apiLevel < 23) {
          let curLanguage, curCountry;

          if (hasLanguage) {
            curLanguage = (yield _this2.getDeviceLanguage()).toLowerCase();

            if (!hasCountry && language === curLanguage) {
              return true;
            }
          }

          if (hasCountry) {
            curCountry = (yield _this2.getDeviceCountry()).toLowerCase();

            if (!hasLanguage && country === curCountry) {
              return true;
            }
          }

          if (language === curLanguage && country === curCountry) {
            return true;
          }
        } else {
          const curLocale = (yield _this2.getDeviceLocale()).toLowerCase();
          const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;

          if (localeCode === curLocale) {
            _logger.default.debug(`Requested locale is equal to current locale: '${curLocale}'`);

            return true;
          }
        }

        return false;
      } catch (err) {
        _logger.default.error(`Unable to check device localization: ${err.message}`);

        _logger.default.debug('Restarting ADB and retrying...');

        yield _this2.restartAdb();
        throw err;
      }
    }));
  });

  return function (_x21, _x22) {
    return _ref24.apply(this, arguments);
  };
}();

apkUtilsMethods.setDeviceLanguageCountry = function () {
  var _ref26 = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    let hasLanguage = language && _lodash.default.isString(language);

    let hasCountry = country && _lodash.default.isString(country);

    if (!hasLanguage || !hasCountry) {
      _logger.default.warn(`setDeviceLanguageCountry requires language and country at least`);

      _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

      return;
    }

    let apiLevel = yield this.getApiLevel();
    language = (language || '').toLowerCase();
    country = (country || '').toUpperCase();

    if (apiLevel < 23) {
      let curLanguage = (yield this.getDeviceLanguage()).toLowerCase();
      let curCountry = (yield this.getDeviceCountry()).toUpperCase();

      if (language !== curLanguage || country !== curCountry) {
        yield this.setDeviceSysLocaleViaSettingApp(language, country);
      }
    } else {
      let curLocale = yield this.getDeviceLocale();
      const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;

      _logger.default.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);

      if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {
        yield this.setDeviceSysLocaleViaSettingApp(language, country, script);
      }
    }
  });

  return function (_x23, _x24) {
    return _ref26.apply(this, arguments);
  };
}();

apkUtilsMethods.getApkInfo = function () {
  var _ref27 = (0, _asyncToGenerator2.default)(function* (appPath) {
    if (!(yield _appiumSupport.fs.exists(appPath))) {
      throw new Error(`The file at path ${appPath} does not exist or is not accessible`);
    }

    if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
      appPath = yield this.extractBaseApk(appPath);
    }

    yield this.initAapt();

    try {
      const _ref28 = yield (0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', appPath]),
            stdout = _ref28.stdout;

      const matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

      if (matches) {
        return {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        };
      }
    } catch (err) {
      _logger.default.warn(`Error "${err.message}" while getting badging info`);
    }

    return {};
  });

  return function (_x25) {
    return _ref27.apply(this, arguments);
  };
}();

apkUtilsMethods.getPackageInfo = function () {
  var _ref29 = (0, _asyncToGenerator2.default)(function* (pkg) {
    _logger.default.debug(`Getting package info for '${pkg}'`);

    let result = {
      name: pkg
    };

    try {
      const stdout = yield this.shell(['dumpsys', 'package', pkg]);
      const versionNameMatch = new RegExp(/versionName=([\d+.]+)/).exec(stdout);

      if (versionNameMatch) {
        result.versionName = versionNameMatch[1];
      }

      const versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

      if (versionCodeMatch) {
        result.versionCode = parseInt(versionCodeMatch[1], 10);
      }

      return result;
    } catch (err) {
      _logger.default.warn(`Error '${err.message}' while dumping package info`);
    }

    return result;
  });

  return function (_x26) {
    return _ref29.apply(this, arguments);
  };
}();

apkUtilsMethods.pullApk = function () {
  var _pullApk = (0, _asyncToGenerator2.default)(function* (pkg, tmpDir) {
    const pkgPath = (yield this.adbExec(['shell', 'pm', 'path', pkg])).replace('package:', '');

    const tmpApp = _path.default.resolve(tmpDir, `${pkg}.apk`);

    yield this.pull(pkgPath, tmpApp);

    _logger.default.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);

    return tmpApp;
  });

  return function pullApk(_x27, _x28) {
    return _pullApk.apply(this, arguments);
  };
}();

var _default = apkUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
