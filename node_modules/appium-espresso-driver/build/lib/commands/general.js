"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertRequiredOptions(options, requiredOptionNames) {
  if (!_lodash.default.isArray(requiredOptionNames)) {
    requiredOptionNames = [requiredOptionNames];
  }

  const presentOptionNames = _lodash.default.keys(options);

  const missingOptionNames = _lodash.default.difference(requiredOptionNames, presentOptionNames);

  if (_lodash.default.isEmpty(missingOptionNames)) {
    return options;
  }

  throw new Error(`The following options are required: ${JSON.stringify(missingOptionNames)}. ` + `You have only provided: ${JSON.stringify(presentOptionNames)}`);
}

commands.mobilePerformEditorAction = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _assertRequiredOption = assertRequiredOptions(opts, ['action']),
          action = _assertRequiredOption.action;

    return yield this.espresso.jwproxy.command('/appium/device/perform_editor_action', 'POST', {
      action
    });
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

commands.mobileSwipe = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _assertRequiredOption2 = assertRequiredOptions(opts, ['direction', 'element']),
          direction = _assertRequiredOption2.direction,
          element = _assertRequiredOption2.element;

    return yield this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/swipe`, 'POST', {
      direction
    });
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

commands.mobileGetDeviceInfo = (0, _asyncToGenerator2.default)(function* () {
  return yield this.espresso.jwproxy.command('/appium/device/info', 'GET');
});

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);
  this.jwpProxyActive = true;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJhc3NlcnRSZXF1aXJlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVxdWlyZWRPcHRpb25OYW1lcyIsIl8iLCJpc0FycmF5IiwicHJlc2VudE9wdGlvbk5hbWVzIiwia2V5cyIsIm1pc3NpbmdPcHRpb25OYW1lcyIsImRpZmZlcmVuY2UiLCJpc0VtcHR5IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwibW9iaWxlUGVyZm9ybUVkaXRvckFjdGlvbiIsIm9wdHMiLCJhY3Rpb24iLCJlc3ByZXNzbyIsImp3cHJveHkiLCJjb21tYW5kIiwibW9iaWxlU3dpcGUiLCJkaXJlY3Rpb24iLCJlbGVtZW50IiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJtb2JpbGVHZXREZXZpY2VJbmZvIiwic3VzcGVuZENocm9tZWRyaXZlclByb3h5IiwiY2hyb21lZHJpdmVyIiwicHJveHlSZXFSZXMiLCJiaW5kIiwiandwUHJveHlBY3RpdmUiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBLFNBQVNDLHFCQUFULENBQWdDQyxPQUFoQyxFQUF5Q0MsbUJBQXpDLEVBQThEO0FBQzVELE1BQUksQ0FBQ0MsZ0JBQUVDLE9BQUYsQ0FBVUYsbUJBQVYsQ0FBTCxFQUFxQztBQUNuQ0EsSUFBQUEsbUJBQW1CLEdBQUcsQ0FBQ0EsbUJBQUQsQ0FBdEI7QUFDRDs7QUFDRCxRQUFNRyxrQkFBa0IsR0FBR0YsZ0JBQUVHLElBQUYsQ0FBT0wsT0FBUCxDQUEzQjs7QUFDQSxRQUFNTSxrQkFBa0IsR0FBR0osZ0JBQUVLLFVBQUYsQ0FBYU4sbUJBQWIsRUFBa0NHLGtCQUFsQyxDQUEzQjs7QUFDQSxNQUFJRixnQkFBRU0sT0FBRixDQUFVRixrQkFBVixDQUFKLEVBQW1DO0FBQ2pDLFdBQU9OLE9BQVA7QUFDRDs7QUFDRCxRQUFNLElBQUlTLEtBQUosQ0FBVyx1Q0FBc0NDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxrQkFBZixDQUFtQyxJQUExRSxHQUNiLDJCQUEwQkksSUFBSSxDQUFDQyxTQUFMLENBQWVQLGtCQUFmLENBQW1DLEVBRDFELENBQU47QUFFRDs7QUFFRFIsUUFBUSxDQUFDZ0IseUJBQVQ7QUFBQSw2Q0FBcUMsV0FBZ0JDLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUFBLGtDQUM3Q2QscUJBQXFCLENBQUNjLElBQUQsRUFBTyxDQUFDLFFBQUQsQ0FBUCxDQUR3QjtBQUFBLFVBQ3ZEQyxNQUR1RCx5QkFDdkRBLE1BRHVEOztBQUU5RCxpQkFBYSxLQUFLQyxRQUFMLENBQWNDLE9BQWQsQ0FBc0JDLE9BQXRCLENBQThCLHNDQUE5QixFQUFzRSxNQUF0RSxFQUE4RTtBQUFDSCxNQUFBQTtBQUFELEtBQTlFLENBQWI7QUFDRCxHQUhEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUtBbEIsUUFBUSxDQUFDc0IsV0FBVDtBQUFBLDhDQUF1QixXQUFnQkwsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQUEsbUNBQ25CZCxxQkFBcUIsQ0FBQ2MsSUFBRCxFQUFPLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBUCxDQURGO0FBQUEsVUFDekNNLFNBRHlDLDBCQUN6Q0EsU0FEeUM7QUFBQSxVQUM5QkMsT0FEOEIsMEJBQzlCQSxPQUQ4Qjs7QUFFaEQsaUJBQWEsS0FBS0wsUUFBTCxDQUFjQyxPQUFkLENBQXNCQyxPQUF0QixDQUErQiwwQkFBeUJJLG9CQUFLQyxhQUFMLENBQW1CRixPQUFuQixDQUE0QixRQUFwRixFQUE2RixNQUE3RixFQUFxRztBQUFDRCxNQUFBQTtBQUFELEtBQXJHLENBQWI7QUFDRCxHQUhEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUtBdkIsUUFBUSxDQUFDMkIsbUJBQVQsbUNBQStCLGFBQWtCO0FBQy9DLGVBQWEsS0FBS1IsUUFBTCxDQUFjQyxPQUFkLENBQXNCQyxPQUF0QixDQUE4QixxQkFBOUIsRUFBcUQsS0FBckQsQ0FBYjtBQUNELENBRkQ7O0FBS0FwQixPQUFPLENBQUMyQix3QkFBUixHQUFtQyxZQUFZO0FBQzdDLE9BQUtDLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxPQUFLQyxXQUFMLEdBQW1CLEtBQUtYLFFBQUwsQ0FBY1csV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0IsS0FBS1osUUFBcEMsQ0FBbkI7QUFDQSxPQUFLYSxjQUFMLEdBQXNCLElBQXRCO0FBQ0QsQ0FKRDs7QUFPQUMsTUFBTSxDQUFDQyxNQUFQLENBQWNoQyxVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmZ1bmN0aW9uIGFzc2VydFJlcXVpcmVkT3B0aW9ucyAob3B0aW9ucywgcmVxdWlyZWRPcHRpb25OYW1lcykge1xuICBpZiAoIV8uaXNBcnJheShyZXF1aXJlZE9wdGlvbk5hbWVzKSkge1xuICAgIHJlcXVpcmVkT3B0aW9uTmFtZXMgPSBbcmVxdWlyZWRPcHRpb25OYW1lc107XG4gIH1cbiAgY29uc3QgcHJlc2VudE9wdGlvbk5hbWVzID0gXy5rZXlzKG9wdGlvbnMpO1xuICBjb25zdCBtaXNzaW5nT3B0aW9uTmFtZXMgPSBfLmRpZmZlcmVuY2UocmVxdWlyZWRPcHRpb25OYW1lcywgcHJlc2VudE9wdGlvbk5hbWVzKTtcbiAgaWYgKF8uaXNFbXB0eShtaXNzaW5nT3B0aW9uTmFtZXMpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZm9sbG93aW5nIG9wdGlvbnMgYXJlIHJlcXVpcmVkOiAke0pTT04uc3RyaW5naWZ5KG1pc3NpbmdPcHRpb25OYW1lcyl9LiBgICtcbiAgICBgWW91IGhhdmUgb25seSBwcm92aWRlZDogJHtKU09OLnN0cmluZ2lmeShwcmVzZW50T3B0aW9uTmFtZXMpfWApO1xufVxuXG5jb21tYW5kcy5tb2JpbGVQZXJmb3JtRWRpdG9yQWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7YWN0aW9ufSA9IGFzc2VydFJlcXVpcmVkT3B0aW9ucyhvcHRzLCBbJ2FjdGlvbiddKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXNwcmVzc28uandwcm94eS5jb21tYW5kKCcvYXBwaXVtL2RldmljZS9wZXJmb3JtX2VkaXRvcl9hY3Rpb24nLCAnUE9TVCcsIHthY3Rpb259KTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZVN3aXBlID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7ZGlyZWN0aW9uLCBlbGVtZW50fSA9IGFzc2VydFJlcXVpcmVkT3B0aW9ucyhvcHRzLCBbJ2RpcmVjdGlvbicsICdlbGVtZW50J10pO1xuICByZXR1cm4gYXdhaXQgdGhpcy5lc3ByZXNzby5qd3Byb3h5LmNvbW1hbmQoYC9hcHBpdW0vZXhlY3V0ZV9tb2JpbGUvJHt1dGlsLnVud3JhcEVsZW1lbnQoZWxlbWVudCl9L3N3aXBlYCwgJ1BPU1QnLCB7ZGlyZWN0aW9ufSk7XG59O1xuXG5jb21tYW5kcy5tb2JpbGVHZXREZXZpY2VJbmZvID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5lc3ByZXNzby5qd3Byb3h5LmNvbW1hbmQoJy9hcHBpdW0vZGV2aWNlL2luZm8nLCAnR0VUJyk7XG59O1xuXG4vLyBTdG9wIHByb3h5aW5nIHRvIGFueSBDaHJvbWVkcml2ZXIgYW5kIHJlZGlyZWN0IHRvIEVzcHJlc3NvXG5oZWxwZXJzLnN1c3BlbmRDaHJvbWVkcml2ZXJQcm94eSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaHJvbWVkcml2ZXIgPSBudWxsO1xuICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy5lc3ByZXNzby5wcm94eVJlcVJlcy5iaW5kKHRoaXMuZXNwcmVzc28pO1xuICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2dlbmVyYWwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
