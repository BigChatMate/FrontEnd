"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REQUIRED_PARAMS = exports.EspressoRunner = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _package = require("../../package.json");

const TEST_APK_PATH = _path.default.resolve(__dirname, '..', '..', 'espresso-server', 'app', 'build', 'outputs', 'apk', 'androidTest', 'debug', 'app-debug-androidTest.apk');

const TEST_MANIFEST_PATH = _path.default.resolve(__dirname, '..', '..', 'espresso-server', 'AndroidManifest-test.xml');

const TEST_APK_PKG = 'io.appium.espressoserver.test';
const REQUIRED_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'appPackage', 'forceEspressoRebuild'];
exports.REQUIRED_PARAMS = REQUIRED_PARAMS;
const ESPRESSO_SERVER_LAUNCH_TIMEOUT = 30000;
const TARGET_PACKAGE_CONTAINER = '/data/local/tmp/espresso.apppackage';

class EspressoRunner {
  constructor(opts = {}) {
    for (var _i = 0; _i < REQUIRED_PARAMS.length; _i++) {
      let req = REQUIRED_PARAMS[_i];

      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort,
      base: ''
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.modServerPath = _path.default.resolve(this.tmpDir, `${TEST_APK_PKG}_${_package.version}_${this.appPackage}.apk`);
    this.serverLaunchTimeout = opts.serverLaunchTimeout || ESPRESSO_SERVER_LAUNCH_TIMEOUT;
  }

  shouldUninstallServer() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this.forceEspressoRebuild || !(yield _this.adb.fileExists(TARGET_PACKAGE_CONTAINER))) {
        return true;
      }

      const tmpRoot = yield _appiumSupport.tempDir.openDir();

      try {
        const dstPath = _path.default.resolve(tmpRoot, _path.default.posix.basename(TARGET_PACKAGE_CONTAINER));

        yield _this.adb.pull(TARGET_PACKAGE_CONTAINER, dstPath);
        const previousAppPackage = yield _appiumSupport.fs.readFile(dstPath, 'utf8');

        _logger.default.debug(`The previous target application package was '${previousAppPackage}'. ` + `The current package is '${_this.appPackage}'.`);

        return previousAppPackage !== _this.appPackage;
      } finally {
        yield _appiumSupport.fs.rimraf(tmpRoot);
      }
    })();
  }

  installServer() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this2.adb.installOrUpgrade(_this2.modServerPath, TEST_APK_PKG);
      const tmpRoot = yield _appiumSupport.tempDir.openDir();

      try {
        const srcPath = _path.default.resolve(tmpRoot, _path.default.posix.basename(TARGET_PACKAGE_CONTAINER));

        yield _appiumSupport.fs.writeFile(srcPath, _this2.appPackage, 'utf8');
        yield _this2.adb.push(srcPath, TARGET_PACKAGE_CONTAINER);

        _logger.default.info(`Recorded the target application package '${_this2.appPackage}' to ${TARGET_PACKAGE_CONTAINER}`);
      } finally {
        yield _appiumSupport.fs.rimraf(tmpRoot);
      }

      _logger.default.info(`Installed Espresso Test Server apk '${_this2.modServerPath}' (pkg: '${TEST_APK_PKG}')`);
    })();
  }

  installTestApk() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this3.forceEspressoRebuild && (yield _appiumSupport.fs.exists(_this3.modServerPath))) {
        _logger.default.debug(`Capability 'forceEspressoRebuild' on. Deleting file '${_this3.modServerPath}'`);

        yield _appiumSupport.fs.unlink(_this3.modServerPath);
      }

      if (!(yield _appiumSupport.fs.exists(_this3.modServerPath))) {
        yield _this3.buildNewModServer();
      }

      yield _this3.checkAndSignCert(_this3.modServerPath);

      if ((yield _this3.adb.isAppInstalled(TEST_APK_PKG)) && (yield _this3.shouldUninstallServer())) {
        _logger.default.info('Uninstalling the obsolete Espresso server package from the device under test');

        yield _this3.adb.uninstallApk(TEST_APK_PKG);
      }

      yield _this3.installServer();
    })();
  }

  buildNewModServer() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`Repackaging espresso server for: '${_this4.appPackage}'`);

      const packageTmpDir = _path.default.resolve(_this4.tmpDir, _this4.appPackage);

      const newManifestPath = _path.default.resolve(_this4.tmpDir, 'AndroidManifest.xml');

      yield _appiumSupport.fs.rimraf(newManifestPath);

      _logger.default.info(`Creating new manifest: '${newManifestPath}'`);

      yield (0, _appiumSupport.mkdirp)(packageTmpDir);
      yield _appiumSupport.fs.copyFile(TEST_MANIFEST_PATH, newManifestPath);
      yield _this4.adb.compileManifest(newManifestPath, TEST_APK_PKG, _this4.appPackage);
      yield _this4.adb.insertManifest(newManifestPath, TEST_APK_PATH, _this4.modServerPath);

      _logger.default.info(`Repackaged espresso server ready: '${_this4.modServerPath}'`);
    })();
  }

  checkAndSignCert(apk, apkPackage) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let signed = yield _this5.adb.checkApkCert(apk, apkPackage);

      if (!signed) {
        yield _this5.adb.sign(apk);
      }

      return !signed;
    })();
  }

  startSession(caps) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const cmd = ['shell', 'am', 'instrument', '-w', '-e', 'debug', process.env.ESPRESSO_JAVA_DEBUG === 'true' ? 'true' : 'false', `${TEST_APK_PKG}/android.support.test.runner.AndroidJUnitRunner`];

      _logger.default.info(`Starting Espresso Server v${_package.version} with cmd: adb ${cmd.join(' ')}`);

      let hasSocketError = false;
      _this6.instProcess = _this6.adb.createSubProcess(cmd);

      _this6.instProcess.on('exit', (code, signal) => {
        _logger.default.info(`Instrumentation process exited with code ${code} from signal ${signal}`);
      });

      _this6.instProcess.on('die', (code, signal) => {
        _logger.default.error(`Instrumentation process died with code ${code} and signal ${signal}`);
      });

      _this6.instProcess.on('stream-line', line => {
        _logger.default.debug(`[Instrumentation]${line.trim()}`);

        if (line.toLowerCase().includes("java.net.socketexception")) {
          hasSocketError = true;
        }
      });

      yield _this6.instProcess.start((stdout, stderr) => {
        const out = stdout.trim() || stderr.trim();

        if (out.includes('io.appium.espressoserver.EspressoServerRunnerTest:')) {
          return true;
        }

        if (out.toLowerCase().includes('exception')) {
          throw new Error(out);
        }
      }, _this6.serverLaunchTimeout);

      _logger.default.info('Waiting for Espresso to be online...');

      try {
        yield (0, _asyncbox.retryInterval)(20, 1000, (0, _asyncToGenerator2.default)(function* () {
          yield _this6.jwproxy.command('/status', 'GET');
        }));
      } catch (e) {
        if (hasSocketError) {
          _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start due to Socket exception. Espresso Server requires the 'INTERNET' permission to be set in the Android manifest for the app-under-test (<uses-permission android:name="android.permission.INTERNET" />)`);
        } else {
          _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start. Original error: ${e.message}`);
        }
      }

      yield _this6.jwproxy.command('/session', 'POST', {
        desiredCapabilities: caps
      });
    })();
  }

  deleteSession() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting Espresso server session');

      try {
        yield _this7.jwproxy.command('/', 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation Espresso deleteSession worked; ` + `Error was: ${err}`);
      }

      if (_this7.instProcess && _this7.instProcess.isRunning) {
        yield _this7.instProcess.stop();
      }
    })();
  }

}

exports.EspressoRunner = EspressoRunner;
var _default = EspressoRunner;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
