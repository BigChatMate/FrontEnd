"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EspressoDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _espressoRunner = _interopRequireDefault(require("./espresso-runner"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _appiumAdb = require("appium-adb");

var _appiumAndroidDriver = require("appium-android-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _package = require("../../package.json");

var _portscanner = require("portscanner");

var _asyncbox = require("asyncbox");

const helpers = _appiumAndroidDriver.androidHelpers;
const SYSTEM_PORT_RANGE = [8300, 8399];
const DEVICE_PORT = 6791;
const NO_PROXY = [['GET', new RegExp('^/session/(?!.*/)')], ['GET', new RegExp('^/session/[^/]+/appium/device/current_activity')], ['GET', new RegExp('^/session/[^/]+/appium/device/current_package')], ['GET', new RegExp('^/session/[^/]+/appium/device/display_density')], ['GET', new RegExp('^/session/[^/]+/appium/device/is_keyboard_shown')], ['GET', new RegExp('^/session/[^/]+/appium/device/system_bars')], ['GET', new RegExp('^/session/[^/]+/appium/device/system_time')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['GET', new RegExp('^/session/[^/]+/log/types')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['GET', new RegExp('^/session/[^/]+/timeouts')], ['GET', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/appium/app/background')], ['POST', new RegExp('^/session/[^/]+/appium/app/close')], ['POST', new RegExp('^/session/[^/]+/appium/app/launch')], ['POST', new RegExp('^/session/[^/]+/appium/app/reset')], ['POST', new RegExp('^/session/[^/]+/appium/app/strings')], ['POST', new RegExp('^/session/[^/]+/appium/compare_images')], ['POST', new RegExp('^/session/[^/]+/appium/device/activate_app')], ['POST', new RegExp('^/session/[^/]+/appium/device/app_installed')], ['POST', new RegExp('^/session/[^/]+/appium/device/app_state')], ['POST', new RegExp('^/session/[^/]+/appium/device/install_app')], ['POST', new RegExp('^/session/[^/]+/appium/device/is_locked')], ['POST', new RegExp('^/session/[^/]+/appium/device/lock')], ['POST', new RegExp('^/session/[^/]+/appium/device/pull_file')], ['POST', new RegExp('^/session/[^/]+/appium/device/push_file')], ['POST', new RegExp('^/session/[^/]+/appium/device/remove_app')], ['POST', new RegExp('^/session/[^/]+/appium/device/terminate_app')], ['POST', new RegExp('^/session/[^/]+/appium/device/unlock')], ['POST', new RegExp('^/session/[^/]+/appium/getPerformanceData')], ['POST', new RegExp('^/session/[^/]+/appium/performanceData/types')], ['POST', new RegExp('^/session/[^/]+/appium/start_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/stop_recording_screen')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute/async')], ['POST', new RegExp('^/session/[^/]+/execute/sync')], ['POST', new RegExp('^/session/[^/]+/execute_async')], ['POST', new RegExp('^/session/[^/]+/ime/[^/]+')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/timeouts')], ['POST', new RegExp('^/session/[^/]+/url')]];
const APP_EXTENSION = '.apk';

class EspressoDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['id', 'class name', 'accessibility id'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.espresso = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.chromedriver = null;
    this.sessionChromedrivers = {};
  }

  createSession(...args) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        let _ref = yield _superprop_callCreateSession(...args),
            _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            sessionId = _ref2[0],
            caps = _ref2[1];

        let serverDetails = {
          platform: 'LINUX',
          webStorageEnabled: false,
          takesScreenshot: true,
          javascriptEnabled: true,
          databaseEnabled: false,
          networkConnectionEnabled: true,
          locationContextEnabled: false,
          warnings: {},
          desired: Object.assign({}, _this.caps)
        };
        _this.caps = Object.assign(serverDetails, _this.caps);
        let defaultOpts = {
          fullReset: false,
          autoLaunch: true,
          adbPort: _appiumAdb.DEFAULT_ADB_PORT,
          androidInstallTimeout: 90000
        };

        _lodash.default.defaults(_this.opts, defaultOpts);

        if (_this.isChromeSession) {
          if (_this.opts.app) {
            _logger.default.warn(`
            'browserName' capability will be ignored.
            Chrome browser cannot be run in Espresso sessions because Espresso automation doesn't have permission to access Chrome.
          `);
          } else {
            _logger.default.errorAndThrow(`Chrome browser sessions cannot be run in Espresso because Espresso automation doesn't have permission to access Chrome`);
          }
        }

        if (_this.opts.reboot) {
          _this.setAvdFromCapabilities(caps);

          _this.addWipeDataToAvdArgs();
        }

        if (_this.opts.app) {
          _this.opts.app = yield _this.helpers.configureApp(_this.opts.app, APP_EXTENSION);
          yield _this.checkAppPresent();
        } else if (_this.appOnDevice) {
          _logger.default.info(`App file was not listed, instead we're going to run ` + `${_this.opts.appPackage} directly on the device`);

          yield _this.checkPackagePresent();
        }

        _this.opts.systemPort = _this.opts.systemPort || (yield (0, _portscanner.findAPortNotInUse)(SYSTEM_PORT_RANGE[0], SYSTEM_PORT_RANGE[1]));
        _this.opts.adbPort = _this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
        yield _this.startEspressoSession();
        return [sessionId, caps];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  get driverData() {
    return {};
  }

  isEmulator() {
    return !!this.opts.avd;
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  addWipeDataToAvdArgs() {
    if (!this.opts.avdArgs) {
      this.opts.avdArgs = '-wipe-data';
    } else if (!this.opts.avdArgs.toLowerCase().includes('-wipe-data')) {
      this.opts.avdArgs += ' -wipe-data';
    }
  }

  startEspressoSession() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`EspressoDriver version: ${_package.version}`);

      if (!_this2.opts.javaVersion) {
        _this2.opts.javaVersion = yield helpers.getJavaVersion();
      }

      let _ref3 = yield helpers.getDeviceInfoFromCaps(_this2.opts),
          udid = _ref3.udid,
          emPort = _ref3.emPort;

      _this2.opts.udid = udid;
      _this2.opts.emPort = emPort;
      _this2.adb = yield _appiumAndroidDriver.androidHelpers.createADB(_this2.opts);

      if ((yield _this2.adb.getApiLevel()) >= 28) {
        _logger.default.warn('Relaxing hidden api policy');

        yield _this2.adb.setHiddenApiPolicy('1');
      }

      let appInfo = yield helpers.getLaunchInfo(_this2.adb, _this2.opts);
      Object.assign(_this2.opts, appInfo);
      yield _appiumAndroidDriver.androidHelpers.pushSettingsApp(_this2.adb);

      if (yield _this2.adb.isAnimationOn()) {
        try {
          yield _this2.adb.setAnimationState(false);
          _this2.wasAnimationEnabled = true;
        } catch (err) {
          _logger.default.warn(`Unable to turn off animations: ${err.message}`);
        }
      }

      _this2.caps.deviceName = _this2.adb.curDeviceId;
      _this2.caps.deviceUDID = _this2.opts.udid;

      _this2.initEspressoServer();

      yield helpers.initDevice(_this2.adb, _this2.opts);

      _logger.default.debug(`Forwarding Espresso Server port ${DEVICE_PORT} to ${_this2.opts.systemPort}`);

      yield _this2.adb.forwardPort(_this2.opts.systemPort, DEVICE_PORT);

      if (!_this2.opts.skipUnlock) {
        yield helpers.unlock(_this2, _this2.adb, _this2.caps);
      } else {
        _logger.default.debug(`'skipUnlock' capability set, so skipping device unlock`);
      }

      if (_this2.opts.autoLaunch) {
        yield _this2.initAUT();
      }

      if (!_this2.caps.appPackage) {
        _this2.caps.appPackage = appInfo.appPackage;
      }

      if (!_this2.caps.appActivity) {
        let appActivity = appInfo.appActivity;

        if (!appInfo.appActivity.startsWith(_this2.caps.appPackage)) {
          appActivity = `${_this2.caps.appPackage}${appActivity.startsWith('.') ? '' : '.'}${appActivity}`;

          _logger.default.warn(`Adjusted appActivity to fully qualified version: '${appActivity}'`);
        }

        _this2.caps.appActivity = appActivity;
      }

      yield _this2.espresso.startSession(_this2.caps);

      if (_this2.opts.autoWebview) {
        const viewName = _appiumAndroidDriver.androidCommands.defaultWebviewName.call(_this2);

        const timeout = _this2.opts.autoWebviewTimeout || 2000;

        _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

        yield (0, _asyncbox.retryInterval)(timeout / 500, 500, _this2.setContext.bind(_this2), viewName);
      }

      _this2.jwpProxyActive = true;
      yield _this2.addDeviceInfoToCaps();
    })();
  }

  addDeviceInfoToCaps() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const _ref4 = yield _this3.mobileGetDeviceInfo(),
            apiVersion = _ref4.apiVersion,
            platformVersion = _ref4.platformVersion,
            manufacturer = _ref4.manufacturer,
            model = _ref4.model,
            realDisplaySize = _ref4.realDisplaySize,
            displayDensity = _ref4.displayDensity;

      _this3.caps.deviceApiLevel = parseInt(apiVersion, 10);
      _this3.caps.platformVersion = platformVersion;
      _this3.caps.deviceScreenSize = realDisplaySize;
      _this3.caps.deviceScreenDensity = displayDensity;
      _this3.caps.deviceModel = model;
      _this3.caps.deviceManufacturer = manufacturer;
    })();
  }

  initEspressoServer() {
    this.espresso = new _espressoRunner.default({
      host: this.opts.host || 'localhost',
      systemPort: this.opts.systemPort,
      devicePort: DEVICE_PORT,
      adb: this.adb,
      apk: this.opts.app,
      tmpDir: this.opts.tmpDir,
      appPackage: this.opts.appPackage,
      appActivity: this.opts.appActivity,
      forceEspressoRebuild: !!this.opts.forceEspressoRebuild,
      serverLaunchTimeout: this.opts.espressoServerLaunchTimeout
    });
    this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);
  }

  initAUT() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this4.opts.app) {
        if (_this4.opts.fullReset) {
          _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
        }

        _logger.default.debug('No app capability. Assuming it is already on the device');

        if (_this4.opts.fastReset) {
          yield helpers.resetApp(_this4.adb, _this4.opts);
        }
      }

      if (!_this4.opts.skipUninstall) {
        yield _this4.adb.uninstallApk(_this4.opts.appPackage);
      }

      if (!_this4.opts.noSign) {
        let signed = yield _this4.adb.checkApkCert(_this4.opts.app, _this4.opts.appPackage);

        if (!signed && _this4.opts.app) {
          yield _this4.adb.sign(_this4.opts.app, _this4.opts.appPackage);
        }
      }

      if (_this4.opts.app) {
        yield helpers.installApk(_this4.adb, _this4.opts);
      }

      yield _this4.espresso.installTestApk();
    })();
  }

  deleteSession() {
    var _this5 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting espresso session');

      if (_this5.espresso) {
        if (_this5.jwpProxyActive) {
          yield _this5.espresso.deleteSession();
        }

        _this5.espresso = null;
      }

      _this5.jwpProxyActive = false;

      if (_this5.adb) {
        if (_this5.wasAnimationEnabled) {
          try {
            yield _this5.adb.setAnimationState(true);
          } catch (err) {
            _logger.default.warn(`Unable to reset animation: ${err.message}`);
          }
        }

        if (_this5.opts.unicodeKeyboard && _this5.opts.resetKeyboard && _this5.defaultIME) {
          _logger.default.debug(`Resetting IME to '${_this5.defaultIME}'`);

          yield _this5.adb.setIME(_this5.defaultIME);
        }

        if (_this5.opts.appPackage) {
          yield _this5.adb.forceStop(_this5.opts.appPackage);
        }

        if (_this5.opts.fullReset && !_this5.opts.skipUninstall && !_this5.appOnDevice) {
          _logger.default.debug(`FULL_RESET set to 'true', Uninstalling '${_this5.opts.appPackage}'`);

          yield _this5.adb.uninstallApk(_this5.opts.appPackage);
        }

        yield _this5.adb.stopLogcat();

        if (_this5.opts.reboot) {
          let avdName = _this5.opts.avd.replace('@', '');

          _logger.default.debug(`closing emulator '${avdName}'`);

          yield _this5.adb.killEmulator(avdName);
        }

        if ((yield _this5.adb.getApiLevel()) >= 28) {
          _logger.default.info('Restoring hidden api policy to the device default configuration');

          yield _this5.adb.setDefaultHiddenApiPolicy();
        }
      }

      yield _superprop_callDeleteSession();

      if (_this5.opts.systemPort !== undefined) {
        try {
          yield _this5.adb.removePortForward(_this5.opts.systemPort);
        } catch (error) {
          _logger.default.warn(`Unable to remove port forward '${error.message}'`);
        }
      }
    })();
  }

  checkAppPresent() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Checking whether app is actually present');

      if (!(yield _appiumSupport.fs.exists(_this6.opts.app))) {
        _logger.default.errorAndThrow(`Could not find app apk at '${_this6.opts.app}'`);
      }
    })();
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    this.jwpProxyAvoid = NO_PROXY;
    return this.jwpProxyAvoid;
  }

  get isChromeSession() {
    return helpers.isChromeBrowser(this.opts.browserName);
  }

}

exports.EspressoDriver = EspressoDriver;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        cmd = _step$value[0],
        fn = _step$value[1];

    if (!_lodash.default.includes(['defaultWebviewName'], cmd)) {
      EspressoDriver.prototype[cmd] = fn;
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _lodash.default.toPairs(_commands.default)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
        cmd = _step2$value[0],
        fn = _step2$value[1];

    EspressoDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

var _default = EspressoDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiaGVscGVycyIsImFuZHJvaWRIZWxwZXJzIiwiU1lTVEVNX1BPUlRfUkFOR0UiLCJERVZJQ0VfUE9SVCIsIk5PX1BST1hZIiwiUmVnRXhwIiwiQVBQX0VYVEVOU0lPTiIsIkVzcHJlc3NvRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsInNoZWxsIiwibG9jYXRvclN0cmF0ZWdpZXMiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJlc3ByZXNzbyIsImp3cFByb3h5QWN0aXZlIiwiZGVmYXVsdElNRSIsImp3cFByb3h5QXZvaWQiLCJhcGtTdHJpbmdzIiwiY2hyb21lZHJpdmVyIiwic2Vzc2lvbkNocm9tZWRyaXZlcnMiLCJjcmVhdGVTZXNzaW9uIiwiYXJncyIsInNlc3Npb25JZCIsImNhcHMiLCJzZXJ2ZXJEZXRhaWxzIiwicGxhdGZvcm0iLCJ3ZWJTdG9yYWdlRW5hYmxlZCIsInRha2VzU2NyZWVuc2hvdCIsImphdmFzY3JpcHRFbmFibGVkIiwiZGF0YWJhc2VFbmFibGVkIiwibmV0d29ya0Nvbm5lY3Rpb25FbmFibGVkIiwibG9jYXRpb25Db250ZXh0RW5hYmxlZCIsIndhcm5pbmdzIiwiZGVzaXJlZCIsIk9iamVjdCIsImFzc2lnbiIsImRlZmF1bHRPcHRzIiwiZnVsbFJlc2V0IiwiYXV0b0xhdW5jaCIsImFkYlBvcnQiLCJERUZBVUxUX0FEQl9QT1JUIiwiYW5kcm9pZEluc3RhbGxUaW1lb3V0IiwiXyIsImRlZmF1bHRzIiwiaXNDaHJvbWVTZXNzaW9uIiwiYXBwIiwibG9nZ2VyIiwid2FybiIsImVycm9yQW5kVGhyb3ciLCJyZWJvb3QiLCJzZXRBdmRGcm9tQ2FwYWJpbGl0aWVzIiwiYWRkV2lwZURhdGFUb0F2ZEFyZ3MiLCJjb25maWd1cmVBcHAiLCJjaGVja0FwcFByZXNlbnQiLCJhcHBPbkRldmljZSIsImluZm8iLCJhcHBQYWNrYWdlIiwiY2hlY2tQYWNrYWdlUHJlc2VudCIsInN5c3RlbVBvcnQiLCJzdGFydEVzcHJlc3NvU2Vzc2lvbiIsImUiLCJkZWxldGVTZXNzaW9uIiwiZHJpdmVyRGF0YSIsImlzRW11bGF0b3IiLCJhdmQiLCJkZXZpY2VOYW1lIiwicGxhdGZvcm1WZXJzaW9uIiwiYXZkRGV2aWNlIiwicmVwbGFjZSIsImF2ZEFyZ3MiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwidmVyc2lvbiIsImphdmFWZXJzaW9uIiwiZ2V0SmF2YVZlcnNpb24iLCJnZXREZXZpY2VJbmZvRnJvbUNhcHMiLCJ1ZGlkIiwiZW1Qb3J0IiwiYWRiIiwiY3JlYXRlQURCIiwiZ2V0QXBpTGV2ZWwiLCJzZXRIaWRkZW5BcGlQb2xpY3kiLCJhcHBJbmZvIiwiZ2V0TGF1bmNoSW5mbyIsInB1c2hTZXR0aW5nc0FwcCIsImlzQW5pbWF0aW9uT24iLCJzZXRBbmltYXRpb25TdGF0ZSIsIndhc0FuaW1hdGlvbkVuYWJsZWQiLCJlcnIiLCJtZXNzYWdlIiwiY3VyRGV2aWNlSWQiLCJkZXZpY2VVRElEIiwiaW5pdEVzcHJlc3NvU2VydmVyIiwiaW5pdERldmljZSIsImRlYnVnIiwiZm9yd2FyZFBvcnQiLCJza2lwVW5sb2NrIiwidW5sb2NrIiwiaW5pdEFVVCIsImFwcEFjdGl2aXR5Iiwic3RhcnRzV2l0aCIsInN0YXJ0U2Vzc2lvbiIsImF1dG9XZWJ2aWV3Iiwidmlld05hbWUiLCJhbmRyb2lkQ29tbWFuZHMiLCJkZWZhdWx0V2Vidmlld05hbWUiLCJjYWxsIiwidGltZW91dCIsImF1dG9XZWJ2aWV3VGltZW91dCIsInNldENvbnRleHQiLCJiaW5kIiwiYWRkRGV2aWNlSW5mb1RvQ2FwcyIsIm1vYmlsZUdldERldmljZUluZm8iLCJhcGlWZXJzaW9uIiwibWFudWZhY3R1cmVyIiwibW9kZWwiLCJyZWFsRGlzcGxheVNpemUiLCJkaXNwbGF5RGVuc2l0eSIsImRldmljZUFwaUxldmVsIiwicGFyc2VJbnQiLCJkZXZpY2VTY3JlZW5TaXplIiwiZGV2aWNlU2NyZWVuRGVuc2l0eSIsImRldmljZU1vZGVsIiwiZGV2aWNlTWFudWZhY3R1cmVyIiwiRXNwcmVzc29SdW5uZXIiLCJob3N0IiwiZGV2aWNlUG9ydCIsImFwayIsInRtcERpciIsImZvcmNlRXNwcmVzc29SZWJ1aWxkIiwic2VydmVyTGF1bmNoVGltZW91dCIsImVzcHJlc3NvU2VydmVyTGF1bmNoVGltZW91dCIsInByb3h5UmVxUmVzIiwiZmFzdFJlc2V0IiwicmVzZXRBcHAiLCJza2lwVW5pbnN0YWxsIiwidW5pbnN0YWxsQXBrIiwibm9TaWduIiwic2lnbmVkIiwiY2hlY2tBcGtDZXJ0Iiwic2lnbiIsImluc3RhbGxBcGsiLCJpbnN0YWxsVGVzdEFwayIsInVuaWNvZGVLZXlib2FyZCIsInJlc2V0S2V5Ym9hcmQiLCJzZXRJTUUiLCJmb3JjZVN0b3AiLCJzdG9wTG9nY2F0IiwiYXZkTmFtZSIsImtpbGxFbXVsYXRvciIsInNldERlZmF1bHRIaWRkZW5BcGlQb2xpY3kiLCJ1bmRlZmluZWQiLCJyZW1vdmVQb3J0Rm9yd2FyZCIsImVycm9yIiwiZnMiLCJleGlzdHMiLCJwcm94eUFjdGl2ZSIsImNhblByb3h5IiwiZ2V0UHJveHlBdm9pZExpc3QiLCJpc0Nocm9tZUJyb3dzZXIiLCJicm93c2VyTmFtZSIsInRvUGFpcnMiLCJjbWQiLCJmbiIsInByb3RvdHlwZSIsImNvbW1hbmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUEsTUFBTUEsT0FBTyxHQUFHQyxtQ0FBaEI7QUFJQSxNQUFNQyxpQkFBaUIsR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLENBQTFCO0FBSUEsTUFBTUMsV0FBVyxHQUFHLElBQXBCO0FBTUEsTUFBTUMsUUFBUSxHQUFHLENBQ2YsQ0FBQyxLQUFELEVBQVEsSUFBSUMsTUFBSixDQUFXLG1CQUFYLENBQVIsQ0FEZSxFQUVmLENBQUMsS0FBRCxFQUFRLElBQUlBLE1BQUosQ0FBVyxnREFBWCxDQUFSLENBRmUsRUFHZixDQUFDLEtBQUQsRUFBUSxJQUFJQSxNQUFKLENBQVcsK0NBQVgsQ0FBUixDQUhlLEVBSWYsQ0FBQyxLQUFELEVBQVEsSUFBSUEsTUFBSixDQUFXLCtDQUFYLENBQVIsQ0FKZSxFQUtmLENBQUMsS0FBRCxFQUFRLElBQUlBLE1BQUosQ0FBVyxpREFBWCxDQUFSLENBTGUsRUFNZixDQUFDLEtBQUQsRUFBUSxJQUFJQSxNQUFKLENBQVcsMkNBQVgsQ0FBUixDQU5lLEVBT2YsQ0FBQyxLQUFELEVBQVEsSUFBSUEsTUFBSixDQUFXLDJDQUFYLENBQVIsQ0FQZSxFQVFmLENBQUMsS0FBRCxFQUFRLElBQUlBLE1BQUosQ0FBVyx5QkFBWCxDQUFSLENBUmUsRUFTZixDQUFDLEtBQUQsRUFBUSxJQUFJQSxNQUFKLENBQVcsMEJBQVgsQ0FBUixDQVRlLEVBVWYsQ0FBQyxLQUFELEVBQVEsSUFBSUEsTUFBSixDQUFXLDJCQUFYLENBQVIsQ0FWZSxFQVdmLENBQUMsS0FBRCxFQUFRLElBQUlBLE1BQUosQ0FBVyxvQ0FBWCxDQUFSLENBWGUsRUFZZixDQUFDLEtBQUQsRUFBUSxJQUFJQSxNQUFKLENBQVcsMEJBQVgsQ0FBUixDQVplLEVBYWYsQ0FBQyxLQUFELEVBQVEsSUFBSUEsTUFBSixDQUFXLHFCQUFYLENBQVIsQ0FiZSxFQWNmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx1Q0FBWCxDQUFULENBZGUsRUFlZixDQUFDLE1BQUQsRUFBUyxJQUFJQSxNQUFKLENBQVcsa0NBQVgsQ0FBVCxDQWZlLEVBZ0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxtQ0FBWCxDQUFULENBaEJlLEVBaUJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxrQ0FBWCxDQUFULENBakJlLEVBa0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxvQ0FBWCxDQUFULENBbEJlLEVBbUJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx1Q0FBWCxDQUFULENBbkJlLEVBb0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyw0Q0FBWCxDQUFULENBcEJlLEVBcUJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyw2Q0FBWCxDQUFULENBckJlLEVBc0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx5Q0FBWCxDQUFULENBdEJlLEVBdUJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVywyQ0FBWCxDQUFULENBdkJlLEVBd0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx5Q0FBWCxDQUFULENBeEJlLEVBeUJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxvQ0FBWCxDQUFULENBekJlLEVBMEJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx5Q0FBWCxDQUFULENBMUJlLEVBMkJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx5Q0FBWCxDQUFULENBM0JlLEVBNEJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVywwQ0FBWCxDQUFULENBNUJlLEVBNkJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyw2Q0FBWCxDQUFULENBN0JlLEVBOEJmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyxzQ0FBWCxDQUFULENBOUJlLEVBK0JmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVywyQ0FBWCxDQUFULENBL0JlLEVBZ0NmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyw4Q0FBWCxDQUFULENBaENlLEVBaUNmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVywrQ0FBWCxDQUFULENBakNlLEVBa0NmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyw4Q0FBWCxDQUFULENBbENlLEVBbUNmLENBQUMsTUFBRCxFQUFTLElBQUlBLE1BQUosQ0FBVyx5QkFBWCxDQUFULENBbkNlLEVBb0Nm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QWpDSCxHQUFpQztBQUFBLFFBQTVCQyxFQUE0Qjs7QUFDekM5SixJQUFBQSxjQUFjLENBQUMrSixTQUFmLENBQXlCRixHQUF6QixJQUFnQ0MsRUFBaEM7QUFDRDs7Ozs7Ozs7Ozs7Ozs7OztlQUdjOUosYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBCYXNlRHJpdmVyIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBFc3ByZXNzb1J1bm5lciBmcm9tICcuL2VzcHJlc3NvLXJ1bm5lcic7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IHsgREVGQVVMVF9BREJfUE9SVCB9IGZyb20gJ2FwcGl1bS1hZGInO1xuaW1wb3J0IHsgYW5kcm9pZEhlbHBlcnMsIGFuZHJvaWRDb21tYW5kcyB9IGZyb20gJ2FwcGl1bS1hbmRyb2lkLWRyaXZlcic7XG5pbXBvcnQgZGVzaXJlZENhcENvbnN0cmFpbnRzIGZyb20gJy4vZGVzaXJlZC1jYXBzJztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5pbXBvcnQgeyBmaW5kQVBvcnROb3RJblVzZSB9IGZyb20gJ3BvcnRzY2FubmVyJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5cblxuLy8gVE9ETyBtZXJnZSBvdXIgb3duIGhlbHBlcnMgb250byB0aGlzIGxhdGVyXG5jb25zdCBoZWxwZXJzID0gYW5kcm9pZEhlbHBlcnM7XG5cbi8vIFRoZSByYW5nZSBvZiBwb3J0cyB3ZSBjYW4gdXNlIG9uIHRoZSBzeXN0ZW0gZm9yIGNvbW11bmljYXRpbmcgdG8gdGhlXG4vLyBFc3ByZXNzbyBIVFRQIHNlcnZlciBvbiB0aGUgZGV2aWNlXG5jb25zdCBTWVNURU1fUE9SVF9SQU5HRSA9IFs4MzAwLCA4Mzk5XTtcblxuLy8gVGhpcyBpcyB0aGUgcG9ydCB0aGF0IHRoZSBlc3ByZXNzbyBzZXJ2ZXIgbGlzdGVucyB0byBvbiB0aGUgZGV2aWNlLiBXZSB3aWxsXG4vLyBmb3J3YXJkIG9uZSBvZiB0aGUgcG9ydHMgYWJvdmUgb24gdGhlIHN5c3RlbSB0byB0aGlzIHBvcnQgb24gdGhlIGRldmljZS5cbmNvbnN0IERFVklDRV9QT1JUID0gNjc5MTtcblxuLy8gTk9fUFJPWFkgY29udGFpbnMgdGhlIHBhdGhzIHRoYXQgd2UgbmV2ZXIgd2FudCB0byBwcm94eSB0byBlc3ByZXNzbyBzZXJ2ZXIuXG4vLyBUT0RPOiAgQWRkIHRoZSBsaXN0IG9mIHBhdGhzIHRoYXQgd2UgbmV2ZXIgd2FudCB0byBwcm94eSB0byBlc3ByZXNzbyBzZXJ2ZXIuXG4vLyBUT0RPOiBOZWVkIHRvIHNlZ3JlZ2F0ZSB0aGUgcGF0aHMgYmV0dGVyIHdheSB1c2luZyByZWd1bGFyIGV4cHJlc3Npb25zIHdoZXJldmVyIGFwcGxpY2FibGUuXG4vLyAoTm90IHNlZ3JlZ2F0aW5nIHJpZ2h0IGF3YXkgYmVjYXVzZSBtb3JlIHBhdGhzIHRvIGJlIGFkZGVkIGluIHRoZSBOT19QUk9YWSBsaXN0KVxuY29uc3QgTk9fUFJPWFkgPSBbXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uLyg/IS4qLyknKV0sXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9kZXZpY2UvY3VycmVudF9hY3Rpdml0eScpXSxcbiAgWydHRVQnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2RldmljZS9jdXJyZW50X3BhY2thZ2UnKV0sXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9kZXZpY2UvZGlzcGxheV9kZW5zaXR5JyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL2lzX2tleWJvYXJkX3Nob3duJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL3N5c3RlbV9iYXJzJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL3N5c3RlbV90aW1lJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9jb250ZXh0JyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9jb250ZXh0cycpXSxcbiAgWydHRVQnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvbG9nL3R5cGVzJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9uZXR3b3JrX2Nvbm5lY3Rpb24nKV0sXG4gIFsnR0VUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL3RpbWVvdXRzJyldLFxuICBbJ0dFVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy91cmwnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vYXBwL2JhY2tncm91bmQnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vYXBwL2Nsb3NlJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2FwcC9sYXVuY2gnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vYXBwL3Jlc2V0JyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2FwcC9zdHJpbmdzJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2NvbXBhcmVfaW1hZ2VzJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2RldmljZS9hY3RpdmF0ZV9hcHAnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL2FwcF9pbnN0YWxsZWQnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL2FwcF9zdGF0ZScpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9kZXZpY2UvaW5zdGFsbF9hcHAnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL2lzX2xvY2tlZCcpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9kZXZpY2UvbG9jaycpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9kZXZpY2UvcHVsbF9maWxlJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL2RldmljZS9wdXNoX2ZpbGUnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL3JlbW92ZV9hcHAnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL3Rlcm1pbmF0ZV9hcHAnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vZGV2aWNlL3VubG9jaycpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9nZXRQZXJmb3JtYW5jZURhdGEnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vcGVyZm9ybWFuY2VEYXRhL3R5cGVzJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvYXBwaXVtL3N0YXJ0X3JlY29yZGluZ19zY3JlZW4nKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vc3RvcF9yZWNvcmRpbmdfc2NyZWVuJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvY29udGV4dCcpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2V4ZWN1dGUnKV0sXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9leGVjdXRlL2FzeW5jJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvZXhlY3V0ZS9zeW5jJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvZXhlY3V0ZV9hc3luYycpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2ltZS9bXi9dKycpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2xvZycpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL25ldHdvcmtfY29ubmVjdGlvbicpXSxcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL3RpbWVvdXRzJyldLFxuICBbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvdXJsJyldLFxuXTtcblxuY29uc3QgQVBQX0VYVEVOU0lPTiA9ICcuYXBrJztcblxuXG5jbGFzcyBFc3ByZXNzb0RyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzaG91bGRWYWxpZGF0ZUNhcHMgPSB0cnVlKSB7XG4gICAgLy8gYHNoZWxsYCBvdmVyd3JpdGVzIGFkYi5zaGVsbCwgc28gcmVtb3ZlXG4gICAgZGVsZXRlIG9wdHMuc2hlbGw7XG5cbiAgICBzdXBlcihvcHRzLCBzaG91bGRWYWxpZGF0ZUNhcHMpO1xuICAgIHRoaXMubG9jYXRvclN0cmF0ZWdpZXMgPSBbXG4gICAgICAnaWQnLFxuICAgICAgJ2NsYXNzIG5hbWUnLFxuICAgICAgJ2FjY2Vzc2liaWxpdHkgaWQnLFxuICAgIF07XG4gICAgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMgPSBkZXNpcmVkQ2FwQ29uc3RyYWludHM7XG4gICAgdGhpcy5lc3ByZXNzbyA9IG51bGw7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuZGVmYXVsdElNRSA9IG51bGw7XG4gICAgdGhpcy5qd3BQcm94eUF2b2lkID0gTk9fUFJPWFk7XG5cbiAgICB0aGlzLmFwa1N0cmluZ3MgPSB7fTsgLy8gbWFwIG9mIGxhbmd1YWdlIC0+IHN0cmluZ3Mgb2JqXG5cbiAgICB0aGlzLmNocm9tZWRyaXZlciA9IG51bGw7XG4gICAgdGhpcy5zZXNzaW9uQ2hyb21lZHJpdmVycyA9IHt9O1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoLi4uYXJncykge1xuICAgIHRyeSB7XG4gICAgICAvLyBUT0RPIGhhbmRsZSBvdGhlclNlc3Npb25EYXRhIGZvciBtdWx0aXBsZSBzZXNzaW9uc1xuICAgICAgbGV0IFtzZXNzaW9uSWQsIGNhcHNdID0gYXdhaXQgc3VwZXIuY3JlYXRlU2Vzc2lvbiguLi5hcmdzKTtcblxuICAgICAgbGV0IHNlcnZlckRldGFpbHMgPSB7XG4gICAgICAgIHBsYXRmb3JtOiAnTElOVVgnLFxuICAgICAgICB3ZWJTdG9yYWdlRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHRha2VzU2NyZWVuc2hvdDogdHJ1ZSxcbiAgICAgICAgamF2YXNjcmlwdEVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGRhdGFiYXNlRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG5ldHdvcmtDb25uZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgbG9jYXRpb25Db250ZXh0RW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHdhcm5pbmdzOiB7fSxcbiAgICAgICAgZGVzaXJlZDogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jYXBzKVxuICAgICAgfTtcblxuICAgICAgdGhpcy5jYXBzID0gT2JqZWN0LmFzc2lnbihzZXJ2ZXJEZXRhaWxzLCB0aGlzLmNhcHMpO1xuXG4gICAgICBsZXQgZGVmYXVsdE9wdHMgPSB7XG4gICAgICAgIGZ1bGxSZXNldDogZmFsc2UsXG4gICAgICAgIGF1dG9MYXVuY2g6IHRydWUsXG4gICAgICAgIGFkYlBvcnQ6IERFRkFVTFRfQURCX1BPUlQsXG4gICAgICAgIGFuZHJvaWRJbnN0YWxsVGltZW91dDogOTAwMDBcbiAgICAgIH07XG4gICAgICBfLmRlZmF1bHRzKHRoaXMub3B0cywgZGVmYXVsdE9wdHMpO1xuXG4gICAgICBpZiAodGhpcy5pc0Nocm9tZVNlc3Npb24pIHtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5hcHApIHtcbiAgICAgICAgICBsb2dnZXIud2FybihgXG4gICAgICAgICAgICAnYnJvd3Nlck5hbWUnIGNhcGFiaWxpdHkgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgQ2hyb21lIGJyb3dzZXIgY2Fubm90IGJlIHJ1biBpbiBFc3ByZXNzbyBzZXNzaW9ucyBiZWNhdXNlIEVzcHJlc3NvIGF1dG9tYXRpb24gZG9lc24ndCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIENocm9tZS5cbiAgICAgICAgICBgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgQ2hyb21lIGJyb3dzZXIgc2Vzc2lvbnMgY2Fubm90IGJlIHJ1biBpbiBFc3ByZXNzbyBiZWNhdXNlIEVzcHJlc3NvIGF1dG9tYXRpb24gZG9lc24ndCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIENocm9tZWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdHMucmVib290KSB7XG4gICAgICAgIHRoaXMuc2V0QXZkRnJvbUNhcGFiaWxpdGllcyhjYXBzKTtcbiAgICAgICAgdGhpcy5hZGRXaXBlRGF0YVRvQXZkQXJncygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRzLmFwcCkge1xuICAgICAgICAvLyBmaW5kIGFuZCBjb3B5LCBvciBkb3dubG9hZCBhbmQgdW56aXAgYW4gYXBwIHVybCBvciBwYXRoXG4gICAgICAgIHRoaXMub3B0cy5hcHAgPSBhd2FpdCB0aGlzLmhlbHBlcnMuY29uZmlndXJlQXBwKHRoaXMub3B0cy5hcHAsIEFQUF9FWFRFTlNJT04pO1xuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrQXBwUHJlc2VudCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmFwcE9uRGV2aWNlKSB7XG4gICAgICAgIC8vIHRoZSBhcHAgaXNuJ3QgYW4gYWN0dWFsIGFwcCBmaWxlIGJ1dCByYXRoZXIgc29tZXRoaW5nIHdlIHdhbnQgdG9cbiAgICAgICAgLy8gYXNzdW1lIGlzIG9uIHRoZSBkZXZpY2UgYW5kIGp1c3QgbGF1bmNoIHZpYSB0aGUgYXBwUGFja2FnZVxuICAgICAgICBsb2dnZXIuaW5mbyhgQXBwIGZpbGUgd2FzIG5vdCBsaXN0ZWQsIGluc3RlYWQgd2UncmUgZ29pbmcgdG8gcnVuIGAgK1xuICAgICAgICAgICAgYCR7dGhpcy5vcHRzLmFwcFBhY2thZ2V9IGRpcmVjdGx5IG9uIHRoZSBkZXZpY2VgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja1BhY2thZ2VQcmVzZW50KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0cy5zeXN0ZW1Qb3J0ID0gdGhpcy5vcHRzLnN5c3RlbVBvcnQgfHwgYXdhaXQgZmluZEFQb3J0Tm90SW5Vc2UoU1lTVEVNX1BPUlRfUkFOR0VbMF0sIFNZU1RFTV9QT1JUX1JBTkdFWzFdKTtcbiAgICAgIHRoaXMub3B0cy5hZGJQb3J0ID0gdGhpcy5vcHRzLmFkYlBvcnQgfHwgREVGQVVMVF9BREJfUE9SVDtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRFc3ByZXNzb1Nlc3Npb24oKTtcbiAgICAgIHJldHVybiBbc2Vzc2lvbklkLCBjYXBzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRyaXZlckRhdGEgKCkge1xuICAgIC8vIFRPRE8gZmlsbGUgb3V0IHJlc291cmNlIGluZm8gaGVyZVxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGlzRW11bGF0b3IgKCkge1xuICAgIHJldHVybiAhIXRoaXMub3B0cy5hdmQ7XG4gIH1cblxuICAvLyBUT0RPIHRoaXMgbWV0aG9kIGlzIGR1cGxpY2F0ZWQgZnJvbSB1aWF1dG9tYXRvcjItZHJpdmVyOyBjb25zb2xpZGF0ZVxuICBzZXRBdmRGcm9tQ2FwYWJpbGl0aWVzIChjYXBzKSB7XG4gICAgaWYgKHRoaXMub3B0cy5hdmQpIHtcbiAgICAgIGxvZ2dlci5pbmZvKCdhdmQgbmFtZSBkZWZpbmVkLCBpZ25vcmluZyBkZXZpY2UgbmFtZSBhbmQgcGxhdGZvcm0gdmVyc2lvbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNhcHMuZGV2aWNlTmFtZSkge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdygnYXZkIG9yIGRldmljZU5hbWUgc2hvdWxkIGJlIHNwZWNpZmllZCB3aGVuIHJlYm9vdCBvcHRpb24gaXMgZW5hYmxlcycpO1xuICAgICAgfVxuICAgICAgaWYgKCFjYXBzLnBsYXRmb3JtVmVyc2lvbikge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdygnYXZkIG9yIHBsYXRmb3JtVmVyc2lvbiBzaG91bGQgYmUgc3BlY2lmaWVkIHdoZW4gcmVib290IG9wdGlvbiBpcyBlbmFibGVkJyk7XG4gICAgICB9XG4gICAgICBsZXQgYXZkRGV2aWNlID0gY2Fwcy5kZXZpY2VOYW1lLnJlcGxhY2UoL1teYS16QS1aMC05Xy5dL2csIFwiLVwiKTtcbiAgICAgIHRoaXMub3B0cy5hdmQgPSBgJHthdmREZXZpY2V9X18ke2NhcHMucGxhdGZvcm1WZXJzaW9ufWA7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETyB0aGlzIG1ldGhvZCBpcyBkdXBsaWNhdGVkIGZyb20gdWlhdXRvbWF0b3IyLWRyaXZlcjsgY29uc29saWRhdGVcbiAgYWRkV2lwZURhdGFUb0F2ZEFyZ3MgKCkge1xuICAgIGlmICghdGhpcy5vcHRzLmF2ZEFyZ3MpIHtcbiAgICAgIHRoaXMub3B0cy5hdmRBcmdzID0gJy13aXBlLWRhdGEnO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0cy5hdmRBcmdzLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJy13aXBlLWRhdGEnKSkge1xuICAgICAgdGhpcy5vcHRzLmF2ZEFyZ3MgKz0gJyAtd2lwZS1kYXRhJztcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPIG11Y2ggb2YgdGhpcyBsb2dpYyBpcyBkdXBsaWNhdGVkIGZyb20gdWlhdXRvbWF0b3IyXG4gIGFzeW5jIHN0YXJ0RXNwcmVzc29TZXNzaW9uICgpIHtcblxuICAgIGxvZ2dlci5pbmZvKGBFc3ByZXNzb0RyaXZlciB2ZXJzaW9uOiAke3ZlcnNpb259YCk7XG5cbiAgICBpZiAoIXRoaXMub3B0cy5qYXZhVmVyc2lvbikge1xuICAgICAgdGhpcy5vcHRzLmphdmFWZXJzaW9uID0gYXdhaXQgaGVscGVycy5nZXRKYXZhVmVyc2lvbigpO1xuICAgIH1cblxuICAgIC8vIGdldCBkZXZpY2UgdWRpZCBmb3IgdGhpcyBzZXNzaW9uXG4gICAgbGV0IHt1ZGlkLCBlbVBvcnR9ID0gYXdhaXQgaGVscGVycy5nZXREZXZpY2VJbmZvRnJvbUNhcHModGhpcy5vcHRzKTtcbiAgICB0aGlzLm9wdHMudWRpZCA9IHVkaWQ7XG4gICAgdGhpcy5vcHRzLmVtUG9ydCA9IGVtUG9ydDtcblxuICAgIC8vIG5vdyB0aGF0IHdlIGtub3cgb3VyIGphdmEgdmVyc2lvbiBhbmQgZGV2aWNlIGluZm8sIHdlIGNhbiBjcmVhdGUgb3VyXG4gICAgLy8gQURCIGluc3RhbmNlXG4gICAgdGhpcy5hZGIgPSBhd2FpdCBhbmRyb2lkSGVscGVycy5jcmVhdGVBREIodGhpcy5vcHRzKTtcblxuICAgIC8vIFJlYWQgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0tYW5kcm9pZC1kcml2ZXIvcHVsbC80NjEgd2hhdCBoYXBwZW5zIGlmIHRoZXIgaXMgbm8gc2V0SGlkZGVuQXBpUG9saWN5IGZvciBBbmRyb2lkIFArXG4gICAgaWYgKGF3YWl0IHRoaXMuYWRiLmdldEFwaUxldmVsKCkgPj0gMjgpIHsgLy8gQW5kcm9pZCBQXG4gICAgICBsb2dnZXIud2FybignUmVsYXhpbmcgaGlkZGVuIGFwaSBwb2xpY3knKTtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLnNldEhpZGRlbkFwaVBvbGljeSgnMScpO1xuICAgIH1cblxuICAgIC8vIGdldCBhcHBQYWNrYWdlIGV0IGFsIGZyb20gbWFuaWZlc3QgaWYgbmVjZXNzYXJ5XG4gICAgbGV0IGFwcEluZm8gPSBhd2FpdCBoZWxwZXJzLmdldExhdW5jaEluZm8odGhpcy5hZGIsIHRoaXMub3B0cyk7XG4gICAgLy8gYW5kIGdldCBpdCBvbnRvIG91ciAnb3B0cycgb2JqZWN0IHNvIHdlIHVzZSBpdCBmcm9tIG5vdyBvblxuICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRzLCBhcHBJbmZvKTtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLWVzcHJlc3NvLWRyaXZlci9pc3N1ZXMvNzJcbiAgICBhd2FpdCBhbmRyb2lkSGVscGVycy5wdXNoU2V0dGluZ3NBcHAodGhpcy5hZGIpO1xuICAgIGlmIChhd2FpdCB0aGlzLmFkYi5pc0FuaW1hdGlvbk9uKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldEFuaW1hdGlvblN0YXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy53YXNBbmltYXRpb25FbmFibGVkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2dnZXIud2FybihgVW5hYmxlIHRvIHR1cm4gb2ZmIGFuaW1hdGlvbnM6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IGFjdHVhbCBkZXZpY2UgbmFtZSwgdWRpZFxuICAgIHRoaXMuY2Fwcy5kZXZpY2VOYW1lID0gdGhpcy5hZGIuY3VyRGV2aWNlSWQ7XG4gICAgdGhpcy5jYXBzLmRldmljZVVESUQgPSB0aGlzLm9wdHMudWRpZDtcblxuICAgIC8vIHNldCB1cCB0aGUgbW9kaWZpZWQgZXNwcmVzc28gc2VydmVyIGV0Y1xuICAgIHRoaXMuaW5pdEVzcHJlc3NvU2VydmVyKCk7XG4gICAgLy8gc3RhcnQgYW4gYXZkLCBzZXQgdGhlIGxhbmd1YWdlL2xvY2FsZSwgcGljayBhbiBlbXVsYXRvciwgZXRjLi4uXG4gICAgLy8gVE9ETyB3aXRoIG11bHRpcGxlIGRldmljZXMgd2UnbGwgbmVlZCB0byBwYXJhbWV0ZXJpemUgdGhpc1xuICAgIGF3YWl0IGhlbHBlcnMuaW5pdERldmljZSh0aGlzLmFkYiwgdGhpcy5vcHRzKTtcbiAgICAvLyBGdXJ0aGVyIHByZXBhcmUgdGhlIGRldmljZSBieSBmb3J3YXJkaW5nIHRoZSBlc3ByZXNzbyBwb3J0XG4gICAgbG9nZ2VyLmRlYnVnKGBGb3J3YXJkaW5nIEVzcHJlc3NvIFNlcnZlciBwb3J0ICR7REVWSUNFX1BPUlR9IHRvICR7dGhpcy5vcHRzLnN5c3RlbVBvcnR9YCk7XG4gICAgYXdhaXQgdGhpcy5hZGIuZm9yd2FyZFBvcnQodGhpcy5vcHRzLnN5c3RlbVBvcnQsIERFVklDRV9QT1JUKTtcblxuICAgIGlmICghdGhpcy5vcHRzLnNraXBVbmxvY2spIHtcbiAgICAgIC8vIHVubG9jayB0aGUgZGV2aWNlIHRvIHByZXBhcmUgaXQgZm9yIHRlc3RpbmdcbiAgICAgIGF3YWl0IGhlbHBlcnMudW5sb2NrKHRoaXMsIHRoaXMuYWRiLCB0aGlzLmNhcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZGVidWcoYCdza2lwVW5sb2NrJyBjYXBhYmlsaXR5IHNldCwgc28gc2tpcHBpbmcgZGV2aWNlIHVubG9ja2ApO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgdXNlciBzZXRzIGF1dG9MYXVuY2ggdG8gZmFsc2UsIHRoZXkgYXJlIHJlc3BvbnNpYmxlIGZvciBpbml0QVVUKCkgYW5kIHN0YXJ0QVVUKClcbiAgICBpZiAodGhpcy5vcHRzLmF1dG9MYXVuY2gpIHtcbiAgICAgIC8vIHNldCB1cCBhcHAgdW5kZXIgdGVzdFxuICAgICAgLy8gcHJlcGFyZSBvdXIgYWN0dWFsIEFVVCwgZ2V0IGl0IG9uIHRoZSBkZXZpY2UsIGV0Yy4uLlxuICAgICAgYXdhaXQgdGhpcy5pbml0QVVUKCk7XG4gICAgfVxuICAgIC8vQWRkaW5nIEFVVCBwYWNrYWdlIG5hbWUgaW4gdGhlIGNhcGFiaWxpdGllcyBpZiBwYWNrYWdlIG5hbWUgbm90IGV4aXN0IGluIGNhcHNcbiAgICBpZiAoIXRoaXMuY2Fwcy5hcHBQYWNrYWdlKSB7XG4gICAgICB0aGlzLmNhcHMuYXBwUGFja2FnZSA9IGFwcEluZm8uYXBwUGFja2FnZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmNhcHMuYXBwQWN0aXZpdHkpIHtcbiAgICAgIC8vIGZ1bGx5IHF1YWxpZnkgdGhlIGFwcEFjdGl2aXR5XG4gICAgICBsZXQgYXBwQWN0aXZpdHkgPSBhcHBJbmZvLmFwcEFjdGl2aXR5O1xuICAgICAgaWYgKCFhcHBJbmZvLmFwcEFjdGl2aXR5LnN0YXJ0c1dpdGgodGhpcy5jYXBzLmFwcFBhY2thZ2UpKSB7XG4gICAgICAgIGFwcEFjdGl2aXR5ID0gYCR7dGhpcy5jYXBzLmFwcFBhY2thZ2V9JHthcHBBY3Rpdml0eS5zdGFydHNXaXRoKCcuJykgPyAnJyA6ICcuJ30ke2FwcEFjdGl2aXR5fWA7XG4gICAgICAgIGxvZ2dlci53YXJuKGBBZGp1c3RlZCBhcHBBY3Rpdml0eSB0byBmdWxseSBxdWFsaWZpZWQgdmVyc2lvbjogJyR7YXBwQWN0aXZpdHl9J2ApO1xuICAgICAgfVxuICAgICAgdGhpcy5jYXBzLmFwcEFjdGl2aXR5ID0gYXBwQWN0aXZpdHk7XG4gICAgfVxuXG4gICAgLy8gbGF1bmNoIGVzcHJlc3NvIGFuZCB3YWl0IHRpbGwgaXRzIG9ubGluZSBhbmQgd2UgaGF2ZSBhIHNlc3Npb25cbiAgICBhd2FpdCB0aGlzLmVzcHJlc3NvLnN0YXJ0U2Vzc2lvbih0aGlzLmNhcHMpO1xuXG4gICAgLy8gaWYgd2Ugd2FudCB0byBpbW1lZGlhdGVseSBnZXQgaW50byBhIHdlYnZpZXcsIHNldCBvdXIgY29udGV4dFxuICAgIC8vIGFwcHJvcHJpYXRlbHlcbiAgICBpZiAodGhpcy5vcHRzLmF1dG9XZWJ2aWV3KSB7XG4gICAgICBjb25zdCB2aWV3TmFtZSA9IGFuZHJvaWRDb21tYW5kcy5kZWZhdWx0V2Vidmlld05hbWUuY2FsbCh0aGlzKTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLm9wdHMuYXV0b1dlYnZpZXdUaW1lb3V0IHx8IDIwMDA7XG4gICAgICBsb2dnZXIuaW5mbyhgU2V0dGluZyBhdXRvIHdlYnZpZXcgdG8gY29udGV4dCAnJHt2aWV3TmFtZX0nIHdpdGggdGltZW91dCAke3RpbWVvdXR9bXNgKTtcbiAgICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwodGltZW91dCAvIDUwMCwgNTAwLCB0aGlzLnNldENvbnRleHQuYmluZCh0aGlzKSwgdmlld05hbWUpO1xuICAgIH1cblxuICAgIC8vIG5vdyB0aGF0IGV2ZXJ5dGhpbmcgaGFzIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5LCB0dXJuIG9uIHByb3h5aW5nIHNvIGFsbFxuICAgIC8vIHN1YnNlcXVlbnQgc2Vzc2lvbiByZXF1ZXN0cyBnbyBzdHJhaWdodCB0by9mcm9tIGVzcHJlc3NvXG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IHRydWU7XG5cbiAgICBhd2FpdCB0aGlzLmFkZERldmljZUluZm9Ub0NhcHMoKTtcbiAgfVxuXG4gIGFzeW5jIGFkZERldmljZUluZm9Ub0NhcHMgKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwaVZlcnNpb24sXG4gICAgICBwbGF0Zm9ybVZlcnNpb24sXG4gICAgICBtYW51ZmFjdHVyZXIsXG4gICAgICBtb2RlbCxcbiAgICAgIHJlYWxEaXNwbGF5U2l6ZSxcbiAgICAgIGRpc3BsYXlEZW5zaXR5LFxuICAgIH0gPSBhd2FpdCB0aGlzLm1vYmlsZUdldERldmljZUluZm8oKTtcbiAgICB0aGlzLmNhcHMuZGV2aWNlQXBpTGV2ZWwgPSBwYXJzZUludChhcGlWZXJzaW9uLCAxMCk7XG4gICAgdGhpcy5jYXBzLnBsYXRmb3JtVmVyc2lvbiA9IHBsYXRmb3JtVmVyc2lvbjtcbiAgICB0aGlzLmNhcHMuZGV2aWNlU2NyZWVuU2l6ZSA9IHJlYWxEaXNwbGF5U2l6ZTtcbiAgICB0aGlzLmNhcHMuZGV2aWNlU2NyZWVuRGVuc2l0eSA9IGRpc3BsYXlEZW5zaXR5O1xuICAgIHRoaXMuY2Fwcy5kZXZpY2VNb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuY2Fwcy5kZXZpY2VNYW51ZmFjdHVyZXIgPSBtYW51ZmFjdHVyZXI7XG4gIH1cblxuICBpbml0RXNwcmVzc29TZXJ2ZXIgKCkge1xuICAgIC8vIG5vdyB0aGF0IHdlIGhhdmUgcGFja2FnZSBhbmQgYWN0aXZpdHksIHdlIGNhbiBjcmVhdGUgYW4gaW5zdGFuY2Ugb2ZcbiAgICAvLyBlc3ByZXNzbyB3aXRoIHRoZSBhcHByb3ByaWF0ZSBkYXRhXG4gICAgdGhpcy5lc3ByZXNzbyA9IG5ldyBFc3ByZXNzb1J1bm5lcih7XG4gICAgICBob3N0OiB0aGlzLm9wdHMuaG9zdCB8fCAnbG9jYWxob3N0JyxcbiAgICAgIHN5c3RlbVBvcnQ6IHRoaXMub3B0cy5zeXN0ZW1Qb3J0LFxuICAgICAgZGV2aWNlUG9ydDogREVWSUNFX1BPUlQsXG4gICAgICBhZGI6IHRoaXMuYWRiLFxuICAgICAgYXBrOiB0aGlzLm9wdHMuYXBwLFxuICAgICAgdG1wRGlyOiB0aGlzLm9wdHMudG1wRGlyLFxuICAgICAgYXBwUGFja2FnZTogdGhpcy5vcHRzLmFwcFBhY2thZ2UsXG4gICAgICBhcHBBY3Rpdml0eTogdGhpcy5vcHRzLmFwcEFjdGl2aXR5LFxuICAgICAgZm9yY2VFc3ByZXNzb1JlYnVpbGQ6ICEhdGhpcy5vcHRzLmZvcmNlRXNwcmVzc29SZWJ1aWxkLFxuICAgICAgc2VydmVyTGF1bmNoVGltZW91dDogdGhpcy5vcHRzLmVzcHJlc3NvU2VydmVyTGF1bmNoVGltZW91dCxcbiAgICB9KTtcbiAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy5lc3ByZXNzby5wcm94eVJlcVJlcy5iaW5kKHRoaXMuZXNwcmVzc28pO1xuICB9XG5cbiAgLy8gVE9ETyB0aGlzIG1ldGhvZCBpcyBtb3N0bHkgZHVwbGljYXRlZCBmcm9tIHVpYXV0b21hdG9yMlxuICBhc3luYyBpbml0QVVUICgpIHtcbiAgICAvLyBzZXQgdGhlIGxvY2FsaXplZCBzdHJpbmdzIGZvciB0aGUgY3VycmVudCBsYW5ndWFnZSBmcm9tIHRoZSBhcGtcbiAgICAvLyBUT0RPOiBpbmNvcnBvcmF0ZSBjaGFuZ2VzIGZyb20gYXBwaXVtIzUzMDggd2hpY2ggZml4IGEgcmFjZSBjb25kLVxuICAgIC8vIGl0aW9uIGJ1ZyBpbiBvbGQgYXBwaXVtIGFuZCBuZWVkIHRvIGJlIHJlcGxpY2F0ZWQgaGVyZVxuICAgIC8vIHRoaXMuYXBrU3RyaW5nc1t0aGlzLm9wdHMubGFuZ3VhZ2VdID0gYXdhaXQgYW5kcm9pZEhlbHBlcnMucHVzaFN0cmluZ3MoXG4gICAgLy8gICAgIHRoaXMub3B0cy5sYW5ndWFnZSwgdGhpcy5hZGIsIHRoaXMub3B0cyk7XG5cbiAgICBpZiAoIXRoaXMub3B0cy5hcHApIHtcbiAgICAgIGlmICh0aGlzLm9wdHMuZnVsbFJlc2V0KSB7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KCdGdWxsIHJlc2V0IHJlcXVpcmVzIGFuIGFwcCBjYXBhYmlsaXR5LCB1c2UgZmFzdFJlc2V0IGlmIGFwcCBpcyBub3QgcHJvdmlkZWQnKTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5kZWJ1ZygnTm8gYXBwIGNhcGFiaWxpdHkuIEFzc3VtaW5nIGl0IGlzIGFscmVhZHkgb24gdGhlIGRldmljZScpO1xuICAgICAgaWYgKHRoaXMub3B0cy5mYXN0UmVzZXQpIHtcbiAgICAgICAgYXdhaXQgaGVscGVycy5yZXNldEFwcCh0aGlzLmFkYiwgdGhpcy5vcHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0cy5za2lwVW5pbnN0YWxsKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi51bmluc3RhbGxBcGsodGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0cy5ub1NpZ24pIHtcbiAgICAgIGxldCBzaWduZWQgPSBhd2FpdCB0aGlzLmFkYi5jaGVja0Fwa0NlcnQodGhpcy5vcHRzLmFwcCwgdGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xuICAgICAgaWYgKCFzaWduZWQgJiYgdGhpcy5vcHRzLmFwcCkge1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5zaWduKHRoaXMub3B0cy5hcHAsIHRoaXMub3B0cy5hcHBQYWNrYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMub3B0cy5hcHApIHtcbiAgICAgIGF3YWl0IGhlbHBlcnMuaW5zdGFsbEFwayh0aGlzLmFkYiwgdGhpcy5vcHRzKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5lc3ByZXNzby5pbnN0YWxsVGVzdEFwaygpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdEZWxldGluZyBlc3ByZXNzbyBzZXNzaW9uJyk7XG4gICAgaWYgKHRoaXMuZXNwcmVzc28pIHtcbiAgICAgIGlmICh0aGlzLmp3cFByb3h5QWN0aXZlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXNwcmVzc28uZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5lc3ByZXNzbyA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcblxuICAgIC8vIFRPRE8gYmVsb3cgbG9naWMgaXMgZHVwbGljYXRlZCBmcm9tIHVpYXV0b21hdG9yMlxuICAgIGlmICh0aGlzLmFkYikge1xuICAgICAgaWYgKHRoaXMud2FzQW5pbWF0aW9uRW5hYmxlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldEFuaW1hdGlvblN0YXRlKHRydWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2dnZXIud2FybihgVW5hYmxlIHRvIHJlc2V0IGFuaW1hdGlvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0cy51bmljb2RlS2V5Ym9hcmQgJiYgdGhpcy5vcHRzLnJlc2V0S2V5Ym9hcmQgJiZcbiAgICAgICAgICB0aGlzLmRlZmF1bHRJTUUpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBSZXNldHRpbmcgSU1FIHRvICcke3RoaXMuZGVmYXVsdElNRX0nYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnNldElNRSh0aGlzLmRlZmF1bHRJTUUpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0cy5hcHBQYWNrYWdlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLmZvcmNlU3RvcCh0aGlzLm9wdHMuYXBwUGFja2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRzLmZ1bGxSZXNldCAmJiAhdGhpcy5vcHRzLnNraXBVbmluc3RhbGwgJiYgIXRoaXMuYXBwT25EZXZpY2UpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBGVUxMX1JFU0VUIHNldCB0byAndHJ1ZScsIFVuaW5zdGFsbGluZyAnJHt0aGlzLm9wdHMuYXBwUGFja2FnZX0nYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnVuaW5zdGFsbEFwayh0aGlzLm9wdHMuYXBwUGFja2FnZSk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLmFkYi5zdG9wTG9nY2F0KCk7XG4gICAgICBpZiAodGhpcy5vcHRzLnJlYm9vdCkge1xuICAgICAgICBsZXQgYXZkTmFtZSA9IHRoaXMub3B0cy5hdmQucmVwbGFjZSgnQCcsICcnKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBjbG9zaW5nIGVtdWxhdG9yICcke2F2ZE5hbWV9J2ApO1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5raWxsRW11bGF0b3IoYXZkTmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoYXdhaXQgdGhpcy5hZGIuZ2V0QXBpTGV2ZWwoKSA+PSAyOCkgeyAvLyBBbmRyb2lkIFBcbiAgICAgICAgbG9nZ2VyLmluZm8oJ1Jlc3RvcmluZyBoaWRkZW4gYXBpIHBvbGljeSB0byB0aGUgZGV2aWNlIGRlZmF1bHQgY29uZmlndXJhdGlvbicpO1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5zZXREZWZhdWx0SGlkZGVuQXBpUG9saWN5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHN1cGVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICBpZiAodGhpcy5vcHRzLnN5c3RlbVBvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5hZGIucmVtb3ZlUG9ydEZvcndhcmQodGhpcy5vcHRzLnN5c3RlbVBvcnQpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oYFVuYWJsZSB0byByZW1vdmUgcG9ydCBmb3J3YXJkICcke2Vycm9yLm1lc3NhZ2V9J2ApO1xuICAgICAgICAvL0lnbm9yZSwgdGhpcyBibG9jayB3aWxsIGFsc28gYmUgY2FsbGVkIHdoZW4gd2UgZmFsbCBpbiBjYXRjaCBibG9ja1xuICAgICAgICAvLyBhbmQgYmVmb3JlIGV2ZW4gcG9ydCBmb3J3YXJkLlxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gbWV0aG9kIGlzIGR1cGxpY2F0ZWQgZnJvbSB1aWF1dG9tYXRvcjJcbiAgYXN5bmMgY2hlY2tBcHBQcmVzZW50ICgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ0NoZWNraW5nIHdoZXRoZXIgYXBwIGlzIGFjdHVhbGx5IHByZXNlbnQnKTtcbiAgICBpZiAoIShhd2FpdCBmcy5leGlzdHModGhpcy5vcHRzLmFwcCkpKSB7XG4gICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IGZpbmQgYXBwIGFwayBhdCAnJHt0aGlzLm9wdHMuYXBwfSdgKTtcbiAgICB9XG4gIH1cblxuICBwcm94eUFjdGl2ZSAoc2Vzc2lvbklkKSB7XG4gICAgc3VwZXIucHJveHlBY3RpdmUoc2Vzc2lvbklkKTtcblxuICAgIC8vIHdlIGFsd2F5cyBoYXZlIGFuIGFjdGl2ZSBwcm94eSB0byB0aGUgZXNwcmVzc28gc2VydmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjYW5Qcm94eSAoc2Vzc2lvbklkKSB7XG4gICAgc3VwZXIuY2FuUHJveHkoc2Vzc2lvbklkKTtcblxuICAgIC8vIHdlIGNhbiBhbHdheXMgcHJveHkgdG8gdGhlIGVzcHJlc3NvIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0UHJveHlBdm9pZExpc3QgKHNlc3Npb25JZCkge1xuICAgIHN1cGVyLmdldFByb3h5QXZvaWRMaXN0KHNlc3Npb25JZCk7XG4gICAgdGhpcy5qd3BQcm94eUF2b2lkID0gTk9fUFJPWFk7XG4gICAgcmV0dXJuIHRoaXMuandwUHJveHlBdm9pZDtcbiAgfVxuXG4gIGdldCBpc0Nocm9tZVNlc3Npb24gKCkge1xuICAgIHJldHVybiBoZWxwZXJzLmlzQ2hyb21lQnJvd3Nlcih0aGlzLm9wdHMuYnJvd3Nlck5hbWUpO1xuICB9XG59XG5cbi8vIGZpcnN0IGFkZCB0aGUgYW5kcm9pZC1kcml2ZXIgY29tbWFuZHMgd2hpY2ggd2Ugd2lsbCBmYWxsIGJhY2sgdG9cbmZvciAobGV0IFtjbWQsIGZuXSBvZiBfLnRvUGFpcnMoYW5kcm9pZENvbW1hbmRzKSkge1xuICAvLyB3ZSBkbyBzb21lIGRpZmZlcmVudC9zcGVjaWFsIHRoaW5ncyB3aXRoIHRoZXNlIG1ldGhvZHNcbiAgaWYgKCFfLmluY2x1ZGVzKFsnZGVmYXVsdFdlYnZpZXdOYW1lJ10sIGNtZCkpIHtcbiAgICBFc3ByZXNzb0RyaXZlci5wcm90b3R5cGVbY21kXSA9IGZuO1xuICB9XG59XG5cbi8vIHRoZW4gb3ZlcndyaXRlIHdpdGggYW55IGVzcHJlc3NvLXNwZWNpZmljIGNvbW1hbmRzXG5mb3IgKGxldCBbY21kLCBmbl0gb2YgXy50b1BhaXJzKGNvbW1hbmRzKSkge1xuICBFc3ByZXNzb0RyaXZlci5wcm90b3R5cGVbY21kXSA9IGZuO1xufVxuXG5leHBvcnQgeyBFc3ByZXNzb0RyaXZlciB9O1xuZXhwb3J0IGRlZmF1bHQgRXNwcmVzc29Ecml2ZXI7XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
