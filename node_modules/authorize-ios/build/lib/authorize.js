"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authorize;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _appiumXcode = require("appium-xcode");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _glob2 = _interopRequireDefault(require("glob"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const glob = _bluebird.default.promisify(_glob2.default);

const log = _appiumSupport.logger.getLogger('AuthorizeIOS');

function authorize(_x) {
  return _authorize.apply(this, arguments);
}

function _authorize() {
  _authorize = (0, _asyncToGenerator2.default)(function* (insecure) {
    let xcodeDir;
    let user;

    try {
      log.info('Enabling DevToolsSecurity');
      yield (0, _teen_process.exec)('DevToolsSecurity', ['--enable']);
      log.info(`Updating security db for ` + `${insecure ? 'insecure' : 'developer'} access`);
      let cmd = 'security';
      let args = ['authorizationdb', 'write', 'system.privilege.taskport', insecure ? 'allow' : 'is-developer'];
      yield (0, _teen_process.exec)(cmd, args);
      log.info('Granting access to built-in simulator apps');

      if (!process.env.HOME) {
        throw new Error('Could not determine your $HOME');
      }

      user = /\/([^/]+)$/.exec(process.env.HOME)[1];
      xcodeDir = yield (0, _appiumXcode.getPath)();
      log.info(`The xcode directory is : ${xcodeDir}`);
    } catch (e) {
      log.errorAndThrow(e);
    }

    let olderXcodeSimulatorPath = _path.default.resolve(xcodeDir, 'Platforms/iPhoneSimulator.platform/' + 'Developer/SDKs/iPhoneSimulator*.sdk/Applications');

    let directories = yield glob(olderXcodeSimulatorPath);

    let newerXcodeSimulatorPath = _path.default.resolve('/Library/Developer/CoreSimulator/' + 'Profiles/Runtimes/iOS *.simruntime/' + 'Contents/Resources/RuntimeRoot/Applications/');

    directories = directories.concat((yield glob(newerXcodeSimulatorPath)));
    directories = directories.filter(function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (dir) {
        return yield _appiumSupport.fs.exists(dir);
      });

      return function (_x2) {
        return _ref.apply(this, arguments);
      };
    }());
    let args = ['-R', `${user}:`, ...directories];
    log.info(`Changing ownership to '${user}' on directories: ${directories.join(', ')}`);

    try {
      yield (0, _teen_process.exec)('chown', args);
    } catch (err) {
      log.error(`Encountered an issue changing user priveledges ` + `for iOS sim app dirs: ${directories}`);
      log.error(`Error was: ${err.message}`);
    }
  });
  return _authorize.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hdXRob3JpemUuanMiXSwibmFtZXMiOlsiZ2xvYiIsIkIiLCJwcm9taXNpZnkiLCJfZ2xvYiIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImF1dGhvcml6ZSIsImluc2VjdXJlIiwieGNvZGVEaXIiLCJ1c2VyIiwiaW5mbyIsImNtZCIsImFyZ3MiLCJwcm9jZXNzIiwiZW52IiwiSE9NRSIsIkVycm9yIiwiZXhlYyIsImUiLCJlcnJvckFuZFRocm93Iiwib2xkZXJYY29kZVNpbXVsYXRvclBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImRpcmVjdG9yaWVzIiwibmV3ZXJYY29kZVNpbXVsYXRvclBhdGgiLCJjb25jYXQiLCJmaWx0ZXIiLCJkaXIiLCJmcyIsImV4aXN0cyIsImpvaW4iLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsSUFBSSxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxjQUFaLENBQWI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixjQUFqQixDQUFaOztTQUU4QkMsUzs7Ozs7K0NBQWYsV0FBMEJDLFFBQTFCLEVBQW9DO0FBQ2pELFFBQUlDLFFBQUo7QUFDQSxRQUFJQyxJQUFKOztBQUVBLFFBQUk7QUFFRk4sTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVMsMkJBQVQ7QUFDQSxZQUFNLHdCQUFLLGtCQUFMLEVBQXlCLENBQUMsVUFBRCxDQUF6QixDQUFOO0FBRUFQLE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFVLDJCQUFELEdBQ0ksR0FBRUgsUUFBUSxHQUFHLFVBQUgsR0FBZ0IsV0FBWSxTQURuRDtBQUVBLFVBQUlJLEdBQUcsR0FBRyxVQUFWO0FBQ0EsVUFBSUMsSUFBSSxHQUFHLENBQ1QsaUJBRFMsRUFDVSxPQURWLEVBQ21CLDJCQURuQixFQUVSTCxRQUFRLEdBQUcsT0FBSCxHQUFhLGNBRmIsQ0FBWDtBQUlBLFlBQU0sd0JBQUtJLEdBQUwsRUFBVUMsSUFBVixDQUFOO0FBRUFULE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTLDRDQUFUOztBQUNBLFVBQUksQ0FBQ0csT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQWpCLEVBQXVCO0FBQ3JCLGNBQU0sSUFBSUMsS0FBSixDQUFVLGdDQUFWLENBQU47QUFDRDs7QUFFRFAsTUFBQUEsSUFBSSxHQUFHLGFBQWFRLElBQWIsQ0FBa0JKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUE5QixFQUFvQyxDQUFwQyxDQUFQO0FBQ0FQLE1BQUFBLFFBQVEsU0FBUywyQkFBakI7QUFDQUwsTUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVUsNEJBQTJCRixRQUFTLEVBQTlDO0FBQ0QsS0F0QkQsQ0FzQkUsT0FBT1UsQ0FBUCxFQUFVO0FBQ1ZmLE1BQUFBLEdBQUcsQ0FBQ2dCLGFBQUosQ0FBa0JELENBQWxCO0FBQ0Q7O0FBR0QsUUFBSUUsdUJBQXVCLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYWQsUUFBYixFQUNGLHdDQUNBLGtEQUZFLENBQTlCOztBQUdBLFFBQUllLFdBQVcsU0FBU3hCLElBQUksQ0FBQ3FCLHVCQUFELENBQTVCOztBQUVBLFFBQUlJLHVCQUF1QixHQUFHSCxjQUFLQyxPQUFMLENBQWEsc0NBQ2YscUNBRGUsR0FFZiw4Q0FGRSxDQUE5Qjs7QUFHQUMsSUFBQUEsV0FBVyxHQUFHQSxXQUFXLENBQUNFLE1BQVosUUFBeUIxQixJQUFJLENBQUN5Qix1QkFBRCxDQUE3QixFQUFkO0FBRUFELElBQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRyxNQUFaO0FBQUEsaURBQW1CLFdBQU9DLEdBQVAsRUFBZTtBQUM5QyxxQkFBYUMsa0JBQUdDLE1BQUgsQ0FBVUYsR0FBVixDQUFiO0FBQ0QsT0FGYTs7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUFkO0FBSUEsUUFBSWYsSUFBSSxHQUFHLENBQUMsSUFBRCxFQUFRLEdBQUVILElBQUssR0FBZixFQUFtQixHQUFHYyxXQUF0QixDQUFYO0FBRUFwQixJQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBVSwwQkFBeUJELElBQUsscUJBQW9CYyxXQUFXLENBQUNPLElBQVosQ0FBaUIsSUFBakIsQ0FBdUIsRUFBbkY7O0FBQ0EsUUFBSTtBQUNGLFlBQU0sd0JBQUssT0FBTCxFQUFjbEIsSUFBZCxDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9tQixHQUFQLEVBQVk7QUFDWjVCLE1BQUFBLEdBQUcsQ0FBQzZCLEtBQUosQ0FBVyxpREFBRCxHQUNJLHlCQUF3QlQsV0FBWSxFQURsRDtBQUVBcEIsTUFBQUEsR0FBRyxDQUFDNkIsS0FBSixDQUFXLGNBQWFELEdBQUcsQ0FBQ0UsT0FBUSxFQUFwQztBQUNEO0FBQ0YsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgeyBmcywgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgX2dsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxuY29uc3QgZ2xvYiA9IEIucHJvbWlzaWZ5KF9nbG9iKTtcbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0F1dGhvcml6ZUlPUycpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBhdXRob3JpemUgKGluc2VjdXJlKSB7XG4gIGxldCB4Y29kZURpcjtcbiAgbGV0IHVzZXI7XG5cbiAgdHJ5IHtcbiAgICAvLyBlbmFibGUgZGV2ZWxvcGVyIHRvb2xzXG4gICAgbG9nLmluZm8oJ0VuYWJsaW5nIERldlRvb2xzU2VjdXJpdHknKTtcbiAgICBhd2FpdCBleGVjKCdEZXZUb29sc1NlY3VyaXR5JywgWyctLWVuYWJsZSddKTtcbiAgICAvLyB1cGRhdGUgc2VjdXJpdHkgZGIgLS0gcmVtb3ZlcyBhdXRob3JpemF0aW9uIHByb21wdFxuICAgIGxvZy5pbmZvKGBVcGRhdGluZyBzZWN1cml0eSBkYiBmb3IgYCArXG4gICAgICAgICAgICAgICAgYCR7aW5zZWN1cmUgPyAnaW5zZWN1cmUnIDogJ2RldmVsb3Blcid9IGFjY2Vzc2ApO1xuICAgIGxldCBjbWQgPSAnc2VjdXJpdHknO1xuICAgIGxldCBhcmdzID0gW1xuICAgICAgJ2F1dGhvcml6YXRpb25kYicsICd3cml0ZScsICdzeXN0ZW0ucHJpdmlsZWdlLnRhc2twb3J0JyxcbiAgICAgIChpbnNlY3VyZSA/ICdhbGxvdycgOiAnaXMtZGV2ZWxvcGVyJyksXG4gICAgXTtcbiAgICBhd2FpdCBleGVjKGNtZCwgYXJncyk7XG5cbiAgICBsb2cuaW5mbygnR3JhbnRpbmcgYWNjZXNzIHRvIGJ1aWx0LWluIHNpbXVsYXRvciBhcHBzJyk7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5IT01FKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXRlcm1pbmUgeW91ciAkSE9NRScpO1xuICAgIH1cblxuICAgIHVzZXIgPSAvXFwvKFteL10rKSQvLmV4ZWMocHJvY2Vzcy5lbnYuSE9NRSlbMV07XG4gICAgeGNvZGVEaXIgPSBhd2FpdCBnZXRQYXRoKCk7XG4gICAgbG9nLmluZm8oYFRoZSB4Y29kZSBkaXJlY3RvcnkgaXMgOiAke3hjb2RlRGlyfWApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coZSk7XG4gIH1cblxuICAvLyBjaGFuZ2UgcGVybWlzc2lvblxuICBsZXQgb2xkZXJYY29kZVNpbXVsYXRvclBhdGggPSBwYXRoLnJlc29sdmUoeGNvZGVEaXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxhdGZvcm1zL2lQaG9uZVNpbXVsYXRvci5wbGF0Zm9ybS8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEZXZlbG9wZXIvU0RLcy9pUGhvbmVTaW11bGF0b3IqLnNkay9BcHBsaWNhdGlvbnMnKTtcbiAgbGV0IGRpcmVjdG9yaWVzID0gYXdhaXQgZ2xvYihvbGRlclhjb2RlU2ltdWxhdG9yUGF0aCk7XG5cbiAgbGV0IG5ld2VyWGNvZGVTaW11bGF0b3JQYXRoID0gcGF0aC5yZXNvbHZlKCcvTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdQcm9maWxlcy9SdW50aW1lcy9pT1MgKi5zaW1ydW50aW1lLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnRzL1Jlc291cmNlcy9SdW50aW1lUm9vdC9BcHBsaWNhdGlvbnMvJyk7XG4gIGRpcmVjdG9yaWVzID0gZGlyZWN0b3JpZXMuY29uY2F0KGF3YWl0IGdsb2IobmV3ZXJYY29kZVNpbXVsYXRvclBhdGgpKTtcblxuICBkaXJlY3RvcmllcyA9IGRpcmVjdG9yaWVzLmZpbHRlcihhc3luYyAoZGlyKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhkaXIpO1xuICB9KTtcblxuICBsZXQgYXJncyA9IFsnLVInLCBgJHt1c2VyfTpgLCAuLi5kaXJlY3Rvcmllc107XG5cbiAgbG9nLmluZm8oYENoYW5naW5nIG93bmVyc2hpcCB0byAnJHt1c2VyfScgb24gZGlyZWN0b3JpZXM6ICR7ZGlyZWN0b3JpZXMuam9pbignLCAnKX1gKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKCdjaG93bicsIGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYEVuY291bnRlcmVkIGFuIGlzc3VlIGNoYW5naW5nIHVzZXIgcHJpdmVsZWRnZXMgYCArXG4gICAgICAgICAgICAgICAgIGBmb3IgaU9TIHNpbSBhcHAgZGlyczogJHtkaXJlY3Rvcmllc31gKTtcbiAgICBsb2cuZXJyb3IoYEVycm9yIHdhczogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvYXV0aG9yaXplLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
