"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YouiEngineDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumAndroidDriver = _interopRequireDefault(require("appium-android-driver"));

var _appiumIosDriver = _interopRequireDefault(require("appium-ios-driver"));

var _appiumXcuitestDriver = _interopRequireDefault(require("appium-xcuitest-driver"));

var _appiumMacDriver = _interopRequireDefault(require("appium-mac-driver"));

const TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'launchApp', 'lock', 'removeApp', 'setOrientation'];
const TO_PROXY_IOS_ONLY = ['mobileShake'];
const TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];
const TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_MAC = TO_PROXY_COMMON;
const MAX_RETRY_COUNT = 10;
const RETRY_BACKOFF = 3000;

class YouiEngineDriver extends _appiumBaseDriver.BaseDriver {
  resetYouiEngine() {
    this.ready = false;
    this.socket = null;
    this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
    this.proxydriver = null;
    this.proxyAllowList = '';
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.settings = new _appiumBaseDriver.DeviceSettings({
      'TimeDilation': 1,
      'SourceTreeFilter': ''
    }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, false);
  }

  createSession(caps) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        let _ref = yield _superprop_callCreateSession(caps),
            _ref2 = (0, _slicedToArray2.default)(_ref, 1),
            sessionId = _ref2[0];

        if (caps.platformName !== null) {
          let appPlatform = caps.platformName.toLowerCase();

          if (appPlatform === "ios") {
            yield _this.startIOSSession(caps);
          } else if (appPlatform === "android") {
            yield _this.startAndroidSession(caps);
          } else if (appPlatform === "mac") {
            yield _this.startMacSession(caps);
          } else if (appPlatform === "yimac") {
            _this.startYIMacSession(caps);
          } else if (appPlatform === "yiroku") {
            _this.startYIRokuSession(caps);
          } else if (appPlatform === "yitvos") {
            _this.startYITVOSSession(caps);
          }
        }

        yield _this.connectSocket();
        return [sessionId, _this.opts];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  onSettingsUpdate(key, value) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (key === "TimeDilation") {
        yield _this2.setTimeDilation(value);
      } else if (key === "SourceTreeFilter") {
        yield _this2.setSourceTreeFilter(value);
      }
    })();
  }

  stop() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.ready = false;
    })();
  }

  deleteSession() {
    var _this4 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Deleting YouiEngine session");

      if (_this4.caps.platformName !== null) {
        let appPlatform = _this4.caps.platformName.toLowerCase();

        if (appPlatform === "yimac") {
          _this4.endYIMacSession(_this4.caps);
        } else if (appPlatform === "yitvos") {
          _this4.endYITVOSSession(_this4.caps);
        }
      }

      if (_this4.proxydriver !== null) {
        yield _this4.proxydriver.deleteSession();
      }

      yield _superprop_callDeleteSession();
      yield _this4.stop();
    })();
  }

  driverShouldDoProxyCmd(command) {
    if (!this.proxydriver) {
      return false;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.proxyAllowList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let allowedCommand = _step.value;

        if (allowedCommand === command) {
          return true;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  }

  executeCommand(cmd, ...args) {
    var _this5 = this,
        _superprop_callExecuteCommand = (..._args3) => super.executeCommand(..._args3);

    return (0, _asyncToGenerator2.default)(function* () {
      if (cmd === 'receiveAsyncResponse') {
        _logger.default.debug(`Executing YouiEngineDriver response '${cmd}'`);

        return yield _this5.receiveAsyncResponse(...args);
      } else if (_this5.ready) {
        if (_this5.driverShouldDoProxyCmd(cmd)) {
          _logger.default.debug(`Executing proxied WebDriver command '${cmd}'`);

          _this5.clearNewCommandTimeout();

          let result = _this5.proxydriver.executeCommand(cmd, ...args);

          _this5.startNewCommandTimeout(cmd);

          return result;
        } else {
          _logger.default.debug(`Executing YouiEngine WebDriver command '${cmd}'`);

          return _superprop_callExecuteCommand(cmd, ...args);
        }
      } else {
        _logger.default.debug(`Command Error '${cmd}'`);

        throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
      }
    })();
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    if (caps.platformName.toLowerCase() !== 'noproxy') {
      if (!caps.youiEngineAppAddress) {
        let msg = 'The desired capabilities must include youiEngineAppAddress';

        _logger.default.errorAndThrow(msg);
      }

      if (!caps.app) {
        let msg = 'The desired capabilities must include app';

        _logger.default.errorAndThrow(msg);
      }

      if (caps.deviceName.toLowerCase() === 'android') {
        if (!caps.avd) {
          let msg = 'The desired capabilities must include avd';

          _logger.default.errorAndThrow(msg);
        }
      }
    }

    return true;
  }

  setupNewIOSDriver(caps) {
    return (0, _asyncToGenerator2.default)(function* () {
      let iosArgs = {
        javascriptEnabled: true
      };
      let iosdriver = new _appiumIosDriver.default(iosArgs);

      if (caps.platformVersion) {
        let majorVer = caps.platformVersion.toString().split(".")[0];

        if (parseInt(majorVer, 10) >= 10) {
          iosdriver = new _appiumXcuitestDriver.default(iosArgs);
        }
      }

      let capsCopy = _lodash.default.cloneDeep(caps);

      capsCopy.newCommandTimeout = 0;
      yield iosdriver.createSession(capsCopy);
      return iosdriver;
    })();
  }

  startIOSSession(caps) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info("Starting an IOS proxy session");

      _this6.proxyAllowList = TO_PROXY_IOS;
      _this6.proxydriver = yield _this6.setupNewIOSDriver(caps);
    })();
  }

  setupNewAndroidDriver(caps) {
    return (0, _asyncToGenerator2.default)(function* () {
      let androidArgs = {
        javascriptEnabled: true
      };
      let androiddriver = new _appiumAndroidDriver.default(androidArgs);

      let capsCopy = _lodash.default.cloneDeep(caps);

      capsCopy.newCommandTimeout = 0;
      yield androiddriver.createSession(capsCopy);
      return androiddriver;
    })();
  }

  startAndroidSession(caps) {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info("Starting an Android proxy session");

      _this7.proxyAllowList = TO_PROXY_ANDROID;
      _this7.proxydriver = yield _this7.setupNewAndroidDriver(caps);
    })();
  }

  setupNewMacDriver(caps) {
    return (0, _asyncToGenerator2.default)(function* () {
      let macArgs = {
        javascriptEnabled: true
      };
      let macdriver = new _appiumMacDriver.default(macArgs);

      let capsCopy = _lodash.default.cloneDeep(caps);

      capsCopy.newCommandTimeout = 0;
      yield macdriver.createSession(capsCopy);
      return macdriver;
    })();
  }

  startMacSession(caps) {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info("Starting a Mac proxy session");

      _this8.proxyAllowList = TO_PROXY_MAC;
      _this8.proxydriver = yield _this8.setupNewMacDriver(caps);
    })();
  }

  startYIMacSession(caps) {
    _logger.default.info("Killing app if run");

    let shell = require('shelljs');

    let process_name = caps.app.substring(caps.app.lastIndexOf("/") + 1);
    shell.exec("killall " + process_name);

    _logger.default.info("Launching macOS app");

    this.validateAppLocation(caps.app);

    let spawn = require('child_process').spawn,
        ls = spawn(caps.app);

    ls.stdout.on('data', function (data) {
      if (data != null && caps.showXcodeLog === true) {
        _logger.default.debug('Xcode Log Output: ' + data.toString());
      }
    });
    ls.stderr.on('data', function (data) {
      if (data != null && caps.showXcodeLog === true) {
        _logger.default.debug('Xcode Log Error: ' + data.toString());
      }
    });
    ls.on('exit', function (code) {
      if (code != null && caps.showXcodeLog === true) {
        _logger.default.debug('Application exited with code ' + code.toString());
      }
    });
  }

  endYIMacSession(caps) {
    _logger.default.info("Deleting app");

    let shell = require('shelljs');

    let process_name = caps.app.substring(caps.app.lastIndexOf("/") + 1);
    shell.exec("killall " + process_name);
  }

  startYIRokuSession(caps) {
    _logger.default.info("Launching Roku app");

    this.validateAppLocation(caps.app);

    let shell = require('shelljs');

    let roku_install_script = "curl -v -# -f -i --user '" + caps.username + ":" + caps.password + "' --digest --progress-bar -F 'mysubmit=Install' -F 'archive=@" + caps.app + "' -F 'passwd=' http://" + caps.youiEngineAppAddress + "/plugin_install | grep '<font color' | sed 's/<font color=\'red\'>//' ";
    shell.exec(roku_install_script);
  }

  startYITVOSSession(caps) {
    _logger.default.info("Launching tvOS app");

    this.validateAppLocation(caps.app);

    let shell = require('shelljs');

    if (caps.udid) {
      shell.exec("ios-deploy --id " + caps.udid + " --uninstall --justlaunch --bundle " + caps.app);
    } else {
      shell.exec("ios-deploy --uninstall --justlaunch --bundle " + caps.app);
    }
  }

  endYITVOSSession(caps) {
    _logger.default.info("Deleting app");

    let shell = require('shelljs');

    let bundleid = shell.exec(`osascript -e 'id of app "${caps.app}"'`);

    if (caps.udid) {
      shell.exec("ios-deploy --id " + caps.udid + " --uninstall_only --bundle_id " + bundleid);
    } else {
      shell.exec("ios-deploy --uninstall_only --bundle_id " + bundleid);
    }
  }

  validateAppLocation(app) {
    const fs = require('fs');

    const path = require('path');

    if (!fs.existsSync(app)) {
      let absolutepath = path.resolve(app);
      let msg = 'The app could not be found in following location: ' + absolutepath;

      _logger.default.errorAndThrow(msg);
    }
  }

  connectSocket() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let retryCount = 0;
      let connected = false;

      while (retryCount < MAX_RETRY_COUNT && !connected) {
        if (retryCount > 0) {
          _logger.default.info("Waiting " + RETRY_BACKOFF / 1000 + " seconds before trying...");

          yield (0, _asyncbox.sleep)(RETRY_BACKOFF);
        }

        _logger.default.info("Attempt #" + (retryCount + 1));

        let connectedPromise = new _bluebird.default(resolve => {
          let net = require('net');

          let HOST = _this9.opts.youiEngineAppAddress;
          let PORT = 12345;

          _logger.default.info('Connecting to WebDriver: ' + HOST + ':' + PORT);

          _this9.socket = new net.Socket();

          _this9.socket.on('error', function (ex) {
            _logger.default.error(ex);

            _logger.default.error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');

            resolve(false);
          });

          _this9.socket.on('close', function () {
            _logger.default.info('Connection closed');
          });

          _this9.socket.on('timeout', function () {
            _logger.default.error('Connection timed out');

            resolve(false);
          });

          _this9.socket.connect(PORT, HOST, function () {
            _logger.default.info('Connected');

            resolve(true);
          });
        });
        retryCount++;
        connected = yield connectedPromise;

        if (!connected && retryCount === MAX_RETRY_COUNT - 1) {
          _logger.default.errorAndThrow("Failed to connect " + MAX_RETRY_COUNT + " times. Aborting.");
        }
      }

      retryCount = 0;
      _this9.ready = connected;
    })();
  }

  executeSocketCommand(cmd) {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this10.socket.writable) {
        _logger.default.info("Socket is not writable. Trying to reconnect.");

        yield _this10.connectSocket();
      }

      let cmdPromise = new _bluebird.default(resolve => {
        _logger.default.debug('COMMAND: ' + cmd);

        let totaldata = [];
        let endMarker = new Buffer("youiend");
        let socketClient = _this10.socket;

        let dataHandler = function dataHandler(data) {
          if (data.length >= endMarker.length) {
            let dataend = new Buffer(endMarker.length);
            let startIndex = data.length - endMarker.length;
            data.copy(dataend, 0, startIndex, startIndex + endMarker.length);

            if (dataend.equals(endMarker)) {
              let lastData = data.slice(0, startIndex);
              totaldata.push(lastData);
              socketClient.removeListener('data', dataHandler);
              resolve(Buffer.concat(totaldata));
            } else {
              totaldata.push(data);
            }
          }
        };

        socketClient.write(cmd + "\n", "UTF8", () => {
          socketClient.on('data', dataHandler);
        });
      });
      return yield cmdPromise;
    })();
  }

}

exports.YouiEngineDriver = YouiEngineDriver;
var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
        cmd = _step2$value[0],
        fn = _step2$value[1];

    YouiEngineDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiVE9fUFJPWFlfQ09NTU9OIiwiVE9fUFJPWFlfSU9TX09OTFkiLCJUT19QUk9YWV9BTkRST0lEX09OTFkiLCJUT19QUk9YWV9JT1MiLCJjb25jYXQiLCJUT19QUk9YWV9BTkRST0lEIiwiVE9fUFJPWFlfTUFDIiwiTUFYX1JFVFJZX0NPVU5UIiwiUkVUUllfQkFDS09GRiIsIllvdWlFbmdpbmVEcml2ZXIiLCJCYXNlRHJpdmVyIiwicmVzZXRZb3VpRW5naW5lIiwicmVhZHkiLCJzb2NrZXQiLCJsb2NhdG9yU3RyYXRlZ2llcyIsInByb3h5ZHJpdmVyIiwicHJveHlBbGxvd0xpc3QiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJzZXR0aW5ncyIsIkRldmljZVNldHRpbmdzIiwib25TZXR0aW5nc1VwZGF0ZSIsImJpbmQiLCJ2YWxpZGF0ZUxvY2F0b3JTdHJhdGVneSIsInN0cmF0ZWd5IiwiY3JlYXRlU2Vzc2lvbiIsImNhcHMiLCJzZXNzaW9uSWQiLCJwbGF0Zm9ybU5hbWUiLCJhcHBQbGF0Zm9ybSIsInRvTG93ZXJDYXNlIiwic3RhcnRJT1NTZXNzaW9uIiwic3RhcnRBbmRyb2lkU2Vzc2lvbiIsInN0YXJ0TWFjU2Vzc2lvbiIsInN0YXJ0WUlNYWNTZXNzaW9uIiwic3RhcnRZSVJva3VTZXNzaW9uIiwic3RhcnRZSVRWT1NTZXNzaW9uIiwiY29ubmVjdFNvY2tldCIsImUiLCJkZWxldGVTZXNzaW9uIiwia2V5IiwidmFsdWUiLCJzZXRUaW1lRGlsYXRpb24iLCJzZXRTb3VyY2VUcmVlRmlsdGVyIiwic3RvcCIsImxvZ2dlciIsImRlYnVnIiwiZW5kWUlNYWNTZXNzaW9uIiwiZW5kWUlUVk9TU2Vzc2lvbiIsImRyaXZlclNob3VsZERvUHJveHlDbWQiLCJjb21tYW5kIiwiYWxsb3dlZENvbW1hbmQiLCJleGVjdXRlQ29tbWFuZCIsImNtZCIsImFyZ3MiLCJyZWNlaXZlQXN5bmNSZXNwb25zZSIsImNsZWFyTmV3Q29tbWFuZFRpbWVvdXQiLCJyZXN1bHQiLCJzdGFydE5ld0NvbW1hbmRUaW1lb3V0IiwiZXJyb3JzIiwiTm9TdWNoRHJpdmVyRXJyb3IiLCJ2YWxpZGF0ZURlc2lyZWRDYXBzIiwicmVzIiwieW91aUVuZ2luZUFwcEFkZHJlc3MiLCJtc2ciLCJlcnJvckFuZFRocm93IiwiYXBwIiwiZGV2aWNlTmFtZSIsImF2ZCIsInNldHVwTmV3SU9TRHJpdmVyIiwiaW9zQXJncyIsImphdmFzY3JpcHRFbmFibGVkIiwiaW9zZHJpdmVyIiwiSU9TRHJpdmVyIiwicGxhdGZvcm1WZXJzaW9uIiwibWFqb3JWZXIiLCJ0b1N0cmluZyIsInNwbGl0IiwicGFyc2VJbnQiLCJYQ1VJVGVzdERyaXZlciIsImNhcHNDb3B5IiwiXyIsImNsb25lRGVlcCIsIm5ld0NvbW1hbmRUaW1lb3V0IiwiaW5mbyIsInNldHVwTmV3QW5kcm9pZERyaXZlciIsImFuZHJvaWRBcmdzIiwiYW5kcm9pZGRyaXZlciIsIkFuZHJvaWREcml2ZXIiLCJzZXR1cE5ld01hY0RyaXZlciIsIm1hY0FyZ3MiLCJtYWNkcml2ZXIiLCJNYWNEcml2ZXIiLCJzaGVsbCIsInJlcXVpcmUiLCJwcm9jZXNzX25hbWUiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImV4ZWMiLCJ2YWxpZGF0ZUFwcExvY2F0aW9uIiwic3Bhd24iLCJscyIsInN0ZG91dCIsIm9uIiwiZGF0YSIsInNob3dYY29kZUxvZyIsInN0ZGVyciIsImNvZGUiLCJyb2t1X2luc3RhbGxfc2NyaXB0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVkaWQiLCJidW5kbGVpZCIsImZzIiwicGF0aCIsImV4aXN0c1N5bmMiLCJhYnNvbHV0ZXBhdGgiLCJyZXNvbHZlIiwicmV0cnlDb3VudCIsImNvbm5lY3RlZCIsImNvbm5lY3RlZFByb21pc2UiLCJCIiwibmV0IiwiSE9TVCIsIlBPUlQiLCJTb2NrZXQiLCJleCIsImVycm9yIiwiY29ubmVjdCIsImV4ZWN1dGVTb2NrZXRDb21tYW5kIiwid3JpdGFibGUiLCJjbWRQcm9taXNlIiwidG90YWxkYXRhIiwiZW5kTWFya2VyIiwiQnVmZmVyIiwic29ja2V0Q2xpZW50IiwiZGF0YUhhbmRsZXIiLCJsZW5ndGgiLCJkYXRhZW5kIiwic3RhcnRJbmRleCIsImNvcHkiLCJlcXVhbHMiLCJsYXN0RGF0YSIsInNsaWNlIiwicHVzaCIsInJlbW92ZUxpc3RlbmVyIiwid3JpdGUiLCJ0b1BhaXJzIiwiY29tbWFuZHMiLCJmbiIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQU9BLE1BQU1BLGVBQWUsR0FBRyxDQUN0QixZQURzQixFQUV0QixVQUZzQixFQUd0QixRQUhzQixFQUl0QixhQUpzQixFQUt0QixnQkFMc0IsRUFNdEIsWUFOc0IsRUFPdEIsV0FQc0IsRUFRdEIsTUFSc0IsRUFTdEIsV0FUc0IsRUFVdEIsZ0JBVnNCLENBQXhCO0FBYUEsTUFBTUMsaUJBQWlCLEdBQUcsQ0FDeEIsYUFEd0IsQ0FBMUI7QUFJQSxNQUFNQyxxQkFBcUIsR0FBRyxDQUM1QixzQkFENEIsRUFFNUIsZ0JBRjRCLEVBRzVCLFVBSDRCLEVBSTVCLGtCQUo0QixFQUs1QixjQUw0QixFQU01QixzQkFONEIsRUFPNUIsd0JBUDRCLEVBUTVCLFFBUjRCLENBQTlCO0FBV0EsTUFBTUMsWUFBWSxHQUFHRixpQkFBaUIsQ0FBQ0csTUFBbEIsQ0FBeUJKLGVBQXpCLENBQXJCO0FBQ0EsTUFBTUssZ0JBQWdCLEdBQUdILHFCQUFxQixDQUFDRSxNQUF0QixDQUE2QkosZUFBN0IsQ0FBekI7QUFDQSxNQUFNTSxZQUFZLEdBQUdOLGVBQXJCO0FBRUEsTUFBTU8sZUFBZSxHQUFHLEVBQXhCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLElBQXRCOztBQUVBLE1BQU1DLGdCQUFOLFNBQStCQyw0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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRHJpdmVyLCBEZXZpY2VTZXR0aW5ncywgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBkZXNpcmVkQ2FwQ29uc3RyYWludHMgZnJvbSAnLi9kZXNpcmVkLWNhcHMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgY29tbWFuZHMgZnJvbSAnLi9jb21tYW5kcy9pbmRleCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdhc3luY2JveCc7XG5cbi8vIGZvciBwcm94aWVzXG5pbXBvcnQgQW5kcm9pZERyaXZlciBmcm9tICdhcHBpdW0tYW5kcm9pZC1kcml2ZXInO1xuaW1wb3J0IElPU0RyaXZlciBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgWENVSVRlc3REcml2ZXIgZnJvbSAnYXBwaXVtLXhjdWl0ZXN0LWRyaXZlcic7XG5pbXBvcnQgTWFjRHJpdmVyIGZyb20gJ2FwcGl1bS1tYWMtZHJpdmVyJztcblxuXG5cbi8vIEFkZCBjb21tYW5kcyBmcm9tIHRoZSBmb2xsb3dpbmcgbG9jYXRpb24gdGhhdCBzaG91bGQgYmUgbWFwcGVkIHRvIGV4aXN0aW5nIGRyaXZlcnM6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS1iYXNlLWRyaXZlci9ibG9iL21hc3Rlci9saWIvbWpzb253cC9yb3V0ZXMuanNcblxuY29uc3QgVE9fUFJPWFlfQ09NTU9OID0gW1xuICAnYmFja2dyb3VuZCcsXG4gICdjbG9zZUFwcCcsXG4gICdnZXRMb2cnLFxuICAnZ2V0TG9nVHlwZXMnLFxuICAnZ2V0T3JpZW50YXRpb24nLFxuICAnZ2V0U3RyaW5ncycsXG4gICdsYXVuY2hBcHAnLFxuICAnbG9jaycsXG4gICdyZW1vdmVBcHAnLFxuICAnc2V0T3JpZW50YXRpb24nLFxuXTtcblxuY29uc3QgVE9fUFJPWFlfSU9TX09OTFkgPSBbXG4gICdtb2JpbGVTaGFrZScsXG5dO1xuXG5jb25zdCBUT19QUk9YWV9BTkRST0lEX09OTFkgPSBbXG4gICdnZXROZXR3b3JrQ29ubmVjdGlvbicsXG4gICdpc0FwcEluc3RhbGxlZCcsXG4gICdpc0xvY2tlZCcsXG4gICdsb25nUHJlc3NLZXlDb2RlJyxcbiAgJ3ByZXNzS2V5Q29kZScsXG4gICdzZXROZXR3b3JrQ29ubmVjdGlvbicsXG4gICd0b2dnbGVMb2NhdGlvblNlcnZpY2VzJyxcbiAgJ3VubG9jaycsXG5dO1xuXG5jb25zdCBUT19QUk9YWV9JT1MgPSBUT19QUk9YWV9JT1NfT05MWS5jb25jYXQoVE9fUFJPWFlfQ09NTU9OKTtcbmNvbnN0IFRPX1BST1hZX0FORFJPSUQgPSBUT19QUk9YWV9BTkRST0lEX09OTFkuY29uY2F0KFRPX1BST1hZX0NPTU1PTik7XG5jb25zdCBUT19QUk9YWV9NQUMgPSBUT19QUk9YWV9DT01NT047XG5cbmNvbnN0IE1BWF9SRVRSWV9DT1VOVCA9IDEwO1xuY29uc3QgUkVUUllfQkFDS09GRiA9IDMwMDA7XG5cbmNsYXNzIFlvdWlFbmdpbmVEcml2ZXIgZXh0ZW5kcyBCYXNlRHJpdmVyIHtcbiAgcmVzZXRZb3VpRW5naW5lICgpIHtcblxuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgdGhpcy5sb2NhdG9yU3RyYXRlZ2llcyA9IFsnaWQnLCAnbmFtZScsICdjbGFzcyBuYW1lJywgJ2FjY2Vzc2liaWxpdHkgaWQnXTtcbiAgICB0aGlzLnByb3h5ZHJpdmVyID0gbnVsbDtcbiAgICB0aGlzLnByb3h5QWxsb3dMaXN0ID0gJyc7XG4gIH1cblxuICBjb25zdHJ1Y3RvciAob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKSB7XG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcblxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcENvbnN0cmFpbnRzO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgRGV2aWNlU2V0dGluZ3MoeydUaW1lRGlsYXRpb24nOiAxLCAnU291cmNlVHJlZUZpbHRlcic6ICcnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNldHRpbmdzVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucmVzZXRZb3VpRW5naW5lKCk7XG5cbiAgfVxuXG4gIHZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IChzdHJhdGVneSkge1xuICAgIHN1cGVyLnZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5KHN0cmF0ZWd5LCBmYWxzZSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uIChjYXBzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG5cbiAgICAgIC8vIHNldHVwIHByb3hpZXMgLSBpZiBwbGF0Zm9ybU5hbWUgaXMgbm90IGVtcHR5LCBtYWtlIGl0IGxlc3MgY2FzZSBzZW5zaXRpdmVcbiAgICAgIGlmIChjYXBzLnBsYXRmb3JtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgYXBwUGxhdGZvcm0gPSBjYXBzLnBsYXRmb3JtTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoYXBwUGxhdGZvcm0gPT09IFwiaW9zXCIpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0SU9TU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcHBQbGF0Zm9ybSA9PT0gXCJhbmRyb2lkXCIpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0QW5kcm9pZFNlc3Npb24oY2Fwcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBwUGxhdGZvcm0gPT09IFwibWFjXCIpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0TWFjU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcHBQbGF0Zm9ybSA9PT0gXCJ5aW1hY1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGFydFlJTWFjU2Vzc2lvbihjYXBzKTtcbiAgICAgICAgfSBlbHNlIGlmIChhcHBQbGF0Zm9ybSA9PT0gXCJ5aXJva3VcIikge1xuICAgICAgICAgIHRoaXMuc3RhcnRZSVJva3VTZXNzaW9uKGNhcHMpO1xuICAgICAgICB9IGVsc2UgaWYgKGFwcFBsYXRmb3JtID09PSBcInlpdHZvc1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGFydFlJVFZPU1Nlc3Npb24oY2Fwcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0U29ja2V0KCk7XG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgdGhpcy5vcHRzXTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBvblNldHRpbmdzVXBkYXRlIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gXCJUaW1lRGlsYXRpb25cIikge1xuICAgICAgYXdhaXQgdGhpcy5zZXRUaW1lRGlsYXRpb24odmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIlNvdXJjZVRyZWVGaWx0ZXJcIikge1xuICAgICAgYXdhaXQgdGhpcy5zZXRTb3VyY2VUcmVlRmlsdGVyKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdG9wICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiRGVsZXRpbmcgWW91aUVuZ2luZSBzZXNzaW9uXCIpO1xuXG4gICAgaWYgKHRoaXMuY2Fwcy5wbGF0Zm9ybU5hbWUgIT09IG51bGwpIHtcbiAgICAgIGxldCBhcHBQbGF0Zm9ybSA9IHRoaXMuY2Fwcy5wbGF0Zm9ybU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcHBQbGF0Zm9ybSA9PT0gXCJ5aW1hY1wiKSB7XG4gICAgICAgIHRoaXMuZW5kWUlNYWNTZXNzaW9uKHRoaXMuY2Fwcyk7XG4gICAgICB9IGVsc2UgaWYgKGFwcFBsYXRmb3JtID09PSBcInlpdHZvc1wiKSB7XG4gICAgICAgIHRoaXMuZW5kWUlUVk9TU2Vzc2lvbih0aGlzLmNhcHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3h5ZHJpdmVyICE9PSBudWxsKSB7XG4gICAgICBhd2FpdCB0aGlzLnByb3h5ZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgIGF3YWl0IHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgZHJpdmVyU2hvdWxkRG9Qcm94eUNtZCAoY29tbWFuZCkge1xuICAgIGlmICghdGhpcy5wcm94eWRyaXZlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG9ubHkgYWxsb3cgd2hpdGUgbGlzdGVkIGNvbW1hbmRzXG4gICAgZm9yIChsZXQgYWxsb3dlZENvbW1hbmQgb2YgdGhpcy5wcm94eUFsbG93TGlzdCkge1xuICAgICAgaWYgKGFsbG93ZWRDb21tYW5kID09PSBjb21tYW5kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBhc3luYyBleGVjdXRlQ29tbWFuZCAoY21kLCAuLi5hcmdzKSB7XG4gICAgaWYgKGNtZCA9PT0gJ3JlY2VpdmVBc3luY1Jlc3BvbnNlJykge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBFeGVjdXRpbmcgWW91aUVuZ2luZURyaXZlciByZXNwb25zZSAnJHtjbWR9J2ApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVjZWl2ZUFzeW5jUmVzcG9uc2UoLi4uYXJncyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlYWR5KSB7XG5cbiAgICAgIGlmICh0aGlzLmRyaXZlclNob3VsZERvUHJveHlDbWQoY21kKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEV4ZWN1dGluZyBwcm94aWVkIFdlYkRyaXZlciBjb21tYW5kICcke2NtZH0nYCk7XG5cbiAgICAgICAgLy8gVGhlcmUgYXJlIDIgQ29tbWFuZFRpbWVvdXQgKFlvdWlFbmdpbmVEcml2ZXIgYW5kIHByb3h5KVxuICAgICAgICAvLyBPbmx5IFlvdWlFbmdpbmVEcml2ZXIgQ29tbWFuZFRpbWVvdXQgaXMgdXNlZDsgUHJveHkgaXMgZGlzYWJsZWRcbiAgICAgICAgLy8gQWxsIHByb3h5IGNvbW1hbmRzIG5lZWRzIHRvIHJlc2V0IHRoZSBZb3VpRW5naW5lRHJpdmVyIENvbW1hbmRUaW1lb3V0XG4gICAgICAgIC8vIEhlcmUgd2UgbWFudWFsbHkgcmVzZXQgdGhlIFlvdWlFbmdpbmVEcml2ZXIgQ29tbWFuZFRpbWVvdXQgZm9yIGNvbW1hbmRzIHRoYXQgZ29lIHRvIHByb3h5LlxuICAgICAgICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucHJveHlkcml2ZXIuZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICAgICAgdGhpcy5zdGFydE5ld0NvbW1hbmRUaW1lb3V0KGNtZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEV4ZWN1dGluZyBZb3VpRW5naW5lIFdlYkRyaXZlciBjb21tYW5kICcke2NtZH0nYCk7XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChjbWQsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZGVidWcoYENvbW1hbmQgRXJyb3IgJyR7Y21kfSdgKTtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRHJpdmVyRXJyb3IoYERyaXZlciBpcyBub3QgcmVhZHksIGNhbm5vdCBleGVjdXRlICR7Y21kfS5gKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZURlc2lyZWRDYXBzIChjYXBzKSB7XG4gICAgLy8gY2hlY2sgd2l0aCB0aGUgYmFzZSBjbGFzcywgYW5kIHJldHVybiBpZiBpdCBmYWlsc1xuICAgIGxldCByZXMgPSBzdXBlci52YWxpZGF0ZURlc2lyZWRDYXBzKGNhcHMpO1xuICAgIGlmICghcmVzKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIHVzaW5nIGEgcHJveHlcbiAgICBpZiAoY2Fwcy5wbGF0Zm9ybU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ25vcHJveHknKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgY2FwYWJpbGl0aWVzIGhhcyB5b3VpRW5naW5lQXBwQWRkcmVzc1xuICAgICAgaWYgKCFjYXBzLnlvdWlFbmdpbmVBcHBBZGRyZXNzKSB7XG4gICAgICAgIGxldCBtc2cgPSAnVGhlIGRlc2lyZWQgY2FwYWJpbGl0aWVzIG11c3QgaW5jbHVkZSB5b3VpRW5naW5lQXBwQWRkcmVzcyc7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KG1zZyk7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgY2FwYWJpbGl0aWVzIGhhcyBhcHBcbiAgICAgIGlmICghY2Fwcy5hcHApIHtcbiAgICAgICAgbGV0IG1zZyA9ICdUaGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMgbXVzdCBpbmNsdWRlIGFwcCc7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KG1zZyk7XG4gICAgICB9XG5cbiAgICAgIC8vQW5kcm9pZCBlbXVsYXRvciB3aXRoIHByb3h5XG4gICAgICBpZiAoY2Fwcy5kZXZpY2VOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhbmRyb2lkJykge1xuICAgICAgICBpZiAoIWNhcHMuYXZkKSB7XG4gICAgICAgICAgbGV0IG1zZyA9ICdUaGUgZGVzaXJlZCBjYXBhYmlsaXRpZXMgbXVzdCBpbmNsdWRlIGF2ZCc7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsbHksIHJldHVybiB0cnVlIHNpbmNlIHRoZSBzdXBlcmNsYXNzIGNoZWNrIHBhc3NlZCwgYXMgZGlkIHRoaXNcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIHNldHVwTmV3SU9TRHJpdmVyIChjYXBzKSB7XG4gICAgbGV0IGlvc0FyZ3MgPSB7XG4gICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgbGV0IGlvc2RyaXZlciA9IG5ldyBJT1NEcml2ZXIoaW9zQXJncyk7XG4gICAgLy8gSWYgaU9TIHZlcnNpb24gaXMgMTAgb3IgYWJvdmUgd2UgbmVlZCB0byB1c2UgWENVSVRlc3REcml2ZXIgKGFuZCBYY29kZSA4KylcbiAgICBpZiAoY2Fwcy5wbGF0Zm9ybVZlcnNpb24pIHtcbiAgICAgIGxldCBtYWpvclZlciA9IGNhcHMucGxhdGZvcm1WZXJzaW9uLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgaWYgKHBhcnNlSW50KG1ham9yVmVyLCAxMCkgPj0gMTApIHtcbiAgICAgICAgaW9zZHJpdmVyID0gbmV3IFhDVUlUZXN0RHJpdmVyKGlvc0FyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgY2Fwc0NvcHkgPSBfLmNsb25lRGVlcChjYXBzKTtcbiAgICAvLyBEaXNhYmxpbmcgdGhlIHByb3h5IENvbW1hbmRUaW1lb3V0IGluIHRoZSBpT1MgZHJpdmVyIHNpbmNlIHdlIGFyZSBub3cgaGFuZGxpbmcgaXQgaW4gdGhlIFlvdWlFbmdpbmUgRHJpdmVyXG4gICAgY2Fwc0NvcHkubmV3Q29tbWFuZFRpbWVvdXQgPSAwO1xuICAgIGF3YWl0IGlvc2RyaXZlci5jcmVhdGVTZXNzaW9uKGNhcHNDb3B5KTtcblxuICAgIHJldHVybiBpb3Nkcml2ZXI7XG4gIH1cblxuICBhc3luYyBzdGFydElPU1Nlc3Npb24gKGNhcHMpIHtcbiAgICBsb2dnZXIuaW5mbyhcIlN0YXJ0aW5nIGFuIElPUyBwcm94eSBzZXNzaW9uXCIpO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSBUT19QUk9YWV9JT1M7XG5cbiAgICB0aGlzLnByb3h5ZHJpdmVyID0gYXdhaXQgdGhpcy5zZXR1cE5ld0lPU0RyaXZlcihjYXBzKTtcbiAgfVxuXG4gIGFzeW5jIHNldHVwTmV3QW5kcm9pZERyaXZlciAoY2Fwcykge1xuICAgIGxldCBhbmRyb2lkQXJncyA9IHtcbiAgICAgIGphdmFzY3JpcHRFbmFibGVkOiB0cnVlXG4gICAgfTtcbiAgICBsZXQgYW5kcm9pZGRyaXZlciA9IG5ldyBBbmRyb2lkRHJpdmVyKGFuZHJvaWRBcmdzKTtcbiAgICBsZXQgY2Fwc0NvcHkgPSBfLmNsb25lRGVlcChjYXBzKTtcbiAgICAvLyBEaXNhYmxpbmcgdGhlIHByb3h5IENvbW1hbmRUaW1lb3V0IGluIHRoZSBBbmRyb2lkIGRyaXZlciBzaW5jZSB3ZSBhcmUgbm93IGhhbmRsaW5nIGl0IGluIHRoZSBZb3VpRW5naW5lIERyaXZlclxuICAgIGNhcHNDb3B5Lm5ld0NvbW1hbmRUaW1lb3V0ID0gMDtcblxuICAgIGF3YWl0IGFuZHJvaWRkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBzQ29weSk7XG5cbiAgICByZXR1cm4gYW5kcm9pZGRyaXZlcjtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0QW5kcm9pZFNlc3Npb24gKGNhcHMpIHtcbiAgICBsb2dnZXIuaW5mbyhcIlN0YXJ0aW5nIGFuIEFuZHJvaWQgcHJveHkgc2Vzc2lvblwiKTtcbiAgICB0aGlzLnByb3h5QWxsb3dMaXN0ID0gVE9fUFJPWFlfQU5EUk9JRDtcblxuICAgIHRoaXMucHJveHlkcml2ZXIgPSBhd2FpdCB0aGlzLnNldHVwTmV3QW5kcm9pZERyaXZlcihjYXBzKTtcbiAgfVxuXG4gIGFzeW5jIHNldHVwTmV3TWFjRHJpdmVyIChjYXBzKSB7XG4gICAgbGV0IG1hY0FyZ3MgPSB7XG4gICAgICBqYXZhc2NyaXB0RW5hYmxlZDogdHJ1ZVxuICAgIH07XG4gICAgbGV0IG1hY2RyaXZlciA9IG5ldyBNYWNEcml2ZXIobWFjQXJncyk7XG4gICAgbGV0IGNhcHNDb3B5ID0gXy5jbG9uZURlZXAoY2Fwcyk7XG4gICAgLy8gRGlzYWJsaW5nIHRoZSBwcm94eSBDb21tYW5kVGltZW91dCBpbiB0aGUgcHJveGllZCBkcml2ZXIgc2luY2Ugd2UgYXJlIG5vdyBoYW5kbGluZyBpdCBpbiB0aGUgWW91aUVuZ2luZSBEcml2ZXJcbiAgICBjYXBzQ29weS5uZXdDb21tYW5kVGltZW91dCA9IDA7XG5cbiAgICBhd2FpdCBtYWNkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBzQ29weSk7XG5cbiAgICByZXR1cm4gbWFjZHJpdmVyO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRNYWNTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oXCJTdGFydGluZyBhIE1hYyBwcm94eSBzZXNzaW9uXCIpO1xuICAgIHRoaXMucHJveHlBbGxvd0xpc3QgPSBUT19QUk9YWV9NQUM7XG5cbiAgICB0aGlzLnByb3h5ZHJpdmVyID0gYXdhaXQgdGhpcy5zZXR1cE5ld01hY0RyaXZlcihjYXBzKTtcbiAgfVxuXG4gIHN0YXJ0WUlNYWNTZXNzaW9uIChjYXBzKSB7XG4gICAgbG9nZ2VyLmluZm8oXCJLaWxsaW5nIGFwcCBpZiBydW5cIik7XG4gICAgbGV0IHNoZWxsID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuICAgIGxldCBwcm9jZXNzX25hbWUgPSBjYXBzLmFwcC5zdWJzdHJpbmcoY2Fwcy5hcHAubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgc2hlbGwuZXhlYyhcImtpbGxhbGwgXCIgKyBwcm9jZXNzX25hbWUpO1xuXG4gICAgbG9nZ2VyLmluZm8oXCJMYXVuY2hpbmcgbWFjT1MgYXBwXCIpO1xuICAgIHRoaXMudmFsaWRhdGVBcHBMb2NhdGlvbihjYXBzLmFwcCk7XG4gICAgbGV0IHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduLFxuICAgICAgICBscyA9IHNwYXduKGNhcHMuYXBwKTtcblxuICAgIC8vUHJpbnQgWGNvZGUgbG9ncyAoU1RET1VUKVxuICAgIGxzLnN0ZG91dC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSAhPSBudWxsICYmIGNhcHMuc2hvd1hjb2RlTG9nID09PSB0cnVlKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnWGNvZGUgTG9nIE91dHB1dDogJyArIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvL1ByaW50IFhjb2RlIGxvZ3MgKFNUREVSUilcbiAgICBscy5zdGRlcnIub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEgIT0gbnVsbCAmJiBjYXBzLnNob3dYY29kZUxvZyA9PT0gdHJ1ZSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ1hjb2RlIExvZyBFcnJvcjogJyArIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBscy5vbignZXhpdCcsIGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICBpZiAoY29kZSAhPSBudWxsICYmIGNhcHMuc2hvd1hjb2RlTG9nID09PSB0cnVlKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQXBwbGljYXRpb24gZXhpdGVkIHdpdGggY29kZSAnICsgY29kZS50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGVuZFlJTWFjU2Vzc2lvbiAoY2Fwcykge1xuICAgIGxvZ2dlci5pbmZvKFwiRGVsZXRpbmcgYXBwXCIpO1xuICAgIGxldCBzaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbiAgICBsZXQgcHJvY2Vzc19uYW1lID0gY2Fwcy5hcHAuc3Vic3RyaW5nKGNhcHMuYXBwLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgIHNoZWxsLmV4ZWMoXCJraWxsYWxsIFwiICsgcHJvY2Vzc19uYW1lKTtcbiAgfVxuXG4gIHN0YXJ0WUlSb2t1U2Vzc2lvbiAoY2Fwcykge1xuICAgIGxvZ2dlci5pbmZvKFwiTGF1bmNoaW5nIFJva3UgYXBwXCIpO1xuICAgIHRoaXMudmFsaWRhdGVBcHBMb2NhdGlvbihjYXBzLmFwcCk7XG4gICAgbGV0IHNoZWxsID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuICAgIGxldCByb2t1X2luc3RhbGxfc2NyaXB0ID0gXCJjdXJsIC12IC0jIC1mIC1pIC0tdXNlciAnXCIgKyBjYXBzLnVzZXJuYW1lICsgXCI6XCIgKyBjYXBzLnBhc3N3b3JkICsgXCInIC0tZGlnZXN0IC0tcHJvZ3Jlc3MtYmFyIC1GICdteXN1Ym1pdD1JbnN0YWxsJyAtRiAnYXJjaGl2ZT1AXCIgKyBjYXBzLmFwcCArIFwiJyAtRiAncGFzc3dkPScgaHR0cDovL1wiICsgY2Fwcy55b3VpRW5naW5lQXBwQWRkcmVzcyArIFwiL3BsdWdpbl9pbnN0YWxsIHwgZ3JlcCAnPGZvbnQgY29sb3InIHwgc2VkICdzLzxmb250IGNvbG9yPVxcJ3JlZFxcJz4vLycgXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICBzaGVsbC5leGVjKHJva3VfaW5zdGFsbF9zY3JpcHQpO1xuICAgIC8vXCJjdXJsIC12IC0jIC1mIC1pIC0tdXNlciAncm9rdWRldjp5b3VpJyAtLWRpZ2VzdCAtLXByb2dyZXNzLWJhciAtRiAnbXlzdWJtaXQ9SW5zdGFsbCcgLUYgJ2FyY2hpdmU9QC9Vc2Vycy9zaW1vbmdyYW5nZXIvRG93bmxvYWRzL1ZpZGVvUGxheWVyLmJpbicgLUYgJ3Bhc3N3ZD0nIGh0dHA6Ly8xMC4xMDAuODkuMjQ1L3BsdWdpbl9pbnN0YWxsIHwgZ3JlcCAnPGZvbnQgY29sb3InIHwgc2VkICdzLzxmb250IGNvbG9yPVxcJ3JlZFxcJz4vLycgXCJcbiAgfVxuXG4gIHN0YXJ0WUlUVk9TU2Vzc2lvbiAoY2Fwcykge1xuICAgIGxvZ2dlci5pbmZvKFwiTGF1bmNoaW5nIHR2T1MgYXBwXCIpO1xuICAgIHRoaXMudmFsaWRhdGVBcHBMb2NhdGlvbihjYXBzLmFwcCk7XG4gICAgbGV0IHNoZWxsID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuICAgIGlmIChjYXBzLnVkaWQpIHtcbiAgICAgIHNoZWxsLmV4ZWMoXCJpb3MtZGVwbG95IC0taWQgXCIgKyBjYXBzLnVkaWQgKyBcIiAtLXVuaW5zdGFsbCAtLWp1c3RsYXVuY2ggLS1idW5kbGUgXCIgKyBjYXBzLmFwcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoZWxsLmV4ZWMoXCJpb3MtZGVwbG95IC0tdW5pbnN0YWxsIC0tanVzdGxhdW5jaCAtLWJ1bmRsZSBcIiArIGNhcHMuYXBwKTtcbiAgICB9XG4gIH1cblxuICBlbmRZSVRWT1NTZXNzaW9uIChjYXBzKSB7XG4gICAgLy8gSWYgbXVsdGlwbGUgYXBwcyB3aXRoIG91ciBzb2NrZXQgYXJlIGluc3RhbGxlZCwgaXQgd2lsbCBjb25uZWN0IHRvIHRoZSBmaXJzdCBhcHAgaW5zdGFsbGVkLlxuICAgIC8vIEZvciB0aGlzIHJlYXNvbiwgZXZlcnkgYXBwIHNob3VsZCBiZSB1bmluc3RhbGxlZCBhZnRlciBydW5uaW5nLlxuICAgIGxvZ2dlci5pbmZvKFwiRGVsZXRpbmcgYXBwXCIpO1xuICAgIGxldCBzaGVsbCA9IHJlcXVpcmUoJ3NoZWxsanMnKTtcbiAgICBsZXQgYnVuZGxlaWQgPSBzaGVsbC5leGVjKGBvc2FzY3JpcHQgLWUgJ2lkIG9mIGFwcCBcIiR7Y2Fwcy5hcHB9XCInYCk7XG4gICAgaWYgKGNhcHMudWRpZCkge1xuICAgICAgc2hlbGwuZXhlYyhcImlvcy1kZXBsb3kgLS1pZCBcIiArIGNhcHMudWRpZCArIFwiIC0tdW5pbnN0YWxsX29ubHkgLS1idW5kbGVfaWQgXCIgKyBidW5kbGVpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoZWxsLmV4ZWMoXCJpb3MtZGVwbG95IC0tdW5pbnN0YWxsX29ubHkgLS1idW5kbGVfaWQgXCIgKyBidW5kbGVpZCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVBcHBMb2NhdGlvbiAoYXBwKSB7XG4gICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIGNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGFwcCkpIHtcbiAgICAgIGxldCBhYnNvbHV0ZXBhdGggPSBwYXRoLnJlc29sdmUoYXBwKTtcbiAgICAgIGxldCBtc2cgPSAnVGhlIGFwcCBjb3VsZCBub3QgYmUgZm91bmQgaW4gZm9sbG93aW5nIGxvY2F0aW9uOiAnICsgYWJzb2x1dGVwYXRoO1xuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgICB9XG4gIH1cblxuICAvLyBTT0NLRVRTXG4gIGFzeW5jIGNvbm5lY3RTb2NrZXQgKCkge1xuICAgIGxldCByZXRyeUNvdW50ID0gMDtcbiAgICBsZXQgY29ubmVjdGVkID0gZmFsc2U7XG4gICAgd2hpbGUgKHJldHJ5Q291bnQgPCBNQVhfUkVUUllfQ09VTlQgJiYgIWNvbm5lY3RlZCkge1xuICAgICAgaWYgKHJldHJ5Q291bnQgPiAwKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiV2FpdGluZyBcIiArIChSRVRSWV9CQUNLT0ZGIC8gMTAwMCkgKyBcIiBzZWNvbmRzIGJlZm9yZSB0cnlpbmcuLi5cIik7XG4gICAgICAgIGF3YWl0IHNsZWVwKFJFVFJZX0JBQ0tPRkYpO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmluZm8oXCJBdHRlbXB0ICNcIiArIChyZXRyeUNvdW50ICsgMSkpO1xuXG4gICAgICBsZXQgY29ubmVjdGVkUHJvbWlzZSA9IG5ldyBCKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGxldCBuZXQgPSByZXF1aXJlKCduZXQnKTtcblxuICAgICAgICBsZXQgSE9TVCA9IHRoaXMub3B0cy55b3VpRW5naW5lQXBwQWRkcmVzcztcbiAgICAgICAgbGV0IFBPUlQgPSAxMjM0NTtcblxuICAgICAgICBsb2dnZXIuaW5mbygnQ29ubmVjdGluZyB0byBXZWJEcml2ZXI6ICcgKyBIT1NUICsgJzonICsgUE9SVCk7XG5cbiAgICAgICAgdGhpcy5zb2NrZXQgPSBuZXcgbmV0LlNvY2tldCgpO1xuXG4gICAgICAgIC8vIEFkZCBhbiAnZXJyb3InIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBjbGllbnQgc29ja2V0XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uICgnZXJyb3InLCBmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoZXgpO1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignQ2hlY2sgdGhhdCBXZWJEcml2ZXIgaXMgZW5hYmxlZCBpbiBhcHBsaWNhdGlvbiwgaWYgYSBkZXZpY2UgZW5zdXJlIHRoZSBwcm9wZXIgSVAgYWRkcmVzcyBpcyB1c2VkLicpO1xuICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQWRkIGEgJ2Nsb3NlJyBldmVudCBoYW5kbGVyIGZvciB0aGUgY2xpZW50IHNvY2tldFxuICAgICAgICB0aGlzLnNvY2tldC5vbiAoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdDb25uZWN0aW9uIGNsb3NlZCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQWRkIGEgJ3RpbWVvdXQnIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBjbGllbnQgc29ja2V0XG4gICAgICAgIHRoaXMuc29ja2V0Lm9uICgndGltZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Nvbm5lY3Rpb24gdGltZWQgb3V0Jyk7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0IChQT1JULCBIT1NULCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG9nZ2VyLmluZm8oJ0Nvbm5lY3RlZCcpO1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXRyeUNvdW50Kys7XG4gICAgICBjb25uZWN0ZWQgPSBhd2FpdCBjb25uZWN0ZWRQcm9taXNlO1xuXG4gICAgICBpZiAoIWNvbm5lY3RlZCAmJiByZXRyeUNvdW50ID09PSAoTUFYX1JFVFJZX0NPVU5UIC0gMSkpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coXCJGYWlsZWQgdG8gY29ubmVjdCBcIiArIE1BWF9SRVRSWV9DT1VOVCArIFwiIHRpbWVzLiBBYm9ydGluZy5cIik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHJ5Q291bnQgPSAwO1xuICAgIHRoaXMucmVhZHkgPSBjb25uZWN0ZWQ7XG4gIH1cblxuICAvLyByZXNwb25zZXMgdG8gdGhlIGNvbW1hbmRzIGFyZSBCSU5BUllcbiAgYXN5bmMgZXhlY3V0ZVNvY2tldENvbW1hbmQgKGNtZCkge1xuXG4gICAgaWYgKCF0aGlzLnNvY2tldC53cml0YWJsZSkge1xuICAgICAgbG9nZ2VyLmluZm8oXCJTb2NrZXQgaXMgbm90IHdyaXRhYmxlLiBUcnlpbmcgdG8gcmVjb25uZWN0LlwiKTtcbiAgICAgIGF3YWl0IHRoaXMuY29ubmVjdFNvY2tldCgpO1xuICAgIH1cblxuICAgIGxldCBjbWRQcm9taXNlID0gbmV3IEIoKHJlc29sdmUpID0+IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ09NTUFORDogJyArIGNtZCk7XG5cbiAgICAgIGxldCB0b3RhbGRhdGEgPSBbXTtcbiAgICAgIGxldCBlbmRNYXJrZXIgPSBuZXcgQnVmZmVyKFwieW91aWVuZFwiKTtcbiAgICAgIGxldCBzb2NrZXRDbGllbnQgPSB0aGlzLnNvY2tldDtcblxuXG4gICAgICBsZXQgZGF0YUhhbmRsZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiB0aGlzIGluY2x1ZGVzIGFuIGVuZCBwYXJrZXJcbiAgICAgICAgLy8gZ2V0IGxhc3QgZmV3IHZhbHVlcyBvZiBidWZmZXJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID49IGVuZE1hcmtlci5sZW5ndGgpIHtcbiAgICAgICAgICBsZXQgZGF0YWVuZCA9IG5ldyBCdWZmZXIoZW5kTWFya2VyLmxlbmd0aCk7XG4gICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBkYXRhLmxlbmd0aCAtIGVuZE1hcmtlci5sZW5ndGg7XG4gICAgICAgICAgZGF0YS5jb3B5KGRhdGFlbmQsIDAsIHN0YXJ0SW5kZXgsIHN0YXJ0SW5kZXggKyBlbmRNYXJrZXIubGVuZ3RoKTtcbiAgICAgICAgICAvL2xvZ2dlci5kZWJ1ZygnREFUQUVORCcgKyBkYXRhZW5kLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIGlmIChkYXRhZW5kLmVxdWFscyhlbmRNYXJrZXIpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZGF0YSBlbmRcbiAgICAgICAgICAgIGxldCBsYXN0RGF0YSA9IGRhdGEuc2xpY2UoMCwgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICAvL2xvZ2dlci5kZWJ1ZygnTEFTVCBEQVRBOiAnICsgbGFzdERhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB0b3RhbGRhdGEucHVzaChsYXN0RGF0YSk7XG5cbiAgICAgICAgICAgIC8vcmVtb3ZlIGhhbmRsZXJcbiAgICAgICAgICAgIHNvY2tldENsaWVudC5yZW1vdmVMaXN0ZW5lcignZGF0YScsIGRhdGFIYW5kbGVyKTtcblxuICAgICAgICAgICAgLy8gcmVzb2x2ZVxuICAgICAgICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KHRvdGFsZGF0YSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b3RhbGRhdGEucHVzaChkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNvY2tldENsaWVudC53cml0ZShjbWQgKyBcIlxcblwiLCBcIlVURjhcIiwgKCkgPT4ge1xuICAgICAgICBzb2NrZXRDbGllbnQub24oJ2RhdGEnLCBkYXRhSGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgY21kUHJvbWlzZTtcbiAgfVxufVxuXG5mb3IgKGxldCBbY21kLCBmbl0gb2YgXy50b1BhaXJzKGNvbW1hbmRzKSkge1xuICBZb3VpRW5naW5lRHJpdmVyLnByb3RvdHlwZVtjbWRdID0gZm47XG59XG5cbmV4cG9ydCB7IFlvdWlFbmdpbmVEcml2ZXIgfTtcbiJdLCJmaWxlIjoibGliL2RyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
