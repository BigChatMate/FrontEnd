"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

var _appiumSupport = require("appium-support");

let commands = {};

commands.getAttribute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (attribute, el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'getAttribute',
      args: [`${el}`, `${attribute}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from getAttribute");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR) {
      throw new _appiumBaseDriver.errors.InvalidSelectorError(result.value);
    }

    return result.value;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.setValue = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (value, el) {
    el = (0, _utils.unwrapEl)(el);

    if (value instanceof Array) {
      value = value.join("");
    }

    if (typeof value !== 'string') {
      value = `${value}`;
    }

    value = _appiumSupport.util.escapeSpecialChars(value, "'");
    value = value.replace(/\\\\n/g, "\\n");
    let commandObject = {
      name: 'sendkeys',
      args: [`${el}`, `${value}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from setValue");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

commands.getText = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'getText',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from getText");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x5) {
    return _ref3.apply(this, arguments);
  };
}();

commands.elementEnabled = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'elementEnabled',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from elementEnabled");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    }

    return result.value;
  });

  return function (_x6) {
    return _ref4.apply(this, arguments);
  };
}();

commands.elementSelected = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'elementSelected',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from elementSelected");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_ELEMENT_IS_NOT_SELECTABLE) {
      throw new _appiumBaseDriver.errors.ElementIsNotSelectableError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    }

    return result.value;
  });

  return function (_x7) {
    return _ref5.apply(this, arguments);
  };
}();

commands.elementDisplayed = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'elementDisplayed',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from elementDisplayed");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    }

    return result.value;
  });

  return function (_x8) {
    return _ref6.apply(this, arguments);
  };
}();

commands.clear = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'clear',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from clear");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    }

    return result.value;
  });

  return function (_x9) {
    return _ref7.apply(this, arguments);
  };
}();

commands.getLocation = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'elementLocation',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from elementLocation");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    }

    return result.value;
  });

  return function (_x10) {
    return _ref8.apply(this, arguments);
  };
}();

commands.getLocationInView = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.getLocation(elementId);
  });

  return function (_x11) {
    return _ref9.apply(this, arguments);
  };
}();

commands.getSize = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (el) {
    el = (0, _utils.unwrapEl)(el);
    let commandObject = {
      name: 'elementSize',
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from getSize");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    }

    return result.value;
  });

  return function (_x12) {
    return _ref10.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
