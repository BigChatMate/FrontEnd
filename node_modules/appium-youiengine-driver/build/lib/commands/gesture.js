"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

let commands = {};

commands.click = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (el) {
    let retVal = yield this.tapEl(el);
    return retVal;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.tapEl = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (el, longPress) {
    el = (0, _utils.unwrapEl)(el);
    let commandName = 'tap';

    if (longPress) {
      commandName = 'longpress';
    }

    let commandObject = {
      name: commandName,
      args: [`${el}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from click");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.tapElXY = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (el, x, y, longPress) {
    el = (0, _utils.unwrapEl)(el);
    let commandName = 'tap';

    if (longPress) {
      commandName = 'longpress';
    }

    let commandObject = {
      name: commandName,
      args: [`${el}`, `${x}`, `${y}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from tapElXY");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
      throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
    } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x4, _x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

commands.tapXY = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (x, y, longPress) {
    let commandName = 'tap';

    if (longPress === true) {
      commandName = 'longpress';
    }

    let commandObject = {
      name: commandName,
      args: [`${x}`, `${y}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from tapXY");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x8, _x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();

commands.tap = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (gestures, longPress) {
    let elementId = gestures[0].options.element;
    let x = gestures[0].options.x;
    let y = gestures[0].options.y;

    if (elementId) {
      if (x && y) {
        yield this.tapElXY(elementId, x, y, longPress);
      } else {
        yield this.tapEl(elementId, longPress);
      }
    } else {
      yield this.tapXY(x, y, longPress);
    }
  });

  return function (_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

commands.doSwipe = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (gestures, longPress) {
    let press = gestures[0];
    let moveTo = gestures[1];
    let startX = press.options.x || 0,
        startY = press.options.y || 0,
        deltaX = moveTo.options.x || 0,
        deltaY = moveTo.options.y || 0;

    if (press.options.element) {
      let _ref7 = yield this.getLocation(press.options.element),
          x = _ref7.x,
          y = _ref7.y;

      let _ref8 = yield this.getSize(press.options.element),
          width = _ref8.width,
          height = _ref8.height;

      if (!press.options.x && !press.options.y && width && height) {
        startX += width / 2;
        startY += height / 2;
      }

      startX += x || 0;
      startY += y || 0;
    }

    if (moveTo.options.element) {
      let _ref9 = yield this.getLocation(moveTo.options.element),
          x = _ref9.x,
          y = _ref9.y;

      let _ref10 = yield this.getSize(moveTo.options.element),
          width = _ref10.width,
          height = _ref10.height;

      deltaX += x || 0;
      deltaY += y || 0;

      if (!moveTo.options.x && !moveTo.options.y && width && height) {
        deltaX += width / 2;
        deltaY += height / 2;
      }
    }

    let commandName = 'swipe';

    if (longPress === true) {
      commandName = 'longpressswipe';
    }

    let commandObject = {
      name: commandName,
      args: [`${startX}`, `${startY}`, `${deltaX}`, `${deltaY}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from doSwipe");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
      throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
    }

    return result.value;
  });

  return function (_x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();

commands.performTouch = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (gestures) {
    if (gestures.length === 3) {
      if (gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
        return yield this.doSwipe(gestures, false);
      } else if (gestures[0].action === 'longPress' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
        return yield this.doSwipe(gestures, true);
      }
    } else if (gestures.length === 2) {
      if (gestures[0].action === 'press' && gestures[1].action === 'release') {
        return yield this.tap(gestures, false);
      } else if (gestures[0].action === 'longPress' && gestures[1].action === 'release') {
        return yield this.tap(gestures, true);
      }
    } else if (gestures.length === 1) {
      if (gestures[0].action === 'tap') {
        return yield this.tap(gestures, false);
      }
    }
  });

  return function (_x15) {
    return _ref11.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
