"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

let commands = {};

commands.findElOrEls = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    var _this = this;

    let createGetElementCommand = function createGetElementCommand(strategy, selector, mult, context) {
      if (typeof context === "undefined" || !context) {
        context = '';
      }

      let ext = mult ? 's' : '';
      let commandObject = {
        args: [`${selector}`, `${context}`]
      };

      switch (strategy) {
        case "name":
          commandObject.name = `getElement${ext}ByName`;
          break;

        case "accessibility id":
          commandObject.name = `getElement${ext}ByName`;
          break;

        case "id":
          commandObject.name = `getElement${ext}ById`;
          break;

        case "class name":
          commandObject.name = `getElement${ext}ByType`;
          break;

        default:
          throw new Error("Unsupported strategy for findElOrEls: " + strategy);
      }

      return JSON.stringify(commandObject);
    };

    let result;

    let doFind = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        let findByAxIdCmd = createGetElementCommand(strategy, selector, mult, context);
        let res = yield _this.executeSocketCommand(findByAxIdCmd);

        try {
          result = JSON.parse(res);
        } catch (e) {
          throw new Error("Bad response from findElOrEls");
        }

        if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR) {
          throw new _appiumBaseDriver.errors.InvalidSelectorError(result.value);
        }

        if (result.value === "") {
          return false;
        }

        return true;
      });

      return function doFind() {
        return _ref2.apply(this, arguments);
      };
    }();

    try {
      yield this.implicitWaitForCondition(doFind);
    } catch (err) {
      if (err.message && err.message.match(/Condition unmet/)) {
        throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
      } else {
        throw err;
      }
    }

    return result.value;
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZmluZEVsT3JFbHMiLCJzdHJhdGVneSIsInNlbGVjdG9yIiwibXVsdCIsImNvbnRleHQiLCJjcmVhdGVHZXRFbGVtZW50Q29tbWFuZCIsImV4dCIsImNvbW1hbmRPYmplY3QiLCJhcmdzIiwibmFtZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3VsdCIsImRvRmluZCIsImZpbmRCeUF4SWRDbWQiLCJyZXMiLCJleGVjdXRlU29ja2V0Q29tbWFuZCIsInBhcnNlIiwiZSIsInN0YXR1cyIsInlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMiLCJXRUJEUklWRVJfSU5WQUxJRF9TRUxFQ1RPUiIsImVycm9ycyIsIkludmFsaWRTZWxlY3RvckVycm9yIiwidmFsdWUiLCJpbXBsaWNpdFdhaXRGb3JDb25kaXRpb24iLCJlcnIiLCJtZXNzYWdlIiwibWF0Y2giLCJOb1N1Y2hFbGVtZW50RXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7O0FBRUFBLFFBQVEsQ0FBQ0MsV0FBVDtBQUFBLDZDQUF1QixXQUFnQkMsUUFBaEIsRUFBMEJDLFFBQTFCLEVBQW9DQyxJQUFwQyxFQUEwQ0MsT0FBMUMsRUFBbUQ7QUFBQTs7QUFFeEUsUUFBSUMsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUFVSixRQUFWLEVBQW9CQyxRQUFwQixFQUE4QkMsSUFBOUIsRUFBb0NDLE9BQXBDLEVBQTZDO0FBRXpFLFVBQUksT0FBT0EsT0FBUCxLQUFtQixXQUFuQixJQUFrQyxDQUFDQSxPQUF2QyxFQUFnRDtBQUM5Q0EsUUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFDRDs7QUFFRCxVQUFJRSxHQUFHLEdBQUdILElBQUksR0FBRyxHQUFILEdBQVMsRUFBdkI7QUFDQSxVQUFJSSxhQUFhLEdBQUc7QUFDbEJDLFFBQUFBLElBQUksRUFBRSxDQUFFLEdBQUVOLFFBQVMsRUFBYixFQUFpQixHQUFFRSxPQUFRLEVBQTNCO0FBRFksT0FBcEI7O0FBSUEsY0FBUUgsUUFBUjtBQUNFLGFBQUssTUFBTDtBQUNFTSxVQUFBQSxhQUFhLENBQUNFLElBQWQsR0FBc0IsYUFBWUgsR0FBSSxRQUF0QztBQUNBOztBQUNGLGFBQUssa0JBQUw7QUFDRUMsVUFBQUEsYUFBYSxDQUFDRSxJQUFkLEdBQXNCLGFBQVlILEdBQUksUUFBdEM7QUFDQTs7QUFDRixhQUFLLElBQUw7QUFDRUMsVUFBQUEsYUFBYSxDQUFDRSxJQUFkLEdBQXNCLGFBQVlILEdBQUksTUFBdEM7QUFDQTs7QUFDRixhQUFLLFlBQUw7QUFDRUMsVUFBQUEsYUFBYSxDQUFDRSxJQUFkLEdBQXNCLGFBQVlILEdBQUksUUFBdEM7QUFDQTs7QUFDRjtBQUNFLGdCQUFNLElBQUlJLEtBQUosQ0FBVSwyQ0FBMkNULFFBQXJELENBQU47QUFkSjs7QUFpQkEsYUFBT1UsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGFBQWYsQ0FBUDtBQUNELEtBN0JEOztBQStCQSxRQUFJTSxNQUFKOztBQUNBLFFBQUlDLE1BQU07QUFBQSxrREFBRyxhQUFZO0FBQ3ZCLFlBQUlDLGFBQWEsR0FBR1YsdUJBQXVCLENBQUNKLFFBQUQsRUFBV0MsUUFBWCxFQUFxQkMsSUFBckIsRUFBMkJDLE9BQTNCLENBQTNDO0FBRUEsWUFBSVksR0FBRyxTQUFTLEtBQUksQ0FBQ0Msb0JBQUwsQ0FBMEJGLGFBQTFCLENBQWhCOztBQUVBLFlBQUk7QUFDRkYsVUFBQUEsTUFBTSxHQUFHRixJQUFJLENBQUNPLEtBQUwsQ0FBV0YsR0FBWCxDQUFUO0FBQ0QsU0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUVWLGdCQUFNLElBQUlULEtBQUosQ0FBVSwrQkFBVixDQUFOO0FBQ0Q7O0FBQ0QsWUFBSUcsTUFBTSxDQUFDTyxNQUFQLEtBQWtCQyxvQ0FBNkJDLDBCQUFuRCxFQUErRTtBQUM3RSxnQkFBTSxJQUFJQyx5QkFBT0Msb0JBQVgsQ0FBZ0NYLE1BQU0sQ0FBQ1ksS0FBdkMsQ0FBTjtBQUNEOztBQUdELFlBQUlaLE1BQU0sQ0FBQ1ksS0FBUCxLQUFpQixFQUFyQixFQUF5QjtBQUN2QixpQkFBTyxLQUFQO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FwQlM7O0FBQUEsc0JBQU5YLE1BQU07QUFBQTtBQUFBO0FBQUEsT0FBVjs7QUFzQkEsUUFBSTtBQUNGLFlBQU0sS0FBS1ksd0JBQUwsQ0FBOEJaLE1BQTlCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT2EsR0FBUCxFQUFZO0FBQ1osVUFBSUEsR0FBRyxDQUFDQyxPQUFKLElBQWVELEdBQUcsQ0FBQ0MsT0FBSixDQUFZQyxLQUFaLENBQWtCLGlCQUFsQixDQUFuQixFQUF5RDtBQUV2RCxjQUFNLElBQUlOLHlCQUFPTyxrQkFBWCxDQUE4QmpCLE1BQU0sQ0FBQ1ksS0FBckMsQ0FBTjtBQUNELE9BSEQsTUFHTztBQUVMLGNBQU1FLEdBQU47QUFDRDtBQUNGOztBQUNELFdBQU9kLE1BQU0sQ0FBQ1ksS0FBZDtBQUNELEdBcEVEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztlQXNFZTFCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgeW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcyB9IGZyb20gJy4uL3V0aWxzJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLmZpbmRFbE9yRWxzID0gYXN5bmMgZnVuY3Rpb24gKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCkge1xuXG4gIGxldCBjcmVhdGVHZXRFbGVtZW50Q29tbWFuZCA9IGZ1bmN0aW9uIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcblxuICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhY29udGV4dCkge1xuICAgICAgY29udGV4dCA9ICcnO1xuICAgIH1cblxuICAgIGxldCBleHQgPSBtdWx0ID8gJ3MnIDogJyc7XG4gICAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgICBhcmdzOiBbYCR7c2VsZWN0b3J9YCwgYCR7Y29udGV4dH1gXVxuICAgIH07XG5cbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICBjb21tYW5kT2JqZWN0Lm5hbWUgPSBgZ2V0RWxlbWVudCR7ZXh0fUJ5TmFtZWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImFjY2Vzc2liaWxpdHkgaWRcIjpcbiAgICAgICAgY29tbWFuZE9iamVjdC5uYW1lID0gYGdldEVsZW1lbnQke2V4dH1CeU5hbWVgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpZFwiOlxuICAgICAgICBjb21tYW5kT2JqZWN0Lm5hbWUgPSBgZ2V0RWxlbWVudCR7ZXh0fUJ5SWRgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjbGFzcyBuYW1lXCI6XG4gICAgICAgIGNvbW1hbmRPYmplY3QubmFtZSA9IGBnZXRFbGVtZW50JHtleHR9QnlUeXBlYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBzdHJhdGVneSBmb3IgZmluZEVsT3JFbHM6IFwiICsgc3RyYXRlZ3kpO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcbiAgfTtcblxuICBsZXQgcmVzdWx0O1xuICBsZXQgZG9GaW5kID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBmaW5kQnlBeElkQ21kID0gY3JlYXRlR2V0RWxlbWVudENvbW1hbmQoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KTtcblxuICAgIGxldCByZXMgPSBhd2FpdCB0aGlzLmV4ZWN1dGVTb2NrZXRDb21tYW5kKGZpbmRCeUF4SWRDbWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBwYXJzZSBlcnJvclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gZmluZEVsT3JFbHNcIik7XG4gICAgfVxuICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9JTlZBTElEX1NFTEVDVE9SKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRTZWxlY3RvckVycm9yKHJlc3VsdC52YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gbG9va3MgbGlrZSB3ZSBoYXZlIHRvIGNoZWNrIHRoZSBzdGF0dXMgb3IgcmVzdWx0aW5nIHZhbHVlIHRvIHNlZSB0aGF0IGl0J3Mgbm90IGVtcHR5LlxuICAgIGlmIChyZXN1bHQudmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmltcGxpY2l0V2FpdEZvckNvbmRpdGlvbihkb0ZpbmQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UubWF0Y2goL0NvbmRpdGlvbiB1bm1ldC8pKSB7XG4gICAgICAvLyBjb25kaXRpb24gd2FzIG5vdCBtZXQsIHRocm93IE5vU3VjaEVsZW1lbnRFcnJvclxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IocmVzdWx0LnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc29tZSBvdGhlciBpc3N1ZSBvY2N1cnJlZCwgcmVwb3J0IGl0XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQudmFsdWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2ZpbmQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
