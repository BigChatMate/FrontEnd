"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.implicitWait = function (ms) {
  this.implicitWaitMs = parseInt(ms, 10);

  _logger.default.debug(`Set implicit wait to ${ms}ms`);
};

commands.timeouts = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (name, duration) {
    if (name === 'command') {
      this.newCommandTimeoutMs = duration;
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function (cmd) {
  var _this = this;

  this.clearNewCommandTimeout();

  if (!this.newCommandTimeoutMs) {
    return;
  }

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then((0, _asyncToGenerator2.default)(function* () {
    _logger.default.warn(`Shutting down because we waited ` + `${_this.newCommandTimeoutMs / 1000} seconds for a command`);

    yield _this.startUnexpectedShutdown(new Error(`Command ${cmd} timed out!`));
  })).catch(_bluebird.default.CancellationError, () => {});
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJpbXBsaWNpdFdhaXQiLCJtcyIsImltcGxpY2l0V2FpdE1zIiwicGFyc2VJbnQiLCJsb2ciLCJkZWJ1ZyIsInRpbWVvdXRzIiwibmFtZSIsImR1cmF0aW9uIiwibmV3Q29tbWFuZFRpbWVvdXRNcyIsImNsZWFyTmV3Q29tbWFuZFRpbWVvdXQiLCJub0NvbW1hbmRUaW1lciIsImNhbmNlbCIsInN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQiLCJjbWQiLCJ1dGlsIiwiY2FuY2VsbGFibGVEZWxheSIsInRoZW4iLCJ3YXJuIiwic3RhcnRVbmV4cGVjdGVkU2h1dGRvd24iLCJFcnJvciIsImNhdGNoIiwiQiIsIkNhbmNlbGxhdGlvbkVycm9yIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxZQUFULEdBQXdCLFVBQVVDLEVBQVYsRUFBYztBQUNwQyxPQUFLQyxjQUFMLEdBQXNCQyxRQUFRLENBQUNGLEVBQUQsRUFBSyxFQUFMLENBQTlCOztBQUNBRyxrQkFBSUMsS0FBSixDQUFXLHdCQUF1QkosRUFBRyxJQUFyQztBQUNELENBSEQ7O0FBS0FKLFFBQVEsQ0FBQ1MsUUFBVDtBQUFBLDZDQUFvQixXQUFnQkMsSUFBaEIsRUFBc0JDLFFBQXRCLEVBQWdDO0FBQ2xELFFBQUlELElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLFdBQUtFLG1CQUFMLEdBQTJCRCxRQUEzQjtBQUNEO0FBQ0YsR0FKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQVYsT0FBTyxDQUFDWSxzQkFBUixHQUFpQyxZQUFZO0FBQzNDLE1BQUksS0FBS0MsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CQyxNQUFwQjtBQUNBLFNBQUtELGNBQUwsR0FBc0IsSUFBdEI7QUFDRDtBQUNGLENBTEQ7O0FBT0FiLE9BQU8sQ0FBQ2Usc0JBQVIsR0FBaUMsVUFBVUMsR0FBVixFQUFlO0FBQUE7O0FBRTlDLE9BQUtKLHNCQUFMOztBQUdBLE1BQUksQ0FBQyxLQUFLRCxtQkFBVixFQUErQjtBQUM3QjtBQUNEOztBQUVELE9BQUtFLGNBQUwsR0FBc0JJLG9CQUFLQyxnQkFBTCxDQUFzQixLQUFLUCxtQkFBM0IsQ0FBdEI7QUFDQSxPQUFLRSxjQUFMLENBQ0dNLElBREgsaUNBQ1EsYUFBWTtBQUNoQmIsb0JBQUljLElBQUosQ0FBVSxrQ0FBRCxHQUNDLEdBQUUsS0FBSSxDQUFDVCxtQkFBTCxHQUEyQixJQUFLLHdCQUQ1Qzs7QUFFQSxVQUFNLEtBQUksQ0FBQ1UsdUJBQUwsQ0FBNkIsSUFBSUMsS0FBSixDQUFXLFdBQVVOLEdBQUksYUFBekIsQ0FBN0IsQ0FBTjtBQUNELEdBTEgsR0FNR08sS0FOSCxDQU1TQyxrQkFBRUMsaUJBTlgsRUFNOEIsTUFBYSxDQUV4QyxDQVJIO0FBU0QsQ0FuQkQ7O0FBcUJBQyxNQUFNLENBQUNDLE1BQVAsQ0FBYzFCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmltcGxpY2l0V2FpdCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gcGFyc2VJbnQobXMsIDEwKTtcbiAgbG9nLmRlYnVnKGBTZXQgaW1wbGljaXQgd2FpdCB0byAke21zfW1zYCk7XG59O1xuXG5jb21tYW5kcy50aW1lb3V0cyA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lLCBkdXJhdGlvbikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgaWYgKG5hbWUgPT09ICdjb21tYW5kJykge1xuICAgIHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyA9IGR1cmF0aW9uO1xuICB9XG59O1xuXG5oZWxwZXJzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm5vQ29tbWFuZFRpbWVyKSB7XG4gICAgdGhpcy5ub0NvbW1hbmRUaW1lci5jYW5jZWwoKTtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyID0gbnVsbDtcbiAgfVxufTtcblxuaGVscGVycy5zdGFydE5ld0NvbW1hbmRUaW1lb3V0ID0gZnVuY3Rpb24gKGNtZCkge1xuICAvLyBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHJvZ3VlIHRpbWVvdXRzXG4gIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuXG4gIC8vIGlmIGNvbW1hbmQgdGltZW91dCBpcyAwLCBpdCBpcyBkaXNhYmxlZFxuICBpZiAoIXRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMubm9Db21tYW5kVGltZXIgPSB1dGlsLmNhbmNlbGxhYmxlRGVsYXkodGhpcy5uZXdDb21tYW5kVGltZW91dE1zKTtcbiAgdGhpcy5ub0NvbW1hbmRUaW1lclxuICAgIC50aGVuKGFzeW5jICgpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG4gICAgICBsb2cud2FybihgU2h1dHRpbmcgZG93biBiZWNhdXNlIHdlIHdhaXRlZCBgICtcbiAgICAgICAgICAgICAgIGAke3RoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyAvIDEwMDB9IHNlY29uZHMgZm9yIGEgY29tbWFuZGApO1xuICAgICAgYXdhaXQgdGhpcy5zdGFydFVuZXhwZWN0ZWRTaHV0ZG93bihuZXcgRXJyb3IoYENvbW1hbmQgJHtjbWR9IHRpbWVkIG91dCFgKSk7XG4gICAgfSlcbiAgICAuY2F0Y2goQi5DYW5jZWxsYXRpb25FcnJvciwgKC8qZXJyKi8pID0+IHtcbiAgICAgIC8vIGlnbm9yZVxuICAgIH0pO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3RpbWVvdXQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
