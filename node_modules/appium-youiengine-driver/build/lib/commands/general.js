"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("../utils");

let commands = {};
commands.getPageSource = (0, _asyncToGenerator2.default)(function* () {
  let source;
  let commandObject = {
    name: 'GetSRC'
  };
  let commandJSON = JSON.stringify(commandObject);
  source = yield this.executeSocketCommand(commandJSON);

  if (source) {
    return source.toString();
  } else {
    throw new Error("Bad response from getTreeForXML");
  }
});
commands.getWindowSize = (0, _asyncToGenerator2.default)(function* () {
  let commandObject = {
    name: `getWindowSize`
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = yield this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from window_size");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_WINDOW) {
    throw new Error("Could not find the requested surface");
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new Error("The requested command is not supported in the version of You.i Engine currently running.");
  }

  return result.value;
});
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZ2V0UGFnZVNvdXJjZSIsInNvdXJjZSIsImNvbW1hbmRPYmplY3QiLCJuYW1lIiwiY29tbWFuZEpTT04iLCJKU09OIiwic3RyaW5naWZ5IiwiZXhlY3V0ZVNvY2tldENvbW1hbmQiLCJ0b1N0cmluZyIsIkVycm9yIiwiZ2V0V2luZG93U2l6ZSIsImRhdGEiLCJyZXN1bHQiLCJwYXJzZSIsImUiLCJzdGF0dXMiLCJ5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIiwiV0VCRFJJVkVSX05PX1NVQ0hfV0lORE9XIiwiV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBRUFBLFFBQVEsQ0FBQ0MsYUFBVCxtQ0FBeUIsYUFBa0I7QUFFekMsTUFBSUMsTUFBSjtBQUVBLE1BQUlDLGFBQWEsR0FBRztBQUNsQkMsSUFBQUEsSUFBSSxFQUFFO0FBRFksR0FBcEI7QUFHQSxNQUFJQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixhQUFmLENBQWxCO0FBRUFELEVBQUFBLE1BQU0sU0FBUyxLQUFLTSxvQkFBTCxDQUEwQkgsV0FBMUIsQ0FBZjs7QUFFQSxNQUFJSCxNQUFKLEVBQVk7QUFDVixXQUFPQSxNQUFNLENBQUNPLFFBQVAsRUFBUDtBQUNELEdBRkQsTUFFTztBQUdMLFVBQU0sSUFBSUMsS0FBSixDQUFVLGlDQUFWLENBQU47QUFDRDtBQUNGLENBbEJEO0FBb0JBVixRQUFRLENBQUNXLGFBQVQsbUNBQXlCLGFBQWtCO0FBRXpDLE1BQUlSLGFBQWEsR0FBRztBQUNsQkMsSUFBQUEsSUFBSSxFQUFHO0FBRFcsR0FBcEI7QUFHQSxNQUFJQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixhQUFmLENBQWxCO0FBRUEsTUFBSVMsSUFBSSxTQUFTLEtBQUtKLG9CQUFMLENBQTBCSCxXQUExQixDQUFqQjtBQUVBLE1BQUlRLE1BQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxNQUFNLEdBQUdQLElBQUksQ0FBQ1EsS0FBTCxDQUFXRixJQUFYLENBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJTCxLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNEOztBQUdELE1BQUlHLE1BQU0sQ0FBQ0csTUFBUCxLQUFrQkMsb0NBQTZCQyx3QkFBbkQsRUFBNkU7QUFDM0UsVUFBTSxJQUFJUixLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNELEdBRkQsTUFFTyxJQUFJRyxNQUFNLENBQUNHLE1BQVAsS0FBa0JDLG9DQUE2QkUseUJBQW5ELEVBQThFO0FBQ25GLFVBQU0sSUFBSVQsS0FBSixDQUFVLDBGQUFWLENBQU47QUFDRDs7QUFFRCxTQUFPRyxNQUFNLENBQUNPLEtBQWQ7QUFDRCxDQXhCRDtlQTBCZXBCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuZ2V0UGFnZVNvdXJjZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgc291cmNlO1xuXG4gIGxldCBjb21tYW5kT2JqZWN0ID0ge1xuICAgIG5hbWU6ICdHZXRTUkMnXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIHNvdXJjZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJ1dCB3ZSd2ZSByZWNlaXZlZCBidWcgcmVwb3J0czsgdGhpcyB3aWxsIGhlbHAgdXMgdHJhY2sgZG93blxuICAgIC8vIHdoYXQncyB3cm9uZyBpbiBnZXRUcmVlRm9yWE1MXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gZ2V0VHJlZUZvclhNTFwiKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0V2luZG93U2l6ZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiBgZ2V0V2luZG93U2l6ZWBcbiAgfTtcbiAgbGV0IGNvbW1hbmRKU09OID0gSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iamVjdCk7XG5cbiAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLmV4ZWN1dGVTb2NrZXRDb21tYW5kKGNvbW1hbmRKU09OKTtcblxuICBsZXQgcmVzdWx0O1xuICB0cnkge1xuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVzcG9uc2UgZnJvbSB3aW5kb3dfc2l6ZVwiKTtcbiAgfVxuXG4gIC8vIGdldCBzdGF0dXMgcmV0dXJuZWQgYW5kIGhhbmRsZSBlcnJvcnMgcmV0dXJuZWQgZnJvbSBzZXJ2ZXJcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX05PX1NVQ0hfV0lORE9XKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgdGhlIHJlcXVlc3RlZCBzdXJmYWNlXCIpO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXF1ZXN0ZWQgY29tbWFuZCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSB2ZXJzaW9uIG9mIFlvdS5pIEVuZ2luZSBjdXJyZW50bHkgcnVubmluZy5cIik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LnZhbHVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
