"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

let commands = {};

commands.updateSettings = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (newSettings) {
    if (!this.settings) {
      _logger.default.errorAndThrow('Cannot update settings; settings object not found');
    }

    return yield this.settings.update(newSettings);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.getSettings = (0, _asyncToGenerator2.default)(function* () {
  if (!this.settings) {
    _logger.default.errorAndThrow('Cannot get settings; settings object not found');
  }

  return this.settings.getSettings();
});

commands.setTimeDilation = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (factor) {
    let commandObject = {
      name: `setTimeDilation`,
      args: [`${factor}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from setValue");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');
    }

    return result.value;
  });

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}();

commands.setSourceTreeFilter = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (filter) {
    let commandObject = {
      name: `setSourceTreeFilter`,
      args: [`${filter}`]
    };
    let commandJSON = JSON.stringify(commandObject);
    let data = yield this.executeSocketCommand(commandJSON);
    let result;

    try {
      result = JSON.parse(data);
    } catch (e) {
      throw new Error("Bad response from setValue");
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
      throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');
    }

    if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR) {
      throw new _appiumBaseDriver.errors.InvalidSelectorError("Attribute filter should have following format: [@attributeType='attributeValue']");
    }

    return result.value;
  });

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsInVwZGF0ZVNldHRpbmdzIiwibmV3U2V0dGluZ3MiLCJzZXR0aW5ncyIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJ1cGRhdGUiLCJnZXRTZXR0aW5ncyIsInNldFRpbWVEaWxhdGlvbiIsImZhY3RvciIsImNvbW1hbmRPYmplY3QiLCJuYW1lIiwiYXJncyIsImNvbW1hbmRKU09OIiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJleGVjdXRlU29ja2V0Q29tbWFuZCIsInJlc3VsdCIsInBhcnNlIiwiZSIsIkVycm9yIiwic3RhdHVzIiwieW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcyIsIldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQiLCJlcnJvcnMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwidmFsdWUiLCJzZXRTb3VyY2VUcmVlRmlsdGVyIiwiZmlsdGVyIiwiV0VCRFJJVkVSX0lOVkFMSURfU0VMRUNUT1IiLCJJbnZhbGlkU2VsZWN0b3JFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7QUFFQUEsUUFBUSxDQUFDQyxjQUFUO0FBQUEsNkNBQTBCLFdBQWdCQyxXQUFoQixFQUE2QjtBQUNyRCxRQUFJLENBQUMsS0FBS0MsUUFBVixFQUFvQjtBQUNsQkMsc0JBQUlDLGFBQUosQ0FBa0IsbURBQWxCO0FBQ0Q7O0FBQ0QsaUJBQWEsS0FBS0YsUUFBTCxDQUFjRyxNQUFkLENBQXFCSixXQUFyQixDQUFiO0FBQ0QsR0FMRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFPQUYsUUFBUSxDQUFDTyxXQUFULG1DQUF1QixhQUFrQjtBQUN2QyxNQUFJLENBQUMsS0FBS0osUUFBVixFQUFvQjtBQUNsQkMsb0JBQUlDLGFBQUosQ0FBa0IsZ0RBQWxCO0FBQ0Q7O0FBQ0QsU0FBTyxLQUFLRixRQUFMLENBQWNJLFdBQWQsRUFBUDtBQUNELENBTEQ7O0FBWUFQLFFBQVEsQ0FBQ1EsZUFBVDtBQUFBLDhDQUEyQixXQUFnQkMsTUFBaEIsRUFBd0I7QUFDakQsUUFBSUMsYUFBYSxHQUFHO0FBQ2xCQyxNQUFBQSxJQUFJLEVBQUcsaUJBRFc7QUFFbEJDLE1BQUFBLElBQUksRUFBRSxDQUFFLEdBQUVILE1BQU8sRUFBWDtBQUZZLEtBQXBCO0FBSUEsUUFBSUksV0FBVyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsYUFBZixDQUFsQjtBQUNBLFFBQUlNLElBQUksU0FBUyxLQUFLQyxvQkFBTCxDQUEwQkosV0FBMUIsQ0FBakI7QUFFQSxRQUFJSyxNQUFKOztBQUNBLFFBQUk7QUFDRkEsTUFBQUEsTUFBTSxHQUFHSixJQUFJLENBQUNLLEtBQUwsQ0FBV0gsSUFBWCxDQUFUO0FBQ0QsS0FGRCxDQUVFLE9BQU9JLENBQVAsRUFBVTtBQUNWLFlBQU0sSUFBSUMsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFFRCxRQUFJSCxNQUFNLENBQUNJLE1BQVAsS0FBa0JDLG9DQUE2QkMseUJBQW5ELEVBQThFO0FBQzVFLFlBQU0sSUFBSUMseUJBQU9DLG1CQUFYLENBQStCLCtDQUEvQixDQUFOO0FBQ0Q7O0FBRUQsV0FBT1IsTUFBTSxDQUFDUyxLQUFkO0FBQ0QsR0FwQkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBMEJBM0IsUUFBUSxDQUFDNEIsbUJBQVQ7QUFBQSw4Q0FBK0IsV0FBZ0JDLE1BQWhCLEVBQXdCO0FBQ3JELFFBQUluQixhQUFhLEdBQUc7QUFDbEJDLE1BQUFBLElBQUksRUFBRyxxQkFEVztBQUVsQkMsTUFBQUEsSUFBSSxFQUFFLENBQUUsR0FBRWlCLE1BQU8sRUFBWDtBQUZZLEtBQXBCO0FBSUEsUUFBSWhCLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGFBQWYsQ0FBbEI7QUFDQSxRQUFJTSxJQUFJLFNBQVMsS0FBS0Msb0JBQUwsQ0FBMEJKLFdBQTFCLENBQWpCO0FBRUEsUUFBSUssTUFBSjs7QUFDQSxRQUFJO0FBQ0ZBLE1BQUFBLE1BQU0sR0FBR0osSUFBSSxDQUFDSyxLQUFMLENBQVdILElBQVgsQ0FBVDtBQUNELEtBRkQsQ0FFRSxPQUFPSSxDQUFQLEVBQVU7QUFDVixZQUFNLElBQUlDLEtBQUosQ0FBVSw0QkFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUgsTUFBTSxDQUFDSSxNQUFQLEtBQWtCQyxvQ0FBNkJDLHlCQUFuRCxFQUE4RTtBQUM1RSxZQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxDQUErQiwrQ0FBL0IsQ0FBTjtBQUNEOztBQUNELFFBQUlSLE1BQU0sQ0FBQ0ksTUFBUCxLQUFrQkMsb0NBQTZCTywwQkFBbkQsRUFBK0U7QUFDN0UsWUFBTSxJQUFJTCx5QkFBT00sb0JBQVgsQ0FBZ0Msa0ZBQWhDLENBQU47QUFDRDs7QUFDRCxXQUFPYixNQUFNLENBQUNTLEtBQWQ7QUFDRCxHQXRCRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7ZUF5QmUzQixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMgfSBmcm9tICcuLi91dGlscyc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy51cGRhdGVTZXR0aW5ncyA9IGFzeW5jIGZ1bmN0aW9uIChuZXdTZXR0aW5ncykge1xuICBpZiAoIXRoaXMuc2V0dGluZ3MpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnQ2Fubm90IHVwZGF0ZSBzZXR0aW5nczsgc2V0dGluZ3Mgb2JqZWN0IG5vdCBmb3VuZCcpO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLnNldHRpbmdzLnVwZGF0ZShuZXdTZXR0aW5ncyk7XG59O1xuXG5jb21tYW5kcy5nZXRTZXR0aW5ncyA9IGFzeW5jIGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIGlmICghdGhpcy5zZXR0aW5ncykge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdDYW5ub3QgZ2V0IHNldHRpbmdzOyBzZXR0aW5ncyBvYmplY3Qgbm90IGZvdW5kJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuZ2V0U2V0dGluZ3MoKTtcbn07XG5cbi8vIEFtcGxpZmllcyB0aW1lIG9uIHRoZSBkZXZpY2UgYnkgYSBmYWN0b3Jcbi8vIGV4YW1wbGVzOlxuLy8gMiA9IHR3aWNlIHRoZSBzcGVlZFxuLy8gMSA9IG5vcm1hbCBzcGVlZFxuLy8gMC41ID0gaGFsZiB0aGUgc3BlZWRcbmNvbW1hbmRzLnNldFRpbWVEaWxhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChmYWN0b3IpIHtcbiAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYHNldFRpbWVEaWxhdGlvbmAsXG4gICAgYXJnczogW2Ake2ZhY3Rvcn1gXVxuICB9O1xuICBsZXQgY29tbWFuZEpTT04gPSBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcbiAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLmV4ZWN1dGVTb2NrZXRDb21tYW5kKGNvbW1hbmRKU09OKTtcblxuICBsZXQgcmVzdWx0O1xuICB0cnkge1xuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVzcG9uc2UgZnJvbSBzZXRWYWx1ZVwiKTtcbiAgfVxuXG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgbnVtZXJpYyBhbmQgbGFyZ2VyIHRoYW4gemVybycpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cblxuLy8gU2V0cyB0aGUgYXR0cmlidXRlIHR5cGUvdmFsdWUgdG8gZmlsdGVyIHRoZSBzb3VyY2UgdHJlZVxuLy8gZm9ybWF0OlxuLy8gU291cmNlVHJlZUZpbHRlcjogXCJbQGF0dHJpYnV0ZVR5cGU9J2F0dHJpYnV0ZVZhbHVlJ11cIlxuY29tbWFuZHMuc2V0U291cmNlVHJlZUZpbHRlciA9IGFzeW5jIGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYHNldFNvdXJjZVRyZWVGaWx0ZXJgLFxuICAgIGFyZ3M6IFtgJHtmaWx0ZXJ9YF1cbiAgfTtcbiAgbGV0IGNvbW1hbmRKU09OID0gSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iamVjdCk7XG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gc2V0VmFsdWVcIik7XG4gIH1cblxuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0geW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcy5XRUJEUklWRVJfVU5LTk9XTl9DT01NQU5EKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKCdhcmd1bWVudCBtdXN0IGJlIG51bWVyaWMgYW5kIGxhcmdlciB0aGFuIHplcm8nKTtcbiAgfVxuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0geW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcy5XRUJEUklWRVJfSU5WQUxJRF9TRUxFQ1RPUikge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZFNlbGVjdG9yRXJyb3IoXCJBdHRyaWJ1dGUgZmlsdGVyIHNob3VsZCBoYXZlIGZvbGxvd2luZyBmb3JtYXQ6IFtAYXR0cmlidXRlVHlwZT0nYXR0cmlidXRlVmFsdWUnXVwiKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LnZhbHVlO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3NldHRpbmdzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
