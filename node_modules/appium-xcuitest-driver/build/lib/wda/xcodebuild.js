"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.XcodeBuild = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("./utils");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

const DEFAULT_SIGNING_ID = "iPhone Developer";
const BUILD_TEST_DELAY = 1000;
const RUNNER_SCHEME = 'WebDriverAgentRunner';
const LIB_SCHEME = 'WebDriverAgentLib';

const xcodeLog = _appiumSupport.logger.getLogger('Xcode');

class XcodeBuild {
  constructor(xcodeVersion, device, args = {}) {
    this.xcodeVersion = xcodeVersion;
    this.device = device;
    this.realDevice = args.realDevice;
    this.agentPath = args.agentPath;
    this.bootstrapPath = args.bootstrapPath;
    this.platformVersion = args.platformVersion;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;
    this.prebuildWDA = args.prebuildWDA;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.useSimpleBuildTest = args.useSimpleBuildTest;
    this.useXctestrunFile = args.useXctestrunFile;
    this.launchTimeout = args.launchTimeout;
    this.wdaRemotePort = args.wdaRemotePort;
    this.updatedWDABundleId = args.updatedWDABundleId;
    this.derivedDataPath = args.derivedDataPath;
    this.mjpegServerPort = args.mjpegServerPort;
  }

  init(noSessionProxy) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this.noSessionProxy = noSessionProxy;

      if (_this.useXctestrunFile) {
        if (_this.xcodeVersion.major <= 7) {
          _logger.default.errorAndThrow('useXctestrunFile can only be used with xcode version 8 onwards');
        }

        _this.xctestrunFilePath = yield (0, _utils.setXctestrunFile)(_this.realDevice, _this.device.udid, _this.platformVersion, _this.bootstrapPath, _this.wdaRemotePort);
        return;
      }

      if (_this.xcodeVersion.major === 7 || _this.xcodeVersion.major === 8 && _this.xcodeVersion.minor === 0) {
        _logger.default.debug(`Using Xcode ${_this.xcodeVersion.versionString}, so fixing WDA codebase`);

        yield (0, _utils.fixForXcode7)(_this.bootstrapPath, true);
      }

      if (_this.xcodeVersion.major === 9) {
        _logger.default.debug(`Using Xcode ${_this.xcodeVersion.versionString}, so fixing WDA codebase`);

        yield (0, _utils.fixForXcode9)(_this.bootstrapPath, true);
      }

      if (_this.realDevice) {
        yield (0, _utils.resetProjectFile)(_this.agentPath);

        if (_this.updatedWDABundleId) {
          yield (0, _utils.updateProjectFile)(_this.agentPath, _this.updatedWDABundleId);
        }
      }
    })();
  }

  retrieveDerivedDataPath() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this2.derivedDataPath) {
        return _this2.derivedDataPath;
      }

      let stdout;

      try {
        var _ref = yield (0, _teen_process.exec)('xcodebuild', ['-project', _this2.agentPath, '-showBuildSettings']);

        stdout = _ref.stdout;
      } catch (err) {
        _logger.default.warn(`Cannot retrieve WDA build settings. Original error: ${err.message}`);

        return;
      }

      const pattern = /^\s*BUILD_DIR\s+=\s+(\/.*)/m;
      const match = pattern.exec(stdout);

      if (!match) {
        _logger.default.warn(`Cannot parse WDA build dir from ${_lodash.default.truncate(stdout, {
          length: 300
        })}`);

        return;
      }

      _logger.default.debug(`Parsed BUILD_DIR configuration value: '${match[1]}'`);

      _this2.derivedDataPath = _path.default.dirname(_path.default.dirname(_path.default.normalize(match[1])));

      _logger.default.debug(`Got derived data root: '${_this2.derivedDataPath}'`);

      return _this2.derivedDataPath;
    })();
  }

  reset() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this3.realDevice && _this3.updatedWDABundleId) {
        yield (0, _utils.resetProjectFile)(_this3.agentPath);
      }
    })();
  }

  prebuild() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this4.xcodeVersion.major === 7) {
        _logger.default.debug(`Capability 'prebuildWDA' set, but on xcode version ${_this4.xcodeVersion.versionString} so skipping`);

        return;
      }

      _logger.default.debug('Pre-building WDA before launching test');

      _this4.usePrebuiltWDA = true;
      _this4.xcodebuild = yield _this4.createSubProcess(true);
      yield _this4.start(true);
      _this4.xcodebuild = null;
      yield _bluebird.default.delay(BUILD_TEST_DELAY);
    })();
  }

  cleanProject() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      var _arr = [LIB_SCHEME, RUNNER_SCHEME];

      for (var _i = 0; _i < _arr.length; _i++) {
        const scheme = _arr[_i];

        _logger.default.debug(`Cleaning the project scheme '${scheme}' to make sure there are no leftovers from previous installs`);

        yield (0, _teen_process.exec)('xcodebuild', ['clean', '-project', _this5.agentPath, '-scheme', scheme]);
      }
    })();
  }

  getCommand(buildOnly = false) {
    let cmd = 'xcodebuild';
    let args;

    if (this.xcodeVersion.major < 8) {
      args = ['build', 'test'];
    } else {
      let _ref2 = this.useSimpleBuildTest ? ['build', 'test'] : ['build-for-testing', 'test-without-building'],
          _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          buildCmd = _ref3[0],
          testCmd = _ref3[1];

      if (buildOnly) {
        args = [buildCmd];
      } else if (this.usePrebuiltWDA || this.useXctestrunFile) {
        args = [testCmd];
      } else {
        args = [buildCmd, testCmd];
      }
    }

    if (this.useXctestrunFile) {
      args.push('-xctestrun', this.xctestrunFilePath);
    } else {
      args.push('-project', this.agentPath, '-scheme', RUNNER_SCHEME);

      if (this.derivedDataPath) {
        args.push('-derivedDataPath', this.derivedDataPath);
      }
    }

    args.push('-destination', `id=${this.device.udid}`);
    const versionMatch = new RegExp(/^(\d+)\.(\d+)/).exec(this.platformVersion);

    if (versionMatch) {
      args.push(`IPHONEOS_DEPLOYMENT_TARGET=${versionMatch[1]}.${versionMatch[2]}`);
    } else {
      _logger.default.warn(`Cannot parse major and minor version numbers from platformVersion "${this.platformVersion}". ` + 'Will build for the default platform instead');
    }

    if (this.realDevice && this.xcodeConfigFile) {
      _logger.default.debug(`Using Xcode configuration file: '${this.xcodeConfigFile}'`);

      args.push('-xcconfig', this.xcodeConfigFile);
    }

    return {
      cmd,
      args
    };
  }

  createSubProcess(buildOnly = false) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this6.useXctestrunFile) {
        if (_this6.realDevice) {
          if (_this6.keychainPath && _this6.keychainPassword) {
            yield (0, _utils.setRealDeviceSecurity)(_this6.keychainPath, _this6.keychainPassword);
          }

          if (_this6.xcodeOrgId && _this6.xcodeSigningId && !_this6.xcodeConfigFile) {
            _this6.xcodeConfigFile = yield (0, _utils.generateXcodeConfigFile)(_this6.xcodeOrgId, _this6.xcodeSigningId);
          }
        }
      }

      const _this6$getCommand = _this6.getCommand(buildOnly),
            cmd = _this6$getCommand.cmd,
            args = _this6$getCommand.args;

      _logger.default.debug(`Beginning ${buildOnly ? 'build' : 'test'} with command '${cmd} ${args.join(' ')}' ` + `in directory '${_this6.bootstrapPath}'`);

      const env = Object.assign({}, process.env, {
        USE_PORT: _this6.wdaRemotePort,
        WDA_PRODUCT_BUNDLE_IDENTIFIER: _this6.updatedWDABundleId || _utils.WDA_RUNNER_BUNDLE_ID
      });

      if (_this6.mjpegServerPort) {
        env.MJPEG_SERVER_PORT = _this6.mjpegServerPort;
      }

      const upgradeTimestamp = yield (0, _utils.getWDAUpgradeTimestamp)(_this6.bootstrapPath);

      if (upgradeTimestamp) {
        env.UPGRADE_TIMESTAMP = upgradeTimestamp;
      }

      const xcodebuild = new _teen_process.SubProcess(cmd, args, {
        cwd: _this6.bootstrapPath,
        env,
        detached: true,
        stdio: ['ignore', 'pipe', 'pipe']
      });
      let logXcodeOutput = _this6.showXcodeLog;

      _logger.default.debug(`Output from xcodebuild ${logXcodeOutput ? 'will' : 'will not'} be logged. To change this, use 'showXcodeLog' desired capability`);

      xcodebuild.on('output', (stdout, stderr) => {
        let out = stdout || stderr;

        if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
          xcodebuild.logLocation = _lodash.default.first(_lodash.default.remove(out.trim().split('\n'), v => v.indexOf(_path.default.sep) === 0));

          _logger.default.debug(`Log file for xcodebuild test: ${xcodebuild.logLocation}`);
        }

        if (out.indexOf('Error Domain=') !== -1 && out.indexOf('Error writing attachment data to file') === -1 && out.indexOf('Failed to remove screenshot at path') === -1) {
          logXcodeOutput = true;
          xcodebuild._wda_error_occurred = true;
        }

        if (logXcodeOutput) {
          if (out.indexOf('Error writing attachment data to file') === -1) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = out.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                let line = _step.value;
                xcodeLog.info(line);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        }
      });
      return xcodebuild;
    })();
  }

  start(buildOnly = false) {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this7.xcodebuild = yield _this7.createSubProcess(buildOnly);
      return yield new _bluebird.default((resolve, reject) => {
        _this7.xcodebuild.on('exit', function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* (code, signal) {
            _logger.default.info(`xcodebuild exited with code '${code}' and signal '${signal}'`);

            if (_this7.showXcodeLog && _this7.xcodebuild.logLocation) {
              xcodeLog.info(`Contents of xcodebuild log file '${_this7.xcodebuild.logLocation}':`);

              try {
                let data = yield _appiumSupport.fs.readFile(_this7.xcodebuild.logLocation, 'utf8');
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = data.split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    let line = _step2.value;
                    xcodeLog.info(line);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              } catch (err) {
                _logger.default.debug(`Unable to access xcodebuild log file: '${err.message}'`);
              }
            }

            _this7.xcodebuild.processExited = true;

            if (_this7.xcodebuild._wda_error_occurred || !signal && code !== 0) {
              return reject(new Error(`xcodebuild failed with code ${code}`));
            }

            if (buildOnly) {
              return resolve();
            }
          });

          return function (_x, _x2) {
            return _ref4.apply(this, arguments);
          };
        }());

        return (0, _asyncToGenerator2.default)(function* () {
          try {
            let startTime = process.hrtime();
            yield _this7.xcodebuild.start(true);

            if (!buildOnly) {
              let status = yield _this7.waitForStart(startTime);
              resolve(status);
            }
          } catch (err) {
            let msg = `Unable to start WebDriverAgent: ${err}`;

            _logger.default.error(msg);

            reject(new Error(msg));
          }
        })();
      });
    })();
  }

  waitForStart(startTime) {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Waiting up to ${_this8.launchTimeout}ms for WebDriverAgent to start`);

      let currentStatus = null;

      try {
        let retries = parseInt(_this8.launchTimeout / 500, 10);
        yield (0, _asyncbox.retryInterval)(retries, 1000, (0, _asyncToGenerator2.default)(function* () {
          if (_this8.xcodebuild.processExited) {
            return;
          }

          const proxyTimeout = _this8.noSessionProxy.timeout;
          _this8.noSessionProxy.timeout = 1000;

          try {
            currentStatus = yield _this8.noSessionProxy.command('/status', 'GET');

            if (currentStatus && currentStatus.ios && currentStatus.ios.ip) {
              _this8.agentUrl = currentStatus.ios.ip;
            }

            _logger.default.debug(`WebDriverAgent information:`);

            _logger.default.debug(JSON.stringify(currentStatus, null, 2));
          } catch (err) {
            throw new Error(`Unable to connect to running WebDriverAgent: ${err.message}`);
          } finally {
            _this8.noSessionProxy.timeout = proxyTimeout;
          }
        }));

        if (_this8.xcodebuild.processExited) {
          return currentStatus;
        }

        let endTime = process.hrtime(startTime);
        let startupTime = parseInt((endTime[0] * 1e9 + endTime[1]) / 1e6, 10);

        _logger.default.debug(`WebDriverAgent successfully started after ${startupTime}ms`);
      } catch (err) {
        _logger.default.debug(err.message);

        _logger.default.warn(`Getting status of WebDriverAgent on device timed out. Continuing`);
      }

      return currentStatus;
    })();
  }

  quit() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _utils.killProcess)('xcodebuild', _this9.xcodebuild);
    })();
  }

}

exports.XcodeBuild = XcodeBuild;
var _default = XcodeBuild;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
