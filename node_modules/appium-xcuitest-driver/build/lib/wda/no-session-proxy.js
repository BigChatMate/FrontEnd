"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NoSessionProxy = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

class NoSessionProxy extends _appiumBaseDriver.JWProxy {
  constructor(opts = {}) {
    super(opts);
  }

  getUrlForProxy(url) {
    if (url === '') {
      url = '/';
    }

    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;
    let remainingUrl = '';

    if (new RegExp('^/').test(url)) {
      remainingUrl = url;
    } else {
      throw new Error(`Did not know what to do with url '${url}'`);
    }

    remainingUrl = remainingUrl.replace(/\/$/, '');
    return proxyBase + remainingUrl;
  }

  proxyReqRes(req, res) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let _ref = yield _this.proxy(req.originalUrl, req.method, req.body),
          _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          response = _ref2[0],
          body = _ref2[1];

      res.headers = response.headers;
      res.set('Content-type', response.headers['content-type']);
      body = _appiumSupport.util.safeJsonParse(body);
      res.status(response.statusCode).send(JSON.stringify(body));
    })();
  }

}

exports.NoSessionProxy = NoSessionProxy;
var _default = NoSessionProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZGEvbm8tc2Vzc2lvbi1wcm94eS5qcyJdLCJuYW1lcyI6WyJOb1Nlc3Npb25Qcm94eSIsIkpXUHJveHkiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJnZXRVcmxGb3JQcm94eSIsInVybCIsInByb3h5QmFzZSIsInNjaGVtZSIsInNlcnZlciIsInBvcnQiLCJiYXNlIiwicmVtYWluaW5nVXJsIiwiUmVnRXhwIiwidGVzdCIsIkVycm9yIiwicmVwbGFjZSIsInByb3h5UmVxUmVzIiwicmVxIiwicmVzIiwicHJveHkiLCJvcmlnaW5hbFVybCIsIm1ldGhvZCIsImJvZHkiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJzZXQiLCJ1dGlsIiwic2FmZUpzb25QYXJzZSIsInN0YXR1cyIsInN0YXR1c0NvZGUiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLE1BQU1BLGNBQU4sU0FBNkJDLHlCQUE3QixDQUFxQztBQUNuQ0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCLFVBQU1BLElBQU47QUFDRDs7QUFFREMsRUFBQUEsY0FBYyxDQUFFQyxHQUFGLEVBQU87QUFDbkIsUUFBSUEsR0FBRyxLQUFLLEVBQVosRUFBZ0I7QUFDZEEsTUFBQUEsR0FBRyxHQUFHLEdBQU47QUFDRDs7QUFDRCxVQUFNQyxTQUFTLEdBQUksR0FBRSxLQUFLQyxNQUFPLE1BQUssS0FBS0MsTUFBTyxJQUFHLEtBQUtDLElBQUssR0FBRSxLQUFLQyxJQUFLLEVBQTNFO0FBQ0EsUUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLFFBQUssSUFBSUMsTUFBSixDQUFXLElBQVgsQ0FBRCxDQUFtQkMsSUFBbkIsQ0FBd0JSLEdBQXhCLENBQUosRUFBa0M7QUFDaENNLE1BQUFBLFlBQVksR0FBR04sR0FBZjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sSUFBSVMsS0FBSixDQUFXLHFDQUFvQ1QsR0FBSSxHQUFuRCxDQUFOO0FBQ0Q7O0FBQ0RNLElBQUFBLFlBQVksR0FBR0EsWUFBWSxDQUFDSSxPQUFiLENBQXFCLEtBQXJCLEVBQTRCLEVBQTVCLENBQWY7QUFDQSxXQUFPVCxTQUFTLEdBQUdLLFlBQW5CO0FBQ0Q7O0FBRUtLLEVBQUFBLFdBQU4sQ0FBbUJDLEdBQW5CLEVBQXdCQyxHQUF4QixFQUE2QjtBQUFBOztBQUFBO0FBQUEsdUJBQ0UsS0FBSSxDQUFDQyxLQUFMLENBQVdGLEdBQUcsQ0FBQ0csV0FBZixFQUE0QkgsR0FBRyxDQUFDSSxNQUFoQyxFQUF3Q0osR0FBRyxDQUFDSyxJQUE1QyxDQURGO0FBQUE7QUFBQSxVQUN0QkMsUUFEc0I7QUFBQSxVQUNaRCxJQURZOztBQUUzQkosTUFBQUEsR0FBRyxDQUFDTSxPQUFKLEdBQWNELFFBQVEsQ0FBQ0MsT0FBdkI7QUFDQU4sTUFBQUEsR0FBRyxDQUFDTyxHQUFKLENBQVEsY0FBUixFQUF3QkYsUUFBUSxDQUFDQyxPQUFULENBQWlCLGNBQWpCLENBQXhCO0FBQ0FGLE1BQUFBLElBQUksR0FBR0ksb0JBQUtDLGFBQUwsQ0FBbUJMLElBQW5CLENBQVA7QUFDQUosTUFBQUEsR0FBRyxDQUFDVSxNQUFKLENBQVdMLFFBQVEsQ0FBQ00sVUFBcEIsRUFBZ0NDLElBQWhDLENBQXFDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVYsSUFBZixDQUFyQztBQUwyQjtBQU01Qjs7QUExQmtDOzs7ZUE4QnRCdEIsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBKV1Byb3h5IH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuXG5jbGFzcyBOb1Nlc3Npb25Qcm94eSBleHRlbmRzIEpXUHJveHkge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG4gIH1cblxuICBnZXRVcmxGb3JQcm94eSAodXJsKSB7XG4gICAgaWYgKHVybCA9PT0gJycpIHtcbiAgICAgIHVybCA9ICcvJztcbiAgICB9XG4gICAgY29uc3QgcHJveHlCYXNlID0gYCR7dGhpcy5zY2hlbWV9Oi8vJHt0aGlzLnNlcnZlcn06JHt0aGlzLnBvcnR9JHt0aGlzLmJhc2V9YDtcbiAgICBsZXQgcmVtYWluaW5nVXJsID0gJyc7XG4gICAgaWYgKChuZXcgUmVnRXhwKCdeLycpKS50ZXN0KHVybCkpIHtcbiAgICAgIHJlbWFpbmluZ1VybCA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEaWQgbm90IGtub3cgd2hhdCB0byBkbyB3aXRoIHVybCAnJHt1cmx9J2ApO1xuICAgIH1cbiAgICByZW1haW5pbmdVcmwgPSByZW1haW5pbmdVcmwucmVwbGFjZSgvXFwvJC8sICcnKTsgLy8gY2FuJ3QgaGF2ZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmV0dXJuIHByb3h5QmFzZSArIHJlbWFpbmluZ1VybDtcbiAgfVxuXG4gIGFzeW5jIHByb3h5UmVxUmVzIChyZXEsIHJlcykge1xuICAgIGxldCBbcmVzcG9uc2UsIGJvZHldID0gYXdhaXQgdGhpcy5wcm94eShyZXEub3JpZ2luYWxVcmwsIHJlcS5tZXRob2QsIHJlcS5ib2R5KTtcbiAgICByZXMuaGVhZGVycyA9IHJlc3BvbnNlLmhlYWRlcnM7XG4gICAgcmVzLnNldCgnQ29udGVudC10eXBlJywgcmVzcG9uc2UuaGVhZGVyc1snY29udGVudC10eXBlJ10pO1xuICAgIGJvZHkgPSB1dGlsLnNhZmVKc29uUGFyc2UoYm9keSk7XG4gICAgcmVzLnN0YXR1cyhyZXNwb25zZS5zdGF0dXNDb2RlKS5zZW5kKEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcbiAgfVxufVxuXG5leHBvcnQgeyBOb1Nlc3Npb25Qcm94eSB9O1xuZXhwb3J0IGRlZmF1bHQgTm9TZXNzaW9uUHJveHk7XG4iXSwiZmlsZSI6ImxpYi93ZGEvbm8tc2Vzc2lvbi1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
