"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.iProxy = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("./utils");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

const IPROXY_TIMEOUT = 5000;

const iproxyLog = _appiumSupport.logger.getLogger('iProxy');

class iProxy {
  constructor(udid, localport, deviceport) {
    _logger.default.debug(`Starting iproxy to forward traffic from local port ${localport} to device port ${deviceport} over USB ` + `for the device ${udid}`);

    this.expectIProxyErrors = true;
    this.iproxy = new _teen_process.SubProcess('iproxy', [localport, deviceport, udid], {
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });
  }

  start() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this.expectIProxyErrors = true;
      return yield new _bluebird.default((resolve, reject) => {
        _this.iproxy.on('exit', code => {
          _logger.default.debug(`iproxy exited with code '${code}'`);

          if (code) {
            return reject(new Error(`iproxy exited with code '${code}'`));
          }
        });

        _this.iproxy.on('output', (stdout, stderr) => {
          if (_this.expectIProxyErrors) {
            return;
          }

          let out = stdout || stderr;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = out.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              let line = _step.value;

              if (!line.length) {
                continue;
              }

              if (line.indexOf('Resource temporarily unavailable') !== -1) {
                _logger.default.debug('Connection to WDA timed out');
              } else {
                iproxyLog.debug(line);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });

        return (0, _asyncToGenerator2.default)(function* () {
          try {
            yield _this.iproxy.start(IPROXY_TIMEOUT, true);
            resolve();
          } catch (err) {
            _logger.default.error(`Error starting iproxy: '${err.message}'`);

            reject(new Error('Unable to start iproxy. Is it installed?'));
          }
        })();
      });
    })();
  }

  quit() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _utils.killProcess)('iproxy', _this2.iproxy);
      _this2.expectIProxyErrors = true;
    })();
  }

}

exports.iProxy = iProxy;
var _default = iProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZGEvaXByb3h5LmpzIl0sIm5hbWVzIjpbIklQUk9YWV9USU1FT1VUIiwiaXByb3h5TG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiaVByb3h5IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwibG9jYWxwb3J0IiwiZGV2aWNlcG9ydCIsImxvZyIsImRlYnVnIiwiZXhwZWN0SVByb3h5RXJyb3JzIiwiaXByb3h5IiwiU3ViUHJvY2VzcyIsImRldGFjaGVkIiwic3RkaW8iLCJzdGFydCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwib24iLCJjb2RlIiwiRXJyb3IiLCJzdGRvdXQiLCJzdGRlcnIiLCJvdXQiLCJzcGxpdCIsImxpbmUiLCJsZW5ndGgiLCJpbmRleE9mIiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwicXVpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxjQUFjLEdBQUcsSUFBdkI7O0FBRUEsTUFBTUMsU0FBUyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixRQUFqQixDQUFsQjs7QUFFQSxNQUFNQyxNQUFOLENBQWE7QUFDWEMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFNBQVIsRUFBbUJDLFVBQW5CLEVBQStCO0FBQ3hDQyxvQkFBSUMsS0FBSixDQUFXLHNEQUFxREgsU0FBVSxtQkFBa0JDLFVBQVcsWUFBN0YsR0FDUCxrQkFBaUJGLElBQUssRUFEekI7O0FBRUEsU0FBS0ssa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsSUFBSUMsd0JBQUosQ0FBZSxRQUFmLEVBQXlCLENBQUNOLFNBQUQsRUFBWUMsVUFBWixFQUF3QkYsSUFBeEIsQ0FBekIsRUFBd0Q7QUFDcEVRLE1BQUFBLFFBQVEsRUFBRSxJQUQwRDtBQUVwRUMsTUFBQUEsS0FBSyxFQUFFLENBQUMsUUFBRCxFQUFXLE1BQVgsRUFBbUIsTUFBbkI7QUFGNkQsS0FBeEQsQ0FBZDtBQUlEOztBQUVLQyxFQUFBQSxLQUFOLEdBQWU7QUFBQTs7QUFBQTtBQUNiLE1BQUEsS0FBSSxDQUFDTCxrQkFBTCxHQUEwQixJQUExQjtBQUVBLG1CQUFhLElBQUlNLGlCQUFKLENBQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFFBQUEsS0FBSSxDQUFDUCxNQUFMLENBQVlRLEVBQVosQ0FBZSxNQUFmLEVBQXdCQyxJQUFELElBQVU7QUFDL0JaLDBCQUFJQyxLQUFKLENBQVcsNEJBQTJCVyxJQUFLLEdBQTNDOztBQUNBLGNBQUlBLElBQUosRUFBVTtBQUNSLG1CQUFPRixNQUFNLENBQUMsSUFBSUcsS0FBSixDQUFXLDRCQUEyQkQsSUFBSyxHQUEzQyxDQUFELENBQWI7QUFDRDtBQUNGLFNBTEQ7O0FBTUEsUUFBQSxLQUFJLENBQUNULE1BQUwsQ0FBWVEsRUFBWixDQUFlLFFBQWYsRUFBeUIsQ0FBQ0csTUFBRCxFQUFTQyxNQUFULEtBQW9CO0FBRTNDLGNBQUksS0FBSSxDQUFDYixrQkFBVCxFQUE2QjtBQUMzQjtBQUNEOztBQUVELGNBQUljLEdBQUcsR0FBR0YsTUFBTSxJQUFJQyxNQUFwQjtBQU4yQztBQUFBO0FBQUE7O0FBQUE7QUFPM0MsaUNBQWlCQyxHQUFHLENBQUNDLEtBQUosQ0FBVSxJQUFWLENBQWpCLDhIQUFrQztBQUFBLGtCQUF6QkMsSUFBeUI7O0FBQ2hDLGtCQUFJLENBQUNBLElBQUksQ0FBQ0MsTUFBVixFQUFrQjtBQUNoQjtBQUNEOztBQUVELGtCQUFJRCxJQUFJLENBQUNFLE9BQUwsQ0FBYSxrQ0FBYixNQUFxRCxDQUFDLENBQTFELEVBQTZEO0FBRzNEcEIsZ0NBQUlDLEtBQUosQ0FBVSw2QkFBVjtBQUNELGVBSkQsTUFJTztBQUNMVCxnQkFBQUEsU0FBUyxDQUFDUyxLQUFWLENBQWdCaUIsSUFBaEI7QUFDRDtBQUNGO0FBbkIwQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0I1QyxTQXBCRDs7QUFzQkEsZUFBTyxnQ0FBQyxhQUFZO0FBQ2xCLGNBQUk7QUFDRixrQkFBTSxLQUFJLENBQUNmLE1BQUwsQ0FBWUksS0FBWixDQUFrQmhCLGNBQWxCLEVBQWtDLElBQWxDLENBQU47QUFDQWtCLFlBQUFBLE9BQU87QUFDUixXQUhELENBR0UsT0FBT1ksR0FBUCxFQUFZO0FBQ1pyQiw0QkFBSXNCLEtBQUosQ0FBVywyQkFBMEJELEdBQUcsQ0FBQ0UsT0FBUSxHQUFqRDs7QUFDQWIsWUFBQUEsTUFBTSxDQUFDLElBQUlHLEtBQUosQ0FBVSwwQ0FBVixDQUFELENBQU47QUFDRDtBQUNGLFNBUk0sR0FBUDtBQVNELE9BdENZLENBQWI7QUFIYTtBQTBDZDs7QUFFS1csRUFBQUEsSUFBTixHQUFjO0FBQUE7O0FBQUE7QUFDWixZQUFNLHdCQUFZLFFBQVosRUFBc0IsTUFBSSxDQUFDckIsTUFBM0IsQ0FBTjtBQUNBLE1BQUEsTUFBSSxDQUFDRCxrQkFBTCxHQUEwQixJQUExQjtBQUZZO0FBR2I7O0FBMURVOzs7ZUE4REVQLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBraWxsUHJvY2VzcyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cblxuY29uc3QgSVBST1hZX1RJTUVPVVQgPSA1MDAwO1xuXG5jb25zdCBpcHJveHlMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdpUHJveHknKTtcblxuY2xhc3MgaVByb3h5IHtcbiAgY29uc3RydWN0b3IgKHVkaWQsIGxvY2FscG9ydCwgZGV2aWNlcG9ydCkge1xuICAgIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgaXByb3h5IHRvIGZvcndhcmQgdHJhZmZpYyBmcm9tIGxvY2FsIHBvcnQgJHtsb2NhbHBvcnR9IHRvIGRldmljZSBwb3J0ICR7ZGV2aWNlcG9ydH0gb3ZlciBVU0IgYCArXG4gICAgICBgZm9yIHRoZSBkZXZpY2UgJHt1ZGlkfWApO1xuICAgIHRoaXMuZXhwZWN0SVByb3h5RXJyb3JzID0gdHJ1ZTtcbiAgICB0aGlzLmlwcm94eSA9IG5ldyBTdWJQcm9jZXNzKCdpcHJveHknLCBbbG9jYWxwb3J0LCBkZXZpY2Vwb3J0LCB1ZGlkXSwge1xuICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdwaXBlJ10sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzdGFydCAoKSB7XG4gICAgdGhpcy5leHBlY3RJUHJveHlFcnJvcnMgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuaXByb3h5Lm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgICAgbG9nLmRlYnVnKGBpcHJveHkgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfSdgKTtcbiAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgaXByb3h5IGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nYCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaXByb3h5Lm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgLy8gZG8gbm90aGluZyBpZiB3ZSBleHBlY3QgZXJyb3JzXG4gICAgICAgIGlmICh0aGlzLmV4cGVjdElQcm94eUVycm9ycykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvdXQgPSBzdGRvdXQgfHwgc3RkZXJyO1xuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIG91dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgICBpZiAoIWxpbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGluZS5pbmRleE9mKCdSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZScpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gdGhpcyBnZW5lcmFsbHkgaGFwcGVucyB3aGVuIFdEQSBkb2VzIG5vdCByZXNwb25kLFxuICAgICAgICAgICAgLy8gc28gcHJpbnQgYSBtb3JlIHVzZWZ1bCBtZXNzYWdlXG4gICAgICAgICAgICBsb2cuZGVidWcoJ0Nvbm5lY3Rpb24gdG8gV0RBIHRpbWVkIG91dCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpcHJveHlMb2cuZGVidWcobGluZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5pcHJveHkuc3RhcnQoSVBST1hZX1RJTUVPVVQsIHRydWUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGBFcnJvciBzdGFydGluZyBpcHJveHk6ICcke2Vyci5tZXNzYWdlfSdgKTtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gc3RhcnQgaXByb3h5LiBJcyBpdCBpbnN0YWxsZWQ/JykpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcXVpdCAoKSB7XG4gICAgYXdhaXQga2lsbFByb2Nlc3MoJ2lwcm94eScsIHRoaXMuaXByb3h5KTtcbiAgICB0aGlzLmV4cGVjdElQcm94eUVycm9ycyA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgaVByb3h5IH07XG5leHBvcnQgZGVmYXVsdCBpUHJveHk7XG4iXSwiZmlsZSI6ImxpYi93ZGEvaXByb3h5LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
