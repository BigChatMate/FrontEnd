"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProjectFile = updateProjectFile;
exports.resetProjectFile = resetProjectFile;
exports.checkForDependencies = checkForDependencies;
exports.setRealDeviceSecurity = setRealDeviceSecurity;
exports.fixForXcode7 = fixForXcode7;
exports.fixForXcode9 = fixForXcode9;
exports.generateXcodeConfigFile = generateXcodeConfigFile;
exports.setXctestrunFile = setXctestrunFile;
exports.killProcess = killProcess;
exports.randomInt = randomInt;
exports.getWDAUpgradeTimestamp = getWDAUpgradeTimestamp;
exports.WDA_RUNNER_BUNDLE_ID = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const WDA_RUNNER_BUNDLE_ID = 'com.facebook.WebDriverAgentRunner';
exports.WDA_RUNNER_BUNDLE_ID = WDA_RUNNER_BUNDLE_ID;
const PROJECT_FILE = 'project.pbxproj';
const XCUICOORDINATE_FILE = 'PrivateHeaders/XCTest/XCUICoordinate.h';
const FBMACROS_FILE = 'WebDriverAgentLib/Utilities/FBMacros.h';
const XCUIAPPLICATION_FILE = 'PrivateHeaders/XCTest/XCUIApplication.h';
const FBSESSION_FILE = 'WebDriverAgentLib/Routing/FBSession.m';
const CARTHAGE_ROOT = 'Carthage';

function replaceInFile(_x, _x2, _x3) {
  return _replaceInFile.apply(this, arguments);
}

function _replaceInFile() {
  _replaceInFile = (0, _asyncToGenerator2.default)(function* (file, find, replace) {
    let contents = yield _appiumSupport.fs.readFile(file, 'utf8');
    let newContents = contents.replace(find, replace);

    if (newContents !== contents) {
      yield _appiumSupport.fs.writeFile(file, newContents, 'utf8');
    }
  });
  return _replaceInFile.apply(this, arguments);
}

function updateProjectFile(_x4, _x5) {
  return _updateProjectFile.apply(this, arguments);
}

function _updateProjectFile() {
  _updateProjectFile = (0, _asyncToGenerator2.default)(function* (agentPath, newBundleId) {
    let projectFilePath = `${agentPath}/${PROJECT_FILE}`;

    try {
      yield _appiumSupport.fs.copyFile(projectFilePath, `${projectFilePath}.old`);
      yield replaceInFile(projectFilePath, new RegExp(WDA_RUNNER_BUNDLE_ID.replace('.', '\.'), 'g'), newBundleId);

      _logger.default.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);
    } catch (err) {
      _logger.default.debug(`Error updating project file: ${err.message}`);

      _logger.default.warn(`Unable to update project file '${projectFilePath}' with ` + `bundle id '${newBundleId}'. WebDriverAgent may not start`);
    }
  });
  return _updateProjectFile.apply(this, arguments);
}

function resetProjectFile(_x6) {
  return _resetProjectFile.apply(this, arguments);
}

function _resetProjectFile() {
  _resetProjectFile = (0, _asyncToGenerator2.default)(function* (agentPath) {
    let projectFilePath = `${agentPath}/${PROJECT_FILE}`;

    try {
      if (!(yield _appiumSupport.fs.exists(`${projectFilePath}.old`))) {
        return;
      }

      yield _appiumSupport.fs.mv(`${projectFilePath}.old`, projectFilePath);

      _logger.default.debug(`Successfully reset '${projectFilePath}' with bundle id '${WDA_RUNNER_BUNDLE_ID}'`);
    } catch (err) {
      _logger.default.debug(`Error resetting project file: ${err.message}`);

      _logger.default.warn(`Unable to reset project file '${projectFilePath}' with ` + `bundle id '${WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` + `modified and not returned to the original state.`);
    }
  });
  return _resetProjectFile.apply(this, arguments);
}

function checkForDependencies(_x7) {
  return _checkForDependencies.apply(this, arguments);
}

function _checkForDependencies() {
  _checkForDependencies = (0, _asyncToGenerator2.default)(function* (bootstrapPath, useSsl = false) {
    try {
      let carthagePath = yield _appiumSupport.fs.which('carthage');

      _logger.default.debug(`Carthage found: '${carthagePath}'`);
    } catch (err) {
      _logger.default.errorAndThrow('Carthage binary is not found. Install using `brew install carthage` if it is not installed ' + 'and make sure the root folder, where carthage binary is installed, is present in PATH environment variable. ' + `The current PATH value: '${process.env.PATH ? process.env.PATH : "<not defined for the Appium process>"}'`);
    }

    const carthageRoot = _path.default.resolve(bootstrapPath, CARTHAGE_ROOT);

    let areDependenciesUpdated = false;

    if (!(yield _appiumSupport.fs.hasAccess(carthageRoot))) {
      _logger.default.debug('Running WebDriverAgent bootstrap script to install dependencies');

      try {
        let args = useSsl ? ['-d', '-D'] : ['-d'];
        yield (0, _teen_process.exec)('Scripts/bootstrap.sh', args, {
          cwd: bootstrapPath
        });
        areDependenciesUpdated = true;
      } catch (err) {
        var _arr = ['stdout', 'stderr'];

        for (var _i = 0; _i < _arr.length; _i++) {
          let std = _arr[_i];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = (err[std] || '').split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              let line = _step.value;

              if (!line.length) {
                continue;
              }

              _logger.default.error(line);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        yield _appiumSupport.fs.rimraf(carthageRoot);
        throw err;
      }
    }

    if (!(yield _appiumSupport.fs.hasAccess(`${bootstrapPath}/Resources`))) {
      _logger.default.debug('Creating WebDriverAgent resources directory');

      yield _appiumSupport.fs.mkdir(`${bootstrapPath}/Resources`);
      areDependenciesUpdated = true;
    }

    if (!(yield _appiumSupport.fs.hasAccess(`${bootstrapPath}/Resources/WebDriverAgent.bundle`))) {
      _logger.default.debug('Creating WebDriverAgent resource bundle directory');

      yield _appiumSupport.fs.mkdir(`${bootstrapPath}/Resources/WebDriverAgent.bundle`);
      areDependenciesUpdated = true;
    }

    return areDependenciesUpdated;
  });
  return _checkForDependencies.apply(this, arguments);
}

function setRealDeviceSecurity(_x8, _x9) {
  return _setRealDeviceSecurity.apply(this, arguments);
}

function _setRealDeviceSecurity() {
  _setRealDeviceSecurity = (0, _asyncToGenerator2.default)(function* (keychainPath, keychainPassword) {
    _logger.default.debug('Setting security for iOS device');

    yield (0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]);
    yield (0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);
    yield (0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);
  });
  return _setRealDeviceSecurity.apply(this, arguments);
}

function fixXCUICoordinateFile(_x10) {
  return _fixXCUICoordinateFile.apply(this, arguments);
}

function _fixXCUICoordinateFile() {
  _fixXCUICoordinateFile = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true) {
    const file = _path.default.resolve(bootstrapPath, XCUICOORDINATE_FILE);

    let oldDef = '- (void)pressForDuration:(double)arg1 thenDragToCoordinate:(id)arg2;';
    let newDef = '- (void)pressForDuration:(NSTimeInterval)duration thenDragToCoordinate:(XCUICoordinate *)otherCoordinate;';

    if (!initial) {
      var _ref = [newDef, oldDef];
      oldDef = _ref[0];
      newDef = _ref[1];
    }

    yield replaceInFile(file, oldDef, newDef);
  });
  return _fixXCUICoordinateFile.apply(this, arguments);
}

function fixFBSessionFile(_x11) {
  return _fixFBSessionFile.apply(this, arguments);
}

function _fixFBSessionFile() {
  _fixFBSessionFile = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true) {
    const file = _path.default.resolve(bootstrapPath, FBSESSION_FILE);

    let oldLine = 'return [FBApplication fb_activeApplication] ?: self.testedApplication;';
    let newLine = 'FBApplication *application = [FBApplication fb_activeApplication] ?: self.testedApplication;\n' + '  return application;';

    if (!initial) {
      var _ref2 = [newLine, oldLine];
      oldLine = _ref2[0];
      newLine = _ref2[1];
    }

    yield replaceInFile(file, oldLine, newLine);
  });
  return _fixFBSessionFile.apply(this, arguments);
}

function fixForXcode7(_x12) {
  return _fixForXcode.apply(this, arguments);
}

function _fixForXcode() {
  _fixForXcode = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true, fixXcode9 = true) {
    if (fixXcode9) {
      yield fixForXcode9(bootstrapPath, !initial, false);
    }

    yield fixXCUICoordinateFile(bootstrapPath, initial);
    yield fixFBSessionFile(bootstrapPath, initial);
  });
  return _fixForXcode.apply(this, arguments);
}

function fixFBMacrosFile(_x13) {
  return _fixFBMacrosFile.apply(this, arguments);
}

function _fixFBMacrosFile() {
  _fixFBMacrosFile = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true) {
    const file = _path.default.resolve(bootstrapPath, FBMACROS_FILE);

    let oldDef = '#define FBStringify(class, property) ({if(NO){[class.new property];} @#property;})';
    let newDef = '#define FBStringify(class, property) ({@#property;})';

    if (!initial) {
      var _ref3 = [newDef, oldDef];
      oldDef = _ref3[0];
      newDef = _ref3[1];
    }

    yield replaceInFile(file, oldDef, newDef);
  });
  return _fixFBMacrosFile.apply(this, arguments);
}

function fixXCUIApplicationFile(_x14) {
  return _fixXCUIApplicationFile.apply(this, arguments);
}

function _fixXCUIApplicationFile() {
  _fixXCUIApplicationFile = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true) {
    const file = _path.default.resolve(bootstrapPath, XCUIAPPLICATION_FILE);

    let oldDef = '@property(nonatomic, readonly) NSUInteger state; // @synthesize state=_state;';
    let newDef = '@property XCUIApplicationState state;';

    if (!initial) {
      var _ref4 = [newDef, oldDef];
      oldDef = _ref4[0];
      newDef = _ref4[1];
    }

    yield replaceInFile(file, oldDef, newDef);
  });
  return _fixXCUIApplicationFile.apply(this, arguments);
}

function fixForXcode9(_x15) {
  return _fixForXcode2.apply(this, arguments);
}

function _fixForXcode2() {
  _fixForXcode2 = (0, _asyncToGenerator2.default)(function* (bootstrapPath, initial = true, fixXcode7 = true) {
    if (fixXcode7) {
      yield fixForXcode7(bootstrapPath, !initial, false);
    }

    yield fixFBMacrosFile(bootstrapPath, initial);
    yield fixXCUIApplicationFile(bootstrapPath, initial);
  });
  return _fixForXcode2.apply(this, arguments);
}

function generateXcodeConfigFile(_x16, _x17) {
  return _generateXcodeConfigFile.apply(this, arguments);
}

function _generateXcodeConfigFile() {
  _generateXcodeConfigFile = (0, _asyncToGenerator2.default)(function* (orgId, signingId) {
    _logger.default.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` + `'${signingId}'`);

    let contents = `DEVELOPMENT_TEAM = ${orgId}
CODE_SIGN_IDENTITY = ${signingId}
`;
    let xcconfigPath = yield _appiumSupport.tempDir.path('appium-temp.xcconfig');

    _logger.default.debug(`Writing xcode config file to ${xcconfigPath}`);

    yield _appiumSupport.fs.writeFile(xcconfigPath, contents, "utf8");
    return xcconfigPath;
  });
  return _generateXcodeConfigFile.apply(this, arguments);
}

function setXctestrunFile(_x18, _x19, _x20, _x21, _x22) {
  return _setXctestrunFile.apply(this, arguments);
}

function _setXctestrunFile() {
  _setXctestrunFile = (0, _asyncToGenerator2.default)(function* (isRealDevice, udid, platformVersion, bootstrapPath, wdaRemotePort) {
    let xctestrunDeviceFileName = `${udid}_${platformVersion}.xctestrun`;

    let xctestrunFilePath = _path.default.resolve(bootstrapPath, xctestrunDeviceFileName);

    if (!(yield _appiumSupport.fs.exists(xctestrunFilePath))) {
      let xctestBaseFileName = isRealDevice ? `WebDriverAgentRunner_iphoneos${platformVersion}-arm64.xctestrun` : `WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun`;

      let originalXctestrunFile = _path.default.resolve(bootstrapPath, xctestBaseFileName);

      if (!(yield _appiumSupport.fs.exists(originalXctestrunFile))) {
        _logger.default.errorAndThrow(`if you are using useXctestrunFile capability then you need to have ${originalXctestrunFile} file`);
      }

      yield _appiumSupport.fs.copyFile(originalXctestrunFile, xctestrunFilePath);
    }

    let xctestRunContent = yield _appiumSupport.plist.parsePlistFile(xctestrunFilePath);
    let updateWDAPort = {
      WebDriverAgentRunner: {
        EnvironmentVariables: {
          USE_PORT: wdaRemotePort
        }
      }
    };

    let newXctestRunContent = _lodash.default.merge(xctestRunContent, updateWDAPort);

    yield _appiumSupport.plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);
    return xctestrunFilePath;
  });
  return _setXctestrunFile.apply(this, arguments);
}

function killProcess(_x23, _x24) {
  return _killProcess.apply(this, arguments);
}

function _killProcess() {
  _killProcess = (0, _asyncToGenerator2.default)(function* (name, proc) {
    if (proc && proc.proc) {
      _logger.default.info(`Shutting down ${name} process (pid ${proc.proc.pid})`);

      try {
        yield proc.stop('SIGTERM', 1000);
      } catch (err) {
        if (err.message.indexOf(`Process didn't end after`) === -1) {
          throw err;
        }

        _logger.default.debug(`${name} process did not end in a timely fashion: '${err.message}'. ` + `Sending 'SIGKILL'...`);

        try {
          yield proc.stop('SIGKILL');
        } catch (err) {
          if (err.message.indexOf('not currently running') !== -1) {
            return;
          }

          throw err;
        }
      }
    }
  });
  return _killProcess.apply(this, arguments);
}

function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}

function getWDAUpgradeTimestamp(_x25) {
  return _getWDAUpgradeTimestamp.apply(this, arguments);
}

function _getWDAUpgradeTimestamp() {
  _getWDAUpgradeTimestamp = (0, _asyncToGenerator2.default)(function* (bootstrapPath) {
    const carthageRootPath = _path.default.resolve(bootstrapPath, CARTHAGE_ROOT);

    if (yield _appiumSupport.fs.exists(carthageRootPath)) {
      const _ref5 = yield _appiumSupport.fs.stat(carthageRootPath),
            mtime = _ref5.mtime;

      return mtime.getTime();
    }

    return null;
  });
  return _getWDAUpgradeTimestamp.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
