"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.runRealDeviceReset = runRealDeviceReset;
exports.installToRealDevice = installToRealDevice;
exports.getRealDeviceObj = getRealDeviceObj;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _iosDeploy = _interopRequireDefault(require("./ios-deploy"));

var _logger = _interopRequireDefault(require("./logger"));

function getConnectedDevices() {
  return _getConnectedDevices.apply(this, arguments);
}

function _getConnectedDevices() {
  _getConnectedDevices = (0, _asyncToGenerator2.default)(function* () {
    try {
      let _ref = yield (0, _teen_process.exec)('idevice_id', ['-l']),
          stdout = _ref.stdout;

      return stdout.trim().split('\n');
    } catch (err) {
      if (err.message.indexOf(`Command 'idevice_id' not found`) === -1) {
        throw err;
      }

      let msg = `The 'idevice_id' program is not installed. If you are running ` + `a real device test it is necessary. Install with 'brew install ` + `libimobiledevice --HEAD'`;

      _logger.default.warn(msg);

      return [];
    }
  });
  return _getConnectedDevices.apply(this, arguments);
}

function resetRealDevice(_x, _x2) {
  return _resetRealDevice.apply(this, arguments);
}

function _resetRealDevice() {
  _resetRealDevice = (0, _asyncToGenerator2.default)(function* (device, opts) {
    if (!opts.bundleId || !opts.fullReset) {
      return;
    }

    let bundleId = opts.bundleId;

    _logger.default.debug(`Reset: fullReset requested. Will try to uninstall the app '${bundleId}'.`);

    if (!(yield device.isAppInstalled(bundleId))) {
      _logger.default.debug('Reset: app not installed. No need to uninstall');

      return;
    }

    try {
      yield device.remove(bundleId);
    } catch (err) {
      _logger.default.error(`Reset: could not remove '${bundleId}' from device: ${err.message}`);

      throw err;
    }

    _logger.default.debug(`Reset: removed '${bundleId}'`);
  });
  return _resetRealDevice.apply(this, arguments);
}

function runRealDeviceReset(_x3, _x4) {
  return _runRealDeviceReset.apply(this, arguments);
}

function _runRealDeviceReset() {
  _runRealDeviceReset = (0, _asyncToGenerator2.default)(function* (device, opts) {
    if (!opts.noReset || opts.fullReset) {
      _logger.default.debug('Reset: running ios real device reset flow');

      if (!opts.noReset) {
        yield resetRealDevice(device, opts);
      }
    } else {
      _logger.default.debug('Reset: fullReset not set. Leaving as is');
    }
  });
  return _runRealDeviceReset.apply(this, arguments);
}

function installToRealDevice(_x5, _x6, _x7) {
  return _installToRealDevice.apply(this, arguments);
}

function _installToRealDevice() {
  _installToRealDevice = (0, _asyncToGenerator2.default)(function* (device, app, bundleId, noReset = true) {
    if (!device.udid || !app) {
      _logger.default.debug('No device id or app, not installing to real device.');

      return;
    }

    if (yield device.isAppInstalled(bundleId)) {
      if (noReset) {
        _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

        return;
      }

      _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

      yield device.remove(bundleId);
    }

    _logger.default.debug(`Installing '${app}' on device with UUID '${device.udid}'...`);

    yield device.install(app);

    _logger.default.debug('The app has been installed successfully.');
  });
  return _installToRealDevice.apply(this, arguments);
}

function getRealDeviceObj(_x8) {
  return _getRealDeviceObj.apply(this, arguments);
}

function _getRealDeviceObj() {
  _getRealDeviceObj = (0, _asyncToGenerator2.default)(function* (udid) {
    _logger.default.debug(`Creating iDevice object with udid '${udid}'`);

    try {
      let device = new _iosDeploy.default(udid);
      yield device.checkStatus();
      return device;
    } catch (e) {
      let msg = 'Could not initialize ios-deploy make sure it is installed ' + '(npm install -g ios-deploy) and works on your system.';

      _logger.default.errorAndThrow(msg);
    }
  });
  return _getRealDeviceObj.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIl0sIm5hbWVzIjpbImdldENvbm5lY3RlZERldmljZXMiLCJzdGRvdXQiLCJ0cmltIiwic3BsaXQiLCJlcnIiLCJtZXNzYWdlIiwiaW5kZXhPZiIsIm1zZyIsImxvZyIsIndhcm4iLCJyZXNldFJlYWxEZXZpY2UiLCJkZXZpY2UiLCJvcHRzIiwiYnVuZGxlSWQiLCJmdWxsUmVzZXQiLCJkZWJ1ZyIsImlzQXBwSW5zdGFsbGVkIiwicmVtb3ZlIiwiZXJyb3IiLCJydW5SZWFsRGV2aWNlUmVzZXQiLCJub1Jlc2V0IiwiaW5zdGFsbFRvUmVhbERldmljZSIsImFwcCIsInVkaWQiLCJpbnN0YWxsIiwiZ2V0UmVhbERldmljZU9iaiIsIklPU0RlcGxveSIsImNoZWNrU3RhdHVzIiwiZSIsImVycm9yQW5kVGhyb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O1NBR2VBLG1COzs7Ozt5REFBZixhQUFzQztBQUNwQyxRQUFJO0FBQUEsdUJBQ21CLHdCQUFLLFlBQUwsRUFBbUIsQ0FBQyxJQUFELENBQW5CLENBRG5CO0FBQUEsVUFDR0MsTUFESCxRQUNHQSxNQURIOztBQUVGLGFBQU9BLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjQyxLQUFkLENBQW9CLElBQXBCLENBQVA7QUFDRCxLQUhELENBR0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1osVUFBSUEsR0FBRyxDQUFDQyxPQUFKLENBQVlDLE9BQVosQ0FBcUIsZ0NBQXJCLE1BQTBELENBQUMsQ0FBL0QsRUFBa0U7QUFDaEUsY0FBTUYsR0FBTjtBQUNEOztBQUNELFVBQUlHLEdBQUcsR0FBSSxnRUFBRCxHQUNDLGlFQURELEdBRUMsMEJBRlg7O0FBR0FDLHNCQUFJQyxJQUFKLENBQVNGLEdBQVQ7O0FBQ0EsYUFBTyxFQUFQO0FBQ0Q7QUFDRixHOzs7O1NBRWNHLGU7Ozs7O3FEQUFmLFdBQWdDQyxNQUFoQyxFQUF3Q0MsSUFBeEMsRUFBOEM7QUFDNUMsUUFBSSxDQUFDQSxJQUFJLENBQUNDLFFBQU4sSUFBa0IsQ0FBQ0QsSUFBSSxDQUFDRSxTQUE1QixFQUF1QztBQUNyQztBQUNEOztBQUVELFFBQUlELFFBQVEsR0FBR0QsSUFBSSxDQUFDQyxRQUFwQjs7QUFDQUwsb0JBQUlPLEtBQUosQ0FBVyw4REFBNkRGLFFBQVMsSUFBakY7O0FBQ0EsUUFBSSxRQUFPRixNQUFNLENBQUNLLGNBQVAsQ0FBc0JILFFBQXRCLENBQVAsQ0FBSixFQUE0QztBQUMxQ0wsc0JBQUlPLEtBQUosQ0FBVSxnREFBVjs7QUFDQTtBQUNEOztBQUNELFFBQUk7QUFDRixZQUFNSixNQUFNLENBQUNNLE1BQVAsQ0FBY0osUUFBZCxDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9ULEdBQVAsRUFBWTtBQUNaSSxzQkFBSVUsS0FBSixDQUFXLDRCQUEyQkwsUUFBUyxrQkFBaUJULEdBQUcsQ0FBQ0MsT0FBUSxFQUE1RTs7QUFDQSxZQUFNRCxHQUFOO0FBQ0Q7O0FBQ0RJLG9CQUFJTyxLQUFKLENBQVcsbUJBQWtCRixRQUFTLEdBQXRDO0FBQ0QsRzs7OztTQUVjTSxrQjs7Ozs7d0RBQWYsV0FBbUNSLE1BQW5DLEVBQTJDQyxJQUEzQyxFQUFpRDtBQUMvQyxRQUFJLENBQUNBLElBQUksQ0FBQ1EsT0FBTixJQUFpQlIsSUFBSSxDQUFDRSxTQUExQixFQUFxQztBQUNuQ04sc0JBQUlPLEtBQUosQ0FBVSwyQ0FBVjs7QUFDQSxVQUFJLENBQUNILElBQUksQ0FBQ1EsT0FBVixFQUFtQjtBQUNqQixjQUFNVixlQUFlLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxDQUFyQjtBQUNEO0FBQ0YsS0FMRCxNQUtPO0FBQ0xKLHNCQUFJTyxLQUFKLENBQVUseUNBQVY7QUFDRDtBQUNGLEc7Ozs7U0FFY00sbUI7Ozs7O3lEQUFmLFdBQW9DVixNQUFwQyxFQUE0Q1csR0FBNUMsRUFBaURULFFBQWpELEVBQTJETyxPQUFPLEdBQUcsSUFBckUsRUFBMkU7QUFDekUsUUFBSSxDQUFDVCxNQUFNLENBQUNZLElBQVIsSUFBZ0IsQ0FBQ0QsR0FBckIsRUFBMEI7QUFDeEJkLHNCQUFJTyxLQUFKLENBQVUscURBQVY7O0FBQ0E7QUFDRDs7QUFFRCxjQUFVSixNQUFNLENBQUNLLGNBQVAsQ0FBc0JILFFBQXRCLENBQVYsRUFBMkM7QUFDekMsVUFBSU8sT0FBSixFQUFhO0FBQ1haLHdCQUFJTyxLQUFKLENBQVcsUUFBT0YsUUFBUywrQ0FBM0I7O0FBQ0E7QUFDRDs7QUFDREwsc0JBQUlPLEtBQUosQ0FBVywwQ0FBeUNGLFFBQVMsbUJBQTdEOztBQUNBLFlBQU1GLE1BQU0sQ0FBQ00sTUFBUCxDQUFjSixRQUFkLENBQU47QUFDRDs7QUFDREwsb0JBQUlPLEtBQUosQ0FBVyxlQUFjTyxHQUFJLDBCQUF5QlgsTUFBTSxDQUFDWSxJQUFLLE1BQWxFOztBQUNBLFVBQU1aLE1BQU0sQ0FBQ2EsT0FBUCxDQUFlRixHQUFmLENBQU47O0FBQ0FkLG9CQUFJTyxLQUFKLENBQVUsMENBQVY7QUFDRCxHOzs7O1NBRWNVLGdCOzs7OztzREFBZixXQUFpQ0YsSUFBakMsRUFBdUM7QUFDckNmLG9CQUFJTyxLQUFKLENBQVcsc0NBQXFDUSxJQUFLLEdBQXJEOztBQUNBLFFBQUk7QUFFRixVQUFJWixNQUFNLEdBQUcsSUFBSWUsa0JBQUosQ0FBY0gsSUFBZCxDQUFiO0FBQ0EsWUFBTVosTUFBTSxDQUFDZ0IsV0FBUCxFQUFOO0FBQ0EsYUFBT2hCLE1BQVA7QUFDRCxLQUxELENBS0UsT0FBT2lCLENBQVAsRUFBVTtBQUNWLFVBQUlyQixHQUFHLEdBQUcsK0RBQ0EsdURBRFY7O0FBRUFDLHNCQUFJcUIsYUFBSixDQUFrQnRCLEdBQWxCO0FBQ0Q7QUFDRixHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgSU9TRGVwbG95IGZyb20gJy4vaW9zLWRlcGxveSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWREZXZpY2VzICgpIHtcbiAgdHJ5IHtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdpZGV2aWNlX2lkJywgWyctbCddKTtcbiAgICByZXR1cm4gc3Rkb3V0LnRyaW0oKS5zcGxpdCgnXFxuJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKGBDb21tYW5kICdpZGV2aWNlX2lkJyBub3QgZm91bmRgKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgbGV0IG1zZyA9IGBUaGUgJ2lkZXZpY2VfaWQnIHByb2dyYW0gaXMgbm90IGluc3RhbGxlZC4gSWYgeW91IGFyZSBydW5uaW5nIGAgK1xuICAgICAgICAgICAgICBgYSByZWFsIGRldmljZSB0ZXN0IGl0IGlzIG5lY2Vzc2FyeS4gSW5zdGFsbCB3aXRoICdicmV3IGluc3RhbGwgYCArXG4gICAgICAgICAgICAgIGBsaWJpbW9iaWxlZGV2aWNlIC0tSEVBRCdgO1xuICAgIGxvZy53YXJuKG1zZyk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0UmVhbERldmljZSAoZGV2aWNlLCBvcHRzKSB7XG4gIGlmICghb3B0cy5idW5kbGVJZCB8fCAhb3B0cy5mdWxsUmVzZXQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgYnVuZGxlSWQgPSBvcHRzLmJ1bmRsZUlkO1xuICBsb2cuZGVidWcoYFJlc2V0OiBmdWxsUmVzZXQgcmVxdWVzdGVkLiBXaWxsIHRyeSB0byB1bmluc3RhbGwgdGhlIGFwcCAnJHtidW5kbGVJZH0nLmApO1xuICBpZiAoIWF3YWl0IGRldmljZS5pc0FwcEluc3RhbGxlZChidW5kbGVJZCkpIHtcbiAgICBsb2cuZGVidWcoJ1Jlc2V0OiBhcHAgbm90IGluc3RhbGxlZC4gTm8gbmVlZCB0byB1bmluc3RhbGwnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBkZXZpY2UucmVtb3ZlKGJ1bmRsZUlkKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKGBSZXNldDogY291bGQgbm90IHJlbW92ZSAnJHtidW5kbGVJZH0nIGZyb20gZGV2aWNlOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIHRocm93IGVycjtcbiAgfVxuICBsb2cuZGVidWcoYFJlc2V0OiByZW1vdmVkICcke2J1bmRsZUlkfSdgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuUmVhbERldmljZVJlc2V0IChkZXZpY2UsIG9wdHMpIHtcbiAgaWYgKCFvcHRzLm5vUmVzZXQgfHwgb3B0cy5mdWxsUmVzZXQpIHtcbiAgICBsb2cuZGVidWcoJ1Jlc2V0OiBydW5uaW5nIGlvcyByZWFsIGRldmljZSByZXNldCBmbG93Jyk7XG4gICAgaWYgKCFvcHRzLm5vUmVzZXQpIHtcbiAgICAgIGF3YWl0IHJlc2V0UmVhbERldmljZShkZXZpY2UsIG9wdHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2cuZGVidWcoJ1Jlc2V0OiBmdWxsUmVzZXQgbm90IHNldC4gTGVhdmluZyBhcyBpcycpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluc3RhbGxUb1JlYWxEZXZpY2UgKGRldmljZSwgYXBwLCBidW5kbGVJZCwgbm9SZXNldCA9IHRydWUpIHtcbiAgaWYgKCFkZXZpY2UudWRpZCB8fCAhYXBwKSB7XG4gICAgbG9nLmRlYnVnKCdObyBkZXZpY2UgaWQgb3IgYXBwLCBub3QgaW5zdGFsbGluZyB0byByZWFsIGRldmljZS4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXdhaXQgZGV2aWNlLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgIGlmIChub1Jlc2V0KSB7XG4gICAgICBsb2cuZGVidWcoYEFwcCAnJHtidW5kbGVJZH0nIGlzIGFscmVhZHkgaW5zdGFsbGVkLiBObyBuZWVkIHRvIHJlaW5zdGFsbC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBSZXNldCByZXF1ZXN0ZWQuIFJlbW92aW5nIGFwcCB3aXRoIGlkICcke2J1bmRsZUlkfScgZnJvbSB0aGUgZGV2aWNlYCk7XG4gICAgYXdhaXQgZGV2aWNlLnJlbW92ZShidW5kbGVJZCk7XG4gIH1cbiAgbG9nLmRlYnVnKGBJbnN0YWxsaW5nICcke2FwcH0nIG9uIGRldmljZSB3aXRoIFVVSUQgJyR7ZGV2aWNlLnVkaWR9Jy4uLmApO1xuICBhd2FpdCBkZXZpY2UuaW5zdGFsbChhcHApO1xuICBsb2cuZGVidWcoJ1RoZSBhcHAgaGFzIGJlZW4gaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseS4nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVhbERldmljZU9iaiAodWRpZCkge1xuICBsb2cuZGVidWcoYENyZWF0aW5nIGlEZXZpY2Ugb2JqZWN0IHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgdHJ5IHtcbiAgICAvL1RoaXMgaURldmljZSBvYmplY3QgY291bGQgYmUgaWRldmljZWluc3RhbGxlciAobm9kZS1pZGV2aWNlKSBmb3IgZnV0dXJlIG9uY2Ugd2UgaGF2ZSBpZGV2aWNlaW5zdGFsbGVyIHdvcmtpbmcgZm9yIGlvcyAxMFxuICAgIGxldCBkZXZpY2UgPSBuZXcgSU9TRGVwbG95KHVkaWQpO1xuICAgIGF3YWl0IGRldmljZS5jaGVja1N0YXR1cygpO1xuICAgIHJldHVybiBkZXZpY2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsZXQgbXNnID0gJ0NvdWxkIG5vdCBpbml0aWFsaXplIGlvcy1kZXBsb3kgbWFrZSBzdXJlIGl0IGlzIGluc3RhbGxlZCAnICtcbiAgICAgICAgICAgICAgJyhucG0gaW5zdGFsbCAtZyBpb3MtZGVwbG95KSBhbmQgd29ya3Mgb24geW91ciBzeXN0ZW0uJztcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldENvbm5lY3RlZERldmljZXMsIHJ1blJlYWxEZXZpY2VSZXNldCwgaW5zdGFsbFRvUmVhbERldmljZSxcbiAgZ2V0UmVhbERldmljZU9iaiB9O1xuIl0sImZpbGUiOiJsaWIvcmVhbC1kZXZpY2UtbWFuYWdlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
