"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.runSimulatorReset = runSimulatorReset;
exports.installToSimulator = installToSimulator;
exports.shutdownSimulator = shutdownSimulator;
exports.shutdownOtherSimulators = shutdownOtherSimulators;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _nodeSimctl = require("node-simctl");

var _utils = require("./utils");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

const INSTALL_DAEMON_CACHE = 'com.apple.mobile.installd.staging';

function createSim(_x) {
  return _createSim.apply(this, arguments);
}

function _createSim() {
  _createSim = (0, _asyncToGenerator2.default)(function* (caps) {
    const appiumTestDeviceName = `appiumTest-${caps.deviceName}`;
    const udid = yield (0, _nodeSimctl.createDevice)(appiumTestDeviceName, caps.deviceName, caps.platformVersion);
    return yield (0, _appiumIosSimulator.getSimulator)(udid);
  });
  return _createSim.apply(this, arguments);
}

function getExistingSim(_x2) {
  return _getExistingSim.apply(this, arguments);
}

function _getExistingSim() {
  _getExistingSim = (0, _asyncToGenerator2.default)(function* (opts) {
    const devices = yield (0, _nodeSimctl.getDevices)(opts.platformVersion);
    const appiumTestDeviceName = `appiumTest-${opts.deviceName}`;
    let appiumTestDevice;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.values(devices)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const device = _step.value;

        if (device.name === opts.deviceName) {
          return yield (0, _appiumIosSimulator.getSimulator)(device.udid);
        }

        if (device.name === appiumTestDeviceName) {
          appiumTestDevice = device;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (appiumTestDevice) {
      _logger.default.warn(`Unable to find device '${opts.deviceName}'. Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);

      return yield (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid);
    }

    return null;
  });
  return _getExistingSim.apply(this, arguments);
}

function shutdownSimulator(_x3) {
  return _shutdownSimulator.apply(this, arguments);
}

function _shutdownSimulator() {
  _shutdownSimulator = (0, _asyncToGenerator2.default)(function* (device) {
    yield (0, _utils.resetXCTestProcesses)(device.udid, true);
    yield device.shutdown();
  });
  return _shutdownSimulator.apply(this, arguments);
}

function runSimulatorReset(_x4, _x5) {
  return _runSimulatorReset.apply(this, arguments);
}

function _runSimulatorReset() {
  _runSimulatorReset = (0, _asyncToGenerator2.default)(function* (device, opts) {
    if (opts.noReset && !opts.fullReset) {
      _logger.default.debug('Reset: noReset is on. Leaving simulator as is');

      return;
    }

    if (!device) {
      _logger.default.debug('Reset: no device available. Skipping');

      return;
    }

    if (opts.fullReset) {
      _logger.default.debug('Reset: fullReset is on. Cleaning simulator');

      yield shutdownSimulator(device);
      let isKeychainsBackupSuccessful = false;

      if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
        isKeychainsBackupSuccessful = yield device.backupKeychains();
      }

      yield device.clean();

      if (isKeychainsBackupSuccessful) {
        yield device.restoreKeychains(opts.keychainsExcludePatterns || []);

        _logger.default.info(`Successfully restored keychains after full reset`);
      } else if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
        _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
      }
    } else if (opts.bundleId) {
      if (yield device.isRunning()) {
        if (device.xcodeVersion.major >= 8) {
          try {
            yield (0, _nodeSimctl.terminate)(device.udid, opts.bundleId);
          } catch (err) {
            _logger.default.warn(`Reset: failed to terminate Simulator application with id "${opts.bundleId}"`);
          }
        } else {
          yield shutdownSimulator(device);
        }
      }

      if (opts.app) {
        _logger.default.info('Not scrubbing third party app in anticipation of uninstall');

        return;
      }

      const isSafari = (opts.browserName || '').toLowerCase() === 'safari';

      try {
        if (isSafari) {
          yield device.cleanSafari();
        } else {
          yield device.scrubCustomApp(_path.default.basename(opts.app), opts.bundleId);
        }
      } catch (err) {
        _logger.default.warn(err.message);

        _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. Leaving as is.`);
      }
    }
  });
  return _runSimulatorReset.apply(this, arguments);
}

function installToSimulator(_x6, _x7, _x8) {
  return _installToSimulator.apply(this, arguments);
}

function _installToSimulator() {
  _installToSimulator = (0, _asyncToGenerator2.default)(function* (device, app, bundleId, noReset = true) {
    if (!app) {
      _logger.default.debug('No app path is given. Nothing to install.');

      return;
    }

    if (bundleId) {
      if (yield device.isAppInstalled(bundleId)) {
        if (noReset) {
          _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

          return;
        }

        _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

        yield device.removeApp(bundleId);
      }
    }

    const installdCacheRoot = _path.default.resolve(device.getDir(), 'Library', 'Caches', INSTALL_DAEMON_CACHE);

    let tmpRoot = null;

    if (yield _appiumSupport.fs.exists(installdCacheRoot)) {
      tmpRoot = yield _appiumSupport.tempDir.openDir();

      _logger.default.debug('Cleaning installd cache to save the disk space');

      yield _appiumSupport.fs.mv(installdCacheRoot, _path.default.resolve(tmpRoot, INSTALL_DAEMON_CACHE), {
        mkdirp: true
      });
      yield (0, _appiumSupport.mkdirp)(installdCacheRoot);
    }

    _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);

    try {
      try {
        yield device.installApp(app);
      } catch (e) {
        _logger.default.info(`Got an error on '${app}' install: ${e.message}`);

        if (e.message.includes('domain=MIInstallerErrorDomain, code=35') && tmpRoot) {
          _logger.default.info(`installd requires the cache to be available in order to install '${app}'. ` + `Restoring the cache`);

          yield _appiumSupport.fs.rimraf(installdCacheRoot);
          yield _appiumSupport.fs.mv(_path.default.resolve(tmpRoot, INSTALL_DAEMON_CACHE), installdCacheRoot, {
            mkdirp: true
          });
        }

        _logger.default.info('Retrying application install');

        yield device.installApp(app);
      }

      _logger.default.debug('The app has been installed successfully.');
    } finally {
      if (tmpRoot && (yield _appiumSupport.fs.exists(tmpRoot))) {
        yield _appiumSupport.fs.rimraf(tmpRoot);
      }
    }
  });
  return _installToSimulator.apply(this, arguments);
}

function shutdownOtherSimulators(_x9) {
  return _shutdownOtherSimulators.apply(this, arguments);
}

function _shutdownOtherSimulators() {
  _shutdownOtherSimulators = (0, _asyncToGenerator2.default)(function* (currentDevice) {
    const allDevices = _lodash.default.flatMap(_lodash.default.values((yield (0, _nodeSimctl.getDevices)())));

    const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');

    if (_lodash.default.isEmpty(otherBootedDevices)) {
      _logger.default.info('No other running simulators have been detected');

      return;
    }

    _logger.default.info(`Detected ${otherBootedDevices.length} other running Simulator${otherBootedDevices.length === 1 ? '' : 's'}.` + `Shutting ${otherBootedDevices.length === 1 ? 'it' : 'them'} down...`);

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = otherBootedDevices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const udid = _step2.value.udid;
        yield (0, _utils.resetXCTestProcesses)(udid, true);
        yield (0, _nodeSimctl.shutdown)(udid);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });
  return _shutdownOtherSimulators.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3ItbWFuYWdlbWVudC5qcyJdLCJuYW1lcyI6WyJJTlNUQUxMX0RBRU1PTl9DQUNIRSIsImNyZWF0ZVNpbSIsImNhcHMiLCJhcHBpdW1UZXN0RGV2aWNlTmFtZSIsImRldmljZU5hbWUiLCJ1ZGlkIiwicGxhdGZvcm1WZXJzaW9uIiwiZ2V0RXhpc3RpbmdTaW0iLCJvcHRzIiwiZGV2aWNlcyIsImFwcGl1bVRlc3REZXZpY2UiLCJfIiwidmFsdWVzIiwiZGV2aWNlIiwibmFtZSIsImxvZyIsIndhcm4iLCJzaHV0ZG93blNpbXVsYXRvciIsInNodXRkb3duIiwicnVuU2ltdWxhdG9yUmVzZXQiLCJub1Jlc2V0IiwiZnVsbFJlc2V0IiwiZGVidWciLCJpc0tleWNoYWluc0JhY2t1cFN1Y2Nlc3NmdWwiLCJrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMiLCJrZWVwS2V5Q2hhaW5zIiwiYmFja3VwS2V5Y2hhaW5zIiwiY2xlYW4iLCJyZXN0b3JlS2V5Y2hhaW5zIiwiaW5mbyIsImJ1bmRsZUlkIiwiaXNSdW5uaW5nIiwieGNvZGVWZXJzaW9uIiwibWFqb3IiLCJlcnIiLCJhcHAiLCJpc1NhZmFyaSIsImJyb3dzZXJOYW1lIiwidG9Mb3dlckNhc2UiLCJjbGVhblNhZmFyaSIsInNjcnViQ3VzdG9tQXBwIiwicGF0aCIsImJhc2VuYW1lIiwibWVzc2FnZSIsImluc3RhbGxUb1NpbXVsYXRvciIsImlzQXBwSW5zdGFsbGVkIiwicmVtb3ZlQXBwIiwiaW5zdGFsbGRDYWNoZVJvb3QiLCJyZXNvbHZlIiwiZ2V0RGlyIiwidG1wUm9vdCIsImZzIiwiZXhpc3RzIiwidGVtcERpciIsIm9wZW5EaXIiLCJtdiIsIm1rZGlycCIsImluc3RhbGxBcHAiLCJlIiwiaW5jbHVkZXMiLCJyaW1yYWYiLCJzaHV0ZG93bk90aGVyU2ltdWxhdG9ycyIsImN1cnJlbnREZXZpY2UiLCJhbGxEZXZpY2VzIiwiZmxhdE1hcCIsIm90aGVyQm9vdGVkRGV2aWNlcyIsImZpbHRl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REFBZixXQUF3Q0MsYUFBeEMsRUFBdUQ7QUFDckQsVUFBTUMsVUFBVSxHQUFHcEQsZ0JBQUVxRCxPQUFGLENBQVVyRCxnQkFBRUMsTUFBRixRQUFlLDZCQUFmLEVBQVYsQ0FBbkI7O0FBQ0EsVUFBTXFELGtCQUFrQixHQUFHRixVQUFVLENBQUNHLE1BQVgsQ0FBbUJyRCxNQUFELElBQVlBLE1BQU0sQ0FBQ1IsSUFBUCxLQUFnQnlELGFBQWEsQ0FBQ3pELElBQTlCLElBQXNDUSxNQUFNLENBQUNzRCxLQUFQLEtBQWlCLFFBQXJGLENBQTNCOztBQUNBLFFBQUl4RCxnQkFBRXlELE9BQUYsQ0FBVUgsa0JBQVYsQ0FBSixFQUFtQztBQUNqQ2xELHNCQUFJYyxJQUFKLENBQVMsZ0RBQVQ7O0FBQ0E7QUFDRDs7QUFDRGQsb0JBQUljLElBQUosQ0FBVSxZQUFXb0Msa0JBQWtCLENBQUNJLE1BQU8sMkJBQTBCSixrQkFBa0IsQ0FBQ0ksTUFBbkIsS0FBOEIsQ0FBOUIsR0FBa0MsRUFBbEMsR0FBdUMsR0FBSSxHQUEzRyxHQUNDLFlBQVdKLGtCQUFrQixDQUFDSSxNQUFuQixLQUE4QixDQUE5QixHQUFrQyxJQUFsQyxHQUF5QyxNQUFPLFVBRHJFOztBQVBxRDtBQUFBO0FBQUE7O0FBQUE7QUFTckQsNEJBQXFCSixrQkFBckIsbUlBQXlDO0FBQUEsY0FBN0I1RCxJQUE2QixnQkFBN0JBLElBQTZCO0FBR3ZDLGNBQU0saUNBQXFCQSxJQUFyQixFQUEyQixJQUEzQixDQUFOO0FBQ0EsY0FBTSwwQkFBU0EsSUFBVCxDQUFOO0FBQ0Q7QUFkb0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWV0RCxHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBnZXRTaW11bGF0b3IgfSBmcm9tICdhcHBpdW0taW9zLXNpbXVsYXRvcic7XG5pbXBvcnQgeyBjcmVhdGVEZXZpY2UsIGdldERldmljZXMsIHRlcm1pbmF0ZSwgc2h1dGRvd24gfSBmcm9tICdub2RlLXNpbWN0bCc7XG5pbXBvcnQgeyByZXNldFhDVGVzdFByb2Nlc3NlcyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgdGVtcERpciwgZnMsIG1rZGlycCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgSU5TVEFMTF9EQUVNT05fQ0FDSEUgPSAnY29tLmFwcGxlLm1vYmlsZS5pbnN0YWxsZC5zdGFnaW5nJztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2ltdWxhdG9yIHdpdGggYGFwcGl1bVRlc3QtYCBwcmVmaXggYW5kIHJldHVybiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjYXBzIC0gQ2FwYWJpbGl0eSBzZXQgYnkgYSB1c2VyLiBUaGUgb3B0aW9ucyBhdmFpbGFibGUgYXJlOlxuICogICAtIGBkZXZpY2VOYW1lYCAtIGEgbmFtZSBmb3IgdGhlIGRldmljZVxuICogICAtIGBwbGF0Zm9ybVZlcnNpb25gIC0gdGhlIHZlcnNpb24gb2YgaU9TIHRvIHVzZVxuICogQHJldHVybnMge29iamVjdH0gU2ltdWxhdG9yIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIHVkaWQgcGFzc2VkIGluLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTaW0gKGNhcHMpIHtcbiAgY29uc3QgYXBwaXVtVGVzdERldmljZU5hbWUgPSBgYXBwaXVtVGVzdC0ke2NhcHMuZGV2aWNlTmFtZX1gO1xuICBjb25zdCB1ZGlkID0gYXdhaXQgY3JlYXRlRGV2aWNlKGFwcGl1bVRlc3REZXZpY2VOYW1lLCBjYXBzLmRldmljZU5hbWUsIGNhcHMucGxhdGZvcm1WZXJzaW9uKTtcbiAgcmV0dXJuIGF3YWl0IGdldFNpbXVsYXRvcih1ZGlkKTtcbn1cblxuLyoqXG4gKiBHZXQgYSBzaW11bGF0b3Igd2hpY2ggaXMgYWxyZWFkeSBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gQ2FwYWJpbGl0eSBzZXQgYnkgYSB1c2VyLiBUaGUgb3B0aW9ucyBhdmFpbGFibGUgYXJlOlxuICogICAtIGBkZXZpY2VOYW1lYCAtIGEgbmFtZSBmb3IgdGhlIGRldmljZVxuICogICAtIGBwbGF0Zm9ybVZlcnNpb25gIC0gdGhlIHZlcnNpb24gb2YgaU9TIHRvIHVzZVxuICogQHJldHVybnMgez9vYmplY3R9IFNpbXVsYXRvciBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSB1ZGlkIHBhc3NlZCBpbi4gT3IgbnVsbCBpZiBubyBkZXZpY2UgaXMgcnVubmluZy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0RXhpc3RpbmdTaW0gKG9wdHMpIHtcbiAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMob3B0cy5wbGF0Zm9ybVZlcnNpb24pO1xuICBjb25zdCBhcHBpdW1UZXN0RGV2aWNlTmFtZSA9IGBhcHBpdW1UZXN0LSR7b3B0cy5kZXZpY2VOYW1lfWA7XG5cbiAgbGV0IGFwcGl1bVRlc3REZXZpY2U7XG5cbiAgZm9yIChjb25zdCBkZXZpY2Ugb2YgXy52YWx1ZXMoZGV2aWNlcykpIHtcbiAgICBpZiAoZGV2aWNlLm5hbWUgPT09IG9wdHMuZGV2aWNlTmFtZSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGdldFNpbXVsYXRvcihkZXZpY2UudWRpZCk7XG4gICAgfVxuXG4gICAgaWYgKGRldmljZS5uYW1lID09PSBhcHBpdW1UZXN0RGV2aWNlTmFtZSkge1xuICAgICAgYXBwaXVtVGVzdERldmljZSA9IGRldmljZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXBwaXVtVGVzdERldmljZSkge1xuICAgIGxvZy53YXJuKGBVbmFibGUgdG8gZmluZCBkZXZpY2UgJyR7b3B0cy5kZXZpY2VOYW1lfScuIEZvdW5kICcke2FwcGl1bVRlc3REZXZpY2UubmFtZX0nICh1ZGlkOiAnJHthcHBpdW1UZXN0RGV2aWNlLnVkaWR9JykgaW5zdGVhZGApO1xuICAgIHJldHVybiBhd2FpdCBnZXRTaW11bGF0b3IoYXBwaXVtVGVzdERldmljZS51ZGlkKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2h1dGRvd25TaW11bGF0b3IgKGRldmljZSkge1xuICAvLyBzdG9wIFhDVGVzdCBwcm9jZXNzZXMgaWYgcnVubmluZyB0byBhdm9pZCB1bmV4cGVjdGVkIHNpZGUgZWZmZWN0c1xuICBhd2FpdCByZXNldFhDVGVzdFByb2Nlc3NlcyhkZXZpY2UudWRpZCwgdHJ1ZSk7XG4gIGF3YWl0IGRldmljZS5zaHV0ZG93bigpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5TaW11bGF0b3JSZXNldCAoZGV2aWNlLCBvcHRzKSB7XG4gIGlmIChvcHRzLm5vUmVzZXQgJiYgIW9wdHMuZnVsbFJlc2V0KSB7XG4gICAgLy8gbm9SZXNldCA9PT0gdHJ1ZSAmJiBmdWxsUmVzZXQgPT09IGZhbHNlXG4gICAgbG9nLmRlYnVnKCdSZXNldDogbm9SZXNldCBpcyBvbi4gTGVhdmluZyBzaW11bGF0b3IgYXMgaXMnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRldmljZSkge1xuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IG5vIGRldmljZSBhdmFpbGFibGUuIFNraXBwaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogZnVsbFJlc2V0IGlzIG9uLiBDbGVhbmluZyBzaW11bGF0b3InKTtcbiAgICBhd2FpdCBzaHV0ZG93blNpbXVsYXRvcihkZXZpY2UpO1xuICAgIGxldCBpc0tleWNoYWluc0JhY2t1cFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBpZiAob3B0cy5rZXljaGFpbnNFeGNsdWRlUGF0dGVybnMgfHwgb3B0cy5rZWVwS2V5Q2hhaW5zKSB7XG4gICAgICBpc0tleWNoYWluc0JhY2t1cFN1Y2Nlc3NmdWwgPSBhd2FpdCBkZXZpY2UuYmFja3VwS2V5Y2hhaW5zKCk7XG4gICAgfVxuICAgIGF3YWl0IGRldmljZS5jbGVhbigpO1xuICAgIGlmIChpc0tleWNoYWluc0JhY2t1cFN1Y2Nlc3NmdWwpIHtcbiAgICAgIGF3YWl0IGRldmljZS5yZXN0b3JlS2V5Y2hhaW5zKG9wdHMua2V5Y2hhaW5zRXhjbHVkZVBhdHRlcm5zIHx8IFtdKTtcbiAgICAgIGxvZy5pbmZvKGBTdWNjZXNzZnVsbHkgcmVzdG9yZWQga2V5Y2hhaW5zIGFmdGVyIGZ1bGwgcmVzZXRgKTtcbiAgICB9IGVsc2UgaWYgKG9wdHMua2V5Y2hhaW5zRXhjbHVkZVBhdHRlcm5zIHx8IG9wdHMua2VlcEtleUNoYWlucykge1xuICAgICAgbG9nLndhcm4oJ0Nhbm5vdCByZXN0b3JlIGtleWNoYWlucyBhZnRlciBmdWxsIHJlc2V0LCBiZWNhdXNlICcgK1xuICAgICAgICAgICAgICAgJ3RoZSBiYWNrdXAgb3BlcmF0aW9uIGRpZCBub3Qgc3VjY2VlZCcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRzLmJ1bmRsZUlkKSB7XG4gICAgLy8gVGVybWluYXRlIHRoZSBhcHAgdW5kZXIgdGVzdCBpZiBpdCBpcyBzdGlsbCBydW5uaW5nIG9uIFNpbXVsYXRvclxuICAgIC8vIFRlcm1pbmF0aW9uIGlzIG5vdCBuZWVkZWQgaWYgU2ltdWxhdG9yIGlzIG5vdCBydW5uaW5nXG4gICAgaWYgKGF3YWl0IGRldmljZS5pc1J1bm5pbmcoKSkge1xuICAgICAgaWYgKGRldmljZS54Y29kZVZlcnNpb24ubWFqb3IgPj0gOCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRlcm1pbmF0ZShkZXZpY2UudWRpZCwgb3B0cy5idW5kbGVJZCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZy53YXJuKGBSZXNldDogZmFpbGVkIHRvIHRlcm1pbmF0ZSBTaW11bGF0b3IgYXBwbGljYXRpb24gd2l0aCBpZCBcIiR7b3B0cy5idW5kbGVJZH1cImApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBzaHV0ZG93blNpbXVsYXRvcihkZXZpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0cy5hcHApIHtcbiAgICAgIGxvZy5pbmZvKCdOb3Qgc2NydWJiaW5nIHRoaXJkIHBhcnR5IGFwcCBpbiBhbnRpY2lwYXRpb24gb2YgdW5pbnN0YWxsJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzU2FmYXJpID0gKG9wdHMuYnJvd3Nlck5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgPT09ICdzYWZhcmknO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNTYWZhcmkpIHtcbiAgICAgICAgYXdhaXQgZGV2aWNlLmNsZWFuU2FmYXJpKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBkZXZpY2Uuc2NydWJDdXN0b21BcHAocGF0aC5iYXNlbmFtZShvcHRzLmFwcCksIG9wdHMuYnVuZGxlSWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oZXJyLm1lc3NhZ2UpO1xuICAgICAgbG9nLndhcm4oYFJlc2V0OiBjb3VsZCBub3Qgc2NydWIgJHtpc1NhZmFyaSA/ICdTYWZhcmkgYnJvd3NlcicgOiAnYXBwbGljYXRpb24gd2l0aCBpZCBcIicgKyBvcHRzLmJ1bmRsZUlkICsgJ1wiJ30uIExlYXZpbmcgYXMgaXMuYCk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluc3RhbGxUb1NpbXVsYXRvciAoZGV2aWNlLCBhcHAsIGJ1bmRsZUlkLCBub1Jlc2V0ID0gdHJ1ZSkge1xuICBpZiAoIWFwcCkge1xuICAgIGxvZy5kZWJ1ZygnTm8gYXBwIHBhdGggaXMgZ2l2ZW4uIE5vdGhpbmcgdG8gaW5zdGFsbC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYnVuZGxlSWQpIHtcbiAgICBpZiAoYXdhaXQgZGV2aWNlLmlzQXBwSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgICAgaWYgKG5vUmVzZXQpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBBcHAgJyR7YnVuZGxlSWR9JyBpcyBhbHJlYWR5IGluc3RhbGxlZC4gTm8gbmVlZCB0byByZWluc3RhbGwuYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZy5kZWJ1ZyhgUmVzZXQgcmVxdWVzdGVkLiBSZW1vdmluZyBhcHAgd2l0aCBpZCAnJHtidW5kbGVJZH0nIGZyb20gdGhlIGRldmljZWApO1xuICAgICAgYXdhaXQgZGV2aWNlLnJlbW92ZUFwcChidW5kbGVJZCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaW5zdGFsbGRDYWNoZVJvb3QgPSBwYXRoLnJlc29sdmUoZGV2aWNlLmdldERpcigpLCAnTGlicmFyeScsICdDYWNoZXMnLCBJTlNUQUxMX0RBRU1PTl9DQUNIRSk7XG4gIGxldCB0bXBSb290ID0gbnVsbDtcbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyhpbnN0YWxsZENhY2hlUm9vdCkpIHtcbiAgICAvLyBDbGVhbnVwIG9mIGluc3RhbGxkIGNhY2hlIGhlbHBzIHRvIHNhdmUgZGlzayBzcGFjZSB3aGlsZSBydW5uaW5nIG11bHRpcGxlIHRlc3RzXG4gICAgLy8gd2l0aG91dCByZXN0YXJ0aW5nIHRoZSBTaW11bGF0b3I6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtL2lzc3Vlcy85NDEwXG4gICAgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICAgIGxvZy5kZWJ1ZygnQ2xlYW5pbmcgaW5zdGFsbGQgY2FjaGUgdG8gc2F2ZSB0aGUgZGlzayBzcGFjZScpO1xuICAgIGF3YWl0IGZzLm12KGluc3RhbGxkQ2FjaGVSb290LCBwYXRoLnJlc29sdmUodG1wUm9vdCwgSU5TVEFMTF9EQUVNT05fQ0FDSEUpLCB7bWtkaXJwOiB0cnVlfSk7XG4gICAgYXdhaXQgbWtkaXJwKGluc3RhbGxkQ2FjaGVSb290KTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgSW5zdGFsbGluZyAnJHthcHB9JyBvbiBTaW11bGF0b3Igd2l0aCBVVUlEICcke2RldmljZS51ZGlkfScuLi5gKTtcbiAgdHJ5IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZGV2aWNlLmluc3RhbGxBcHAoYXBwKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBvbiBYY29kZSAxMCBzb21ldGltZXMgdGhpcyBpcyB0b28gZmFzdCBhbmQgaXQgZmFpbHNcbiAgICAgIGxvZy5pbmZvKGBHb3QgYW4gZXJyb3Igb24gJyR7YXBwfScgaW5zdGFsbDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICBpZiAoZS5tZXNzYWdlLmluY2x1ZGVzKCdkb21haW49TUlJbnN0YWxsZXJFcnJvckRvbWFpbiwgY29kZT0zNScpICYmIHRtcFJvb3QpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzExMzUwXG4gICAgICAgIGxvZy5pbmZvKGBpbnN0YWxsZCByZXF1aXJlcyB0aGUgY2FjaGUgdG8gYmUgYXZhaWxhYmxlIGluIG9yZGVyIHRvIGluc3RhbGwgJyR7YXBwfScuIGAgK1xuICAgICAgICAgIGBSZXN0b3JpbmcgdGhlIGNhY2hlYCk7XG4gICAgICAgIGF3YWl0IGZzLnJpbXJhZihpbnN0YWxsZENhY2hlUm9vdCk7XG4gICAgICAgIGF3YWl0IGZzLm12KHBhdGgucmVzb2x2ZSh0bXBSb290LCBJTlNUQUxMX0RBRU1PTl9DQUNIRSksIGluc3RhbGxkQ2FjaGVSb290LCB7bWtkaXJwOiB0cnVlfSk7XG4gICAgICB9XG4gICAgICBsb2cuaW5mbygnUmV0cnlpbmcgYXBwbGljYXRpb24gaW5zdGFsbCcpO1xuICAgICAgYXdhaXQgZGV2aWNlLmluc3RhbGxBcHAoYXBwKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKCdUaGUgYXBwIGhhcyBiZWVuIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkuJyk7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHRtcFJvb3QgJiYgYXdhaXQgZnMuZXhpc3RzKHRtcFJvb3QpKSB7XG4gICAgICBhd2FpdCBmcy5yaW1yYWYodG1wUm9vdCk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNodXRkb3duT3RoZXJTaW11bGF0b3JzIChjdXJyZW50RGV2aWNlKSB7XG4gIGNvbnN0IGFsbERldmljZXMgPSBfLmZsYXRNYXAoXy52YWx1ZXMoYXdhaXQgZ2V0RGV2aWNlcygpKSk7XG4gIGNvbnN0IG90aGVyQm9vdGVkRGV2aWNlcyA9IGFsbERldmljZXMuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS51ZGlkICE9PSBjdXJyZW50RGV2aWNlLnVkaWQgJiYgZGV2aWNlLnN0YXRlID09PSAnQm9vdGVkJyk7XG4gIGlmIChfLmlzRW1wdHkob3RoZXJCb290ZWREZXZpY2VzKSkge1xuICAgIGxvZy5pbmZvKCdObyBvdGhlciBydW5uaW5nIHNpbXVsYXRvcnMgaGF2ZSBiZWVuIGRldGVjdGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxvZy5pbmZvKGBEZXRlY3RlZCAke290aGVyQm9vdGVkRGV2aWNlcy5sZW5ndGh9IG90aGVyIHJ1bm5pbmcgU2ltdWxhdG9yJHtvdGhlckJvb3RlZERldmljZXMubGVuZ3RoID09PSAxID8gJycgOiAncyd9LmAgK1xuICAgICAgICAgICBgU2h1dHRpbmcgJHtvdGhlckJvb3RlZERldmljZXMubGVuZ3RoID09PSAxID8gJ2l0JyA6ICd0aGVtJ30gZG93bi4uLmApO1xuICBmb3IgKGNvbnN0IHt1ZGlkfSBvZiBvdGhlckJvb3RlZERldmljZXMpIHtcbiAgICAvLyBJdCBpcyBuZWNlc3NhcnkgdG8gc3RvcCB0aGUgY29ycmVzcG9uZGluZyB4Y29kZWJ1aWxkIHByb2Nlc3MgYmVmb3JlIGtpbGxpbmdcbiAgICAvLyB0aGUgc2ltdWxhdG9yLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlc3RhcnRlZFxuICAgIGF3YWl0IHJlc2V0WENUZXN0UHJvY2Vzc2VzKHVkaWQsIHRydWUpO1xuICAgIGF3YWl0IHNodXRkb3duKHVkaWQpO1xuICB9XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNpbSwgZ2V0RXhpc3RpbmdTaW0sIHJ1blNpbXVsYXRvclJlc2V0LCBpbnN0YWxsVG9TaW11bGF0b3IsXG4gIHNodXRkb3duU2ltdWxhdG9yLCBzaHV0ZG93bk90aGVyU2ltdWxhdG9ycyB9O1xuIl0sImZpbGUiOiJsaWIvc2ltdWxhdG9yLW1hbmFnZW1lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
