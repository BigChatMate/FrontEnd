"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.desiredCapConstraints = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

let desiredCapConstraints = _lodash.default.defaults({
  showXcodeLog: {
    isBoolean: true
  },
  wdaLocalPort: {
    isNumber: true
  },
  iosInstallPause: {
    isNumber: true
  },
  xcodeConfigFile: {
    isString: true
  },
  xcodeOrgId: {
    isString: true
  },
  xcodeSigningId: {
    isString: true
  },
  keychainPath: {
    isString: true
  },
  keychainPassword: {
    isString: true
  },
  bootstrapPath: {
    isString: true
  },
  agentPath: {
    isString: true
  },
  tapWithShortPressDuration: {
    isNumber: true
  },
  scaleFactor: {
    isString: true
  },
  usePrebuiltWDA: {
    isBoolean: true
  },
  customSSLCert: {
    isString: true
  },
  preventWDAAttachments: {
    isBoolean: true
  },
  webDriverAgentUrl: {
    isString: true
  },
  derivedDataPath: {
    isString: true
  },
  useNewWDA: {
    isBoolean: true
  },
  wdaLaunchTimeout: {
    isNumber: true
  },
  wdaConnectionTimeout: {
    isNumber: true
  },
  updatedWDABundleId: {
    isString: true
  },
  resetOnSessionStartOnly: {
    isBoolean: true
  },
  commandTimeouts: {},
  wdaStartupRetries: {
    isNumber: true
  },
  wdaStartupRetryInterval: {
    isNumber: true
  },
  prebuildWDA: {
    isBoolean: true
  },
  connectHardwareKeyboard: {
    isBoolean: true
  },
  calendarAccessAuthorized: {
    isBoolean: true
  },
  startIWDP: {
    isBoolean: true
  },
  useSimpleBuildTest: {
    isBoolean: true
  },
  waitForQuiescence: {
    isBoolean: true
  },
  maxTypingFrequency: {
    isNumber: true
  },
  nativeTyping: {
    isBoolean: true
  },
  simpleIsVisibleCheck: {
    isBoolean: true
  },
  useCarthageSsl: {
    isBoolean: true
  },
  shouldUseSingletonTestManager: {
    isBoolean: true
  },
  isHeadless: {
    isBoolean: true
  },
  webkitDebugProxyPort: {
    isNumber: true
  },
  useXctestrunFile: {
    isBoolean: true
  },
  absoluteWebLocations: {
    isBoolean: true
  },
  simulatorWindowCenter: {
    isString: true
  },
  useJSONSource: {
    isBoolean: true
  },
  shutdownOtherSimulators: {
    isBoolean: true
  },
  keychainsExcludePatterns: {
    isString: true
  },
  realDeviceScreenshotter: {
    isString: true,
    presence: false,
    inclusionCaseInsensitive: ['idevicescreenshot']
  },
  showSafariConsoleLog: {
    isBoolean: true
  },
  showSafariNetworkLog: {
    isBoolean: true
  },
  mjpegServerPort: {
    isNumber: true
  },
  reduceMotion: {
    isBoolean: true
  },
  mjpegScreenshotUrl: {
    isString: true
  },
  permissions: {
    isString: true
  }
}, _appiumIosDriver.desiredCapConstraints);

exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwiXyIsImRlZmF1bHRzIiwic2hvd1hjb2RlTG9nIiwiaXNCb29sZWFuIiwid2RhTG9jYWxQb3J0IiwiaXNOdW1iZXIiLCJpb3NJbnN0YWxsUGF1c2UiLCJ4Y29kZUNvbmZpZ0ZpbGUiLCJpc1N0cmluZyIsInhjb2RlT3JnSWQiLCJ4Y29kZVNpZ25pbmdJZCIsImtleWNoYWluUGF0aCIsImtleWNoYWluUGFzc3dvcmQiLCJib290c3RyYXBQYXRoIiwiYWdlbnRQYXRoIiwidGFwV2l0aFNob3J0UHJlc3NEdXJhdGlvbiIsInNjYWxlRmFjdG9yIiwidXNlUHJlYnVpbHRXREEiLCJjdXN0b21TU0xDZXJ0IiwicHJldmVudFdEQUF0dGFjaG1lbnRzIiwid2ViRHJpdmVyQWdlbnRVcmwiLCJkZXJpdmVkRGF0YVBhdGgiLCJ1c2VOZXdXREEiLCJ3ZGFMYXVuY2hUaW1lb3V0Iiwid2RhQ29ubmVjdGlvblRpbWVvdXQiLCJ1cGRhdGVkV0RBQnVuZGxlSWQiLCJyZXNldE9uU2Vzc2lvblN0YXJ0T25seSIsImNvbW1hbmRUaW1lb3V0cyIsIndkYVN0YXJ0dXBSZXRyaWVzIiwid2RhU3RhcnR1cFJldHJ5SW50ZXJ2YWwiLCJwcmVidWlsZFdEQSIsImNvbm5lY3RIYXJkd2FyZUtleWJvYXJkIiwiY2FsZW5kYXJBY2Nlc3NBdXRob3JpemVkIiwic3RhcnRJV0RQIiwidXNlU2ltcGxlQnVpbGRUZXN0Iiwid2FpdEZvclF1aWVzY2VuY2UiLCJtYXhUeXBpbmdGcmVxdWVuY3kiLCJuYXRpdmVUeXBpbmciLCJzaW1wbGVJc1Zpc2libGVDaGVjayIsInVzZUNhcnRoYWdlU3NsIiwic2hvdWxkVXNlU2luZ2xldG9uVGVzdE1hbmFnZXIiLCJpc0hlYWRsZXNzIiwid2Via2l0RGVidWdQcm94eVBvcnQiLCJ1c2VYY3Rlc3RydW5GaWxlIiwiYWJzb2x1dGVXZWJMb2NhdGlvbnMiLCJzaW11bGF0b3JXaW5kb3dDZW50ZXIiLCJ1c2VKU09OU291cmNlIiwic2h1dGRvd25PdGhlclNpbXVsYXRvcnMiLCJrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMiLCJyZWFsRGV2aWNlU2NyZWVuc2hvdHRlciIsInByZXNlbmNlIiwiaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlIiwic2hvd1NhZmFyaUNvbnNvbGVMb2ciLCJzaG93U2FmYXJpTmV0d29ya0xvZyIsIm1qcGVnU2VydmVyUG9ydCIsInJlZHVjZU1vdGlvbiIsIm1qcGVnU2NyZWVuc2hvdFVybCIsInBlcm1pc3Npb25zIiwiaW9zRGVzaXJlZENhcENvbnN0cmFpbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxJQUFJQSxxQkFBcUIsR0FBR0MsZ0JBQUVDLFFBQUYsQ0FBVztBQUNyQ0MsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLFNBQVMsRUFBRTtBQURDLEdBRHVCO0FBSXJDQyxFQUFBQSxZQUFZLEVBQUU7QUFDWkMsSUFBQUEsUUFBUSxFQUFFO0FBREUsR0FKdUI7QUFPckNDLEVBQUFBLGVBQWUsRUFBRTtBQUNmRCxJQUFBQSxRQUFRLEVBQUU7QUFESyxHQVBvQjtBQVVyQ0UsRUFBQUEsZUFBZSxFQUFFO0FBQ2ZDLElBQUFBLFFBQVEsRUFBRTtBQURLLEdBVm9CO0FBYXJDQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkQsSUFBQUEsUUFBUSxFQUFFO0FBREEsR0FieUI7QUFnQnJDRSxFQUFBQSxjQUFjLEVBQUU7QUFDZEYsSUFBQUEsUUFBUSxFQUFFO0FBREksR0FoQnFCO0FBbUJyQ0csRUFBQUEsWUFBWSxFQUFFO0FBQ1pILElBQUFBLFFBQVEsRUFBRTtBQURFLEdBbkJ1QjtBQXNCckNJLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCSixJQUFBQSxRQUFRLEVBQUU7QUFETSxHQXRCbUI7QUF5QnJDSyxFQUFBQSxhQUFhLEVBQUU7QUFDYkwsSUFBQUEsUUFBUSxFQUFFO0FBREcsR0F6QnNCO0FBNEJyQ00sRUFBQUEsU0FB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cmFpbnRzIGFzIGlvc0Rlc2lyZWRDYXBDb25zdHJhaW50cyB9IGZyb20gJ2FwcGl1bS1pb3MtZHJpdmVyJztcblxuXG5sZXQgZGVzaXJlZENhcENvbnN0cmFpbnRzID0gXy5kZWZhdWx0cyh7XG4gIHNob3dYY29kZUxvZzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB3ZGFMb2NhbFBvcnQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBpb3NJbnN0YWxsUGF1c2U6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICB4Y29kZUNvbmZpZ0ZpbGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB4Y29kZU9yZ0lkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgeGNvZGVTaWduaW5nSWQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBrZXljaGFpblBhdGg6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBrZXljaGFpblBhc3N3b3JkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYm9vdHN0cmFwUGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGFnZW50UGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHRhcFdpdGhTaG9ydFByZXNzRHVyYXRpb246IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBzY2FsZUZhY3Rvcjoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHVzZVByZWJ1aWx0V0RBOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGN1c3RvbVNTTENlcnQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBwcmV2ZW50V0RBQXR0YWNobWVudHM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgd2ViRHJpdmVyQWdlbnRVcmw6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBkZXJpdmVkRGF0YVBhdGg6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB1c2VOZXdXREE6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgd2RhTGF1bmNoVGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHdkYUNvbm5lY3Rpb25UaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgdXBkYXRlZFdEQUJ1bmRsZUlkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgcmVzZXRPblNlc3Npb25TdGFydE9ubHk6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgY29tbWFuZFRpbWVvdXRzOiB7XG4gICAgLy8gcmVjb2duaXplIHRoZSBjYXAsXG4gICAgLy8gYnV0IHZhbGlkYXRlIGluIHRoZSBkcml2ZXIjdmFsaWRhdGVEZXNpcmVkQ2FwcyBtZXRob2RcbiAgfSxcbiAgd2RhU3RhcnR1cFJldHJpZXM6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICB3ZGFTdGFydHVwUmV0cnlJbnRlcnZhbDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHByZWJ1aWxkV0RBOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGNvbm5lY3RIYXJkd2FyZUtleWJvYXJkOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGNhbGVuZGFyQWNjZXNzQXV0aG9yaXplZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzdGFydElXRFA6IHtcbiAgICBpc0Jvb2xlYW46IHRydWUsXG4gIH0sXG4gIHVzZVNpbXBsZUJ1aWxkVGVzdDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB3YWl0Rm9yUXVpZXNjZW5jZToge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBtYXhUeXBpbmdGcmVxdWVuY3k6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBuYXRpdmVUeXBpbmc6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2ltcGxlSXNWaXNpYmxlQ2hlY2s6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgdXNlQ2FydGhhZ2VTc2w6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2hvdWxkVXNlU2luZ2xldG9uVGVzdE1hbmFnZXI6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgaXNIZWFkbGVzczoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB3ZWJraXREZWJ1Z1Byb3h5UG9ydDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHVzZVhjdGVzdHJ1bkZpbGU6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgYWJzb2x1dGVXZWJMb2NhdGlvbnM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2ltdWxhdG9yV2luZG93Q2VudGVyOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgdXNlSlNPTlNvdXJjZToge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzaHV0ZG93bk90aGVyU2ltdWxhdG9yczoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBrZXljaGFpbnNFeGNsdWRlUGF0dGVybnM6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICByZWFsRGV2aWNlU2NyZWVuc2hvdHRlcjoge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICAgIHByZXNlbmNlOiBmYWxzZSxcbiAgICBpbmNsdXNpb25DYXNlSW5zZW5zaXRpdmU6IFsnaWRldmljZXNjcmVlbnNob3QnXVxuICB9LFxuICBzaG93U2FmYXJpQ29uc29sZUxvZzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzaG93U2FmYXJpTmV0d29ya0xvZzoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBtanBlZ1NlcnZlclBvcnQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICByZWR1Y2VNb3Rpb246IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbWpwZWdTY3JlZW5zaG90VXJsOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgcGVybWlzc2lvbnM6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9XG59LCBpb3NEZXNpcmVkQ2FwQ29uc3RyYWludHMpO1xuXG5leHBvcnQgeyBkZXNpcmVkQ2FwQ29uc3RyYWludHMgfTtcbmV4cG9ydCBkZWZhdWx0IGRlc2lyZWRDYXBDb25zdHJhaW50cztcbiJdLCJmaWxlIjoibGliL2Rlc2lyZWQtY2Fwcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
