"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectUdid = detectUdid;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.adjustWDAAttachmentsPermissions = adjustWDAAttachmentsPermissions;
exports.checkAppPresent = checkAppPresent;
exports.getDriverInfo = getDriverInfo;
exports.clearSystemFiles = clearSystemFiles;
exports.translateDeviceName = translateDeviceName;
exports.normalizeCommandTimeouts = normalizeCommandTimeouts;
exports.resetXCTestProcesses = resetXCTestProcesses;
exports.getPidUsingPattern = getPidUsingPattern;
exports.markSystemFilesForCleanup = markSystemFilesForCleanup;
exports.printUser = printUser;
exports.printLibimobiledeviceInfo = printLibimobiledeviceInfo;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.encodeBase64OrUpload = encodeBase64OrUpload;
exports.removeAllSessionWebSocketHandlers = removeAllSessionWebSocketHandlers;
exports.verifyApplicationPlatform = verifyApplicationPlatform;
exports.DEFAULT_TIMEOUT_KEY = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDriver = require("appium-ios-driver");

var _teen_process = require("teen_process");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _url = _interopRequireDefault(require("url"));

var _v = _interopRequireDefault(require("v8"));

const DEFAULT_TIMEOUT_KEY = 'default';
exports.DEFAULT_TIMEOUT_KEY = DEFAULT_TIMEOUT_KEY;

function detectUdid() {
  return _detectUdid.apply(this, arguments);
}

function _detectUdid() {
  _detectUdid = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Auto-detecting real device udid...');

    let cmd,
        args = [];

    try {
      cmd = yield _appiumSupport.fs.which('idevice_id');
      args.push('-l');

      _logger.default.debug('Using idevice_id');
    } catch (err) {
      _logger.default.debug('Using udidetect');

      cmd = require.resolve('udidetect');
    }

    let udid;

    try {
      let _ref = yield (0, _teen_process.exec)(cmd, args, {
        timeout: 3000
      }),
          stdout = _ref.stdout;

      let udids = _lodash.default.uniq(_lodash.default.filter(stdout.split('\n'), Boolean));

      udid = _lodash.default.last(udids);

      if (udids.length > 1) {
        _logger.default.warn(`Multiple devices found: ${udids.join(', ')}`);

        _logger.default.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);
      }
    } catch (err) {
      _logger.default.errorAndThrow(`Error detecting udid: ${err.message}`);
    }

    if (!udid || udid.length <= 2) {
      throw new Error('Could not detect udid.');
    }

    _logger.default.debug(`Detected real device udid: '${udid}'`);

    return udid;
  });
  return _detectUdid.apply(this, arguments);
}

function getAndCheckXcodeVersion() {
  return _getAndCheckXcodeVersion.apply(this, arguments);
}

function _getAndCheckXcodeVersion() {
  _getAndCheckXcodeVersion = (0, _asyncToGenerator2.default)(function* () {
    let version;

    try {
      version = yield _appiumXcode.default.getVersion(true);
    } catch (err) {
      _logger.default.debug(err);

      _logger.default.errorAndThrow(`Could not determine Xcode version: ${err.message}`);
    }

    if (!version.toolsVersion) {
      try {
        version.toolsVersion = yield _appiumXcode.default.getCommandLineToolsVersion();
      } catch (ign) {}
    }

    if (version.versionFloat < 7.3) {
      _logger.default.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` + `Xcode ${version.versionString} is not supported. ` + `Please upgrade to version 7.3 or higher`);
    }

    return version;
  });
  return _getAndCheckXcodeVersion.apply(this, arguments);
}

function getAndCheckIosSdkVersion() {
  return _getAndCheckIosSdkVersion.apply(this, arguments);
}

function _getAndCheckIosSdkVersion() {
  _getAndCheckIosSdkVersion = (0, _asyncToGenerator2.default)(function* () {
    let versionNumber;

    try {
      versionNumber = yield _appiumXcode.default.getMaxIOSSDK();
    } catch (err) {
      _logger.default.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);
    }

    return versionNumber;
  });
  return _getAndCheckIosSdkVersion.apply(this, arguments);
}

function translateDeviceName(platformVersion, devName = '') {
  let deviceName = devName;

  switch (devName.toLowerCase().trim()) {
    case 'iphone simulator':
      deviceName = 'iPhone 6';
      break;

    case 'ipad simulator':
      deviceName = parseFloat(platformVersion) < 10.3 ? 'iPad Retina' : 'iPad Air';
      break;
  }

  if (deviceName !== devName) {
    _logger.default.debug(`Changing deviceName from '${devName}' to '${deviceName}'`);
  }

  return deviceName;
}

const derivedDataPermissionsStacks = new Map();

function adjustWDAAttachmentsPermissions(_x, _x2) {
  return _adjustWDAAttachmentsPermissions.apply(this, arguments);
}

function _adjustWDAAttachmentsPermissions() {
  _adjustWDAAttachmentsPermissions = (0, _asyncToGenerator2.default)(function* (wda, perms) {
    if (!wda || !(yield wda.retrieveDerivedDataPath())) {
      _logger.default.warn('No WebDriverAgent derived data available, so unable to set permissions on WDA attachments folder');

      return;
    }

    const attachmentsFolder = _path.default.join((yield wda.retrieveDerivedDataPath()), 'Logs/Test/Attachments');

    const permsStack = derivedDataPermissionsStacks.get(attachmentsFolder) || [];

    if (permsStack.length) {
      if (_lodash.default.last(permsStack) === perms) {
        permsStack.push(perms);

        _logger.default.info(`Not changing permissions of '${attachmentsFolder}' to '${perms}', because they were already set by the other session`);

        return;
      }

      if (permsStack.length > 1) {
        permsStack.pop();

        _logger.default.info(`Not changing permissions of '${attachmentsFolder}' to '${perms}', because the other session does not expect them to be changed`);

        return;
      }
    }

    derivedDataPermissionsStacks.set(attachmentsFolder, [perms]);

    if (yield _appiumSupport.fs.exists(attachmentsFolder)) {
      _logger.default.info(`Setting '${perms}' permissions to '${attachmentsFolder}' folder`);

      yield _appiumSupport.fs.chmod(attachmentsFolder, perms);
      return;
    }

    _logger.default.info(`There is no ${attachmentsFolder} folder, so not changing permissions`);
  });
  return _adjustWDAAttachmentsPermissions.apply(this, arguments);
}

const derivedDataCleanupMarkers = new Map();

function markSystemFilesForCleanup(_x3) {
  return _markSystemFilesForCleanup.apply(this, arguments);
}

function _markSystemFilesForCleanup() {
  _markSystemFilesForCleanup = (0, _asyncToGenerator2.default)(function* (wda) {
    if (!wda || !(yield wda.retrieveDerivedDataPath())) {
      _logger.default.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');

      return;
    }

    const logsRoot = _path.default.resolve((yield wda.retrieveDerivedDataPath()), 'Logs');

    let markersCount = 0;

    if (derivedDataCleanupMarkers.has(logsRoot)) {
      markersCount = derivedDataCleanupMarkers.get(logsRoot);
    }

    derivedDataCleanupMarkers.set(logsRoot, ++markersCount);
  });
  return _markSystemFilesForCleanup.apply(this, arguments);
}

function clearSystemFiles(_x4) {
  return _clearSystemFiles.apply(this, arguments);
}

function _clearSystemFiles() {
  _clearSystemFiles = (0, _asyncToGenerator2.default)(function* (wda) {
    if (!wda || !(yield wda.retrieveDerivedDataPath())) {
      _logger.default.warn('No WebDriverAgent derived data available, so unable to clear system files');

      return;
    }

    const logsRoot = _path.default.resolve((yield wda.retrieveDerivedDataPath()), 'Logs');

    if (derivedDataCleanupMarkers.has(logsRoot)) {
      let markersCount = derivedDataCleanupMarkers.get(logsRoot);
      derivedDataCleanupMarkers.set(logsRoot, --markersCount);

      if (markersCount > 0) {
        _logger.default.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);

        return;
      }
    }

    derivedDataCleanupMarkers.set(logsRoot, 0);
    const cleanupCmd = `find -E /private/var/folders ` + `-regex '.*/Session-WebDriverAgentRunner.*\\.log$|.*/StandardOutputAndStandardError\\.txt$' ` + `-type f -exec sh -c 'echo "" > "{}"' \\;`;
    const cleanupTask = new _teen_process.SubProcess('bash', ['-c', cleanupCmd], {
      detached: true,
      stdio: ['ignore', 'pipe', 'pipe']
    });
    yield cleanupTask.start(0, true);

    _logger.default.debug(`Started background XCTest logs cleanup: ${cleanupCmd}`);

    if (yield _appiumSupport.fs.exists(logsRoot)) {
      _logger.default.info(`Cleaning test logs in '${logsRoot}' folder`);

      yield _appiumIosDriver.utils.clearLogs([logsRoot]);
      return;
    }

    _logger.default.info(`There is no ${logsRoot} folder, so not cleaning files`);
  });
  return _clearSystemFiles.apply(this, arguments);
}

function checkAppPresent(_x5) {
  return _checkAppPresent.apply(this, arguments);
}

function _checkAppPresent() {
  _checkAppPresent = (0, _asyncToGenerator2.default)(function* (app) {
    _logger.default.debug(`Checking whether app '${app}' is actually present on file system`);

    if (!(yield _appiumSupport.fs.exists(app))) {
      _logger.default.errorAndThrow(`Could not find app at '${app}'`);
    }

    _logger.default.debug('App is present');
  });
  return _checkAppPresent.apply(this, arguments);
}

function getDriverInfo() {
  return _getDriverInfo.apply(this, arguments);
}

function _getDriverInfo() {
  _getDriverInfo = (0, _asyncToGenerator2.default)(function* () {
    let stat = yield _appiumSupport.fs.stat(_path.default.resolve(__dirname, '..'));
    let built = stat.mtime.getTime();

    let pkg = require(__filename.indexOf('build/lib/utils') !== -1 ? '../../package.json' : '../package.json');

    let version = pkg.version;
    let info = {
      built,
      version
    };
    return info;
  });
  return _getDriverInfo.apply(this, arguments);
}

function normalizeCommandTimeouts(value) {
  if (typeof value !== 'string') {
    return value;
  }

  let result = {};

  if (!isNaN(value)) {
    result[DEFAULT_TIMEOUT_KEY] = _lodash.default.toInteger(value);
    return result;
  }

  try {
    result = JSON.parse(value);

    if (!_lodash.default.isPlainObject(result)) {
      throw new Error();
    }
  } catch (err) {
    _logger.default.errorAndThrow(`"commandTimeouts" capability should be a valid JSON object. "${value}" was given instead`);
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.toPairs(result)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          cmd = _step$value[0],
          timeout = _step$value[1];

      if (!_lodash.default.isInteger(timeout) || timeout <= 0) {
        _logger.default.errorAndThrow(`The timeout for "${cmd}" should be a valid natural number of milliseconds. "${timeout}" was given instead`);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

function getPidUsingPattern(_x6) {
  return _getPidUsingPattern.apply(this, arguments);
}

function _getPidUsingPattern() {
  _getPidUsingPattern = (0, _asyncToGenerator2.default)(function* (pgrepPattern) {
    const args = ['-nif', pgrepPattern];

    try {
      const _ref2 = yield (0, _teen_process.exec)('pgrep', args),
            stdout = _ref2.stdout;

      const pid = parseInt(stdout, 10);

      if (isNaN(pid)) {
        _logger.default.debug(`Cannot parse process id from 'pgrep ${args.join(' ')}' output: ${stdout}`);

        return null;
      }

      return `${pid}`;
    } catch (err) {
      _logger.default.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);

      return null;
    }
  });
  return _getPidUsingPattern.apply(this, arguments);
}

function killAppUsingPattern(_x7) {
  return _killAppUsingPattern.apply(this, arguments);
}

function _killAppUsingPattern() {
  _killAppUsingPattern = (0, _asyncToGenerator2.default)(function* (pgrepPattern) {
    var _arr = [2, 15, 9];

    for (var _i = 0; _i < _arr.length; _i++) {
      const signal = _arr[_i];

      if (!(yield getPidUsingPattern(pgrepPattern))) {
        return;
      }

      const args = [`-${signal}`, '-if', pgrepPattern];

      try {
        yield (0, _teen_process.exec)('pkill', args);
      } catch (err) {
        _logger.default.debug(`pkill ${args.join(' ')} -> ${err.message}`);
      }

      yield _bluebird.default.delay(100);
    }
  });
  return _killAppUsingPattern.apply(this, arguments);
}

function resetXCTestProcesses(_x8, _x9) {
  return _resetXCTestProcesses.apply(this, arguments);
}

function _resetXCTestProcesses() {
  _resetXCTestProcesses = (0, _asyncToGenerator2.default)(function* (udid, isSimulator, opts = {}) {
    const processPatterns = [`xcodebuild.*${udid}`];

    if (opts.wdaLocalPort) {
      processPatterns.push(`iproxy ${opts.wdaLocalPort}`);
    } else if (!isSimulator) {
      processPatterns.push(`iproxy.*${udid}`);
    }

    if (isSimulator) {
      processPatterns.push(`${udid}.*XCTRunner`);
    }

    _logger.default.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);

    for (var _i2 = 0; _i2 < processPatterns.length; _i2++) {
      const pgrepPattern = processPatterns[_i2];
      yield killAppUsingPattern(pgrepPattern);
    }
  });
  return _resetXCTestProcesses.apply(this, arguments);
}

function printUser() {
  return _printUser.apply(this, arguments);
}

function _printUser() {
  _printUser = (0, _asyncToGenerator2.default)(function* () {
    try {
      let _ref3 = yield (0, _teen_process.exec)('whoami'),
          stdout = _ref3.stdout;

      _logger.default.debug(`Current user: '${stdout.trim()}'`);
    } catch (err) {
      _logger.default.debug(`Unable to get username running server: ${err.message}`);
    }
  });
  return _printUser.apply(this, arguments);
}

function printLibimobiledeviceInfo() {
  return _printLibimobiledeviceInfo.apply(this, arguments);
}

function _printLibimobiledeviceInfo() {
  _printLibimobiledeviceInfo = (0, _asyncToGenerator2.default)(function* () {
    try {
      let _ref4 = yield (0, _teen_process.exec)('brew', ['info', 'libimobiledevice']),
          stdout = _ref4.stdout;

      let match = /libimobiledevice:(.+)/.exec(stdout);

      if (match && match[1]) {
        _logger.default.debug(`Current version of libimobiledevice: ${match[1].trim()}`);
      }
    } catch (err) {
      _logger.default.debug(`Unable to get version of libimobiledevice: ${err.message}`);
    }
  });
  return _printLibimobiledeviceInfo.apply(this, arguments);
}

function getPIDsListeningOnPort(_x10) {
  return _getPIDsListeningOnPort.apply(this, arguments);
}

function _getPIDsListeningOnPort() {
  _getPIDsListeningOnPort = (0, _asyncToGenerator2.default)(function* (port, filteringFunc = null) {
    const result = [];

    try {
      const _ref5 = yield (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]),
            stdout = _ref5.stdout;

      result.push(...stdout.trim().split(/\n+/));
    } catch (e) {
      return result;
    }

    if (!_lodash.default.isFunction(filteringFunc)) {
      return result;
    }

    return yield _bluebird.default.filter(result, function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* (x) {
        const _ref7 = yield (0, _teen_process.exec)('ps', ['-p', x, '-o', 'command']),
              stdout = _ref7.stdout;

        return yield filteringFunc(stdout);
      });

      return function (_x16) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
  return _getPIDsListeningOnPort.apply(this, arguments);
}

function encodeBase64OrUpload(_x11) {
  return _encodeBase64OrUpload.apply(this, arguments);
}

function _encodeBase64OrUpload() {
  _encodeBase64OrUpload = (0, _asyncToGenerator2.default)(function* (localFile, remotePath = null, uploadOptions = {}) {
    if (!(yield _appiumSupport.fs.exists(localFile))) {
      _logger.default.errorAndThrow(`The file at '${localFile}' does not exist or is not accessible`);
    }

    const _ref8 = yield _appiumSupport.fs.stat(localFile),
          size = _ref8.size;

    _logger.default.debug(`The size of the file is ${_appiumSupport.util.toReadableSizeString(size)}`);

    if (_lodash.default.isEmpty(remotePath)) {
      const maxMemoryLimit = _v.default.getHeapStatistics().total_available_size / 2;

      if (size >= maxMemoryLimit) {
        _logger.default.info(`The file might be too large to fit into the process memory ` + `(${_appiumSupport.util.toReadableSizeString(size)} >= ${_appiumSupport.util.toReadableSizeString(maxMemoryLimit)}). ` + `Provide a link to a remote writable location for video upload ` + `(http(s) and ftp protocols are supported) if you experience Out Of Memory errors`);
      }

      const content = yield _appiumSupport.fs.readFile(localFile);
      return content.toString('base64');
    }

    const remoteUrl = _url.default.parse(remotePath);

    let options = {};
    const user = uploadOptions.user,
          pass = uploadOptions.pass,
          method = uploadOptions.method;

    if (remoteUrl.protocol.startsWith('http')) {
      options = {
        url: remoteUrl.href,
        method: method || 'PUT',
        multipart: [{
          body: _fs2.default.createReadStream(localFile)
        }]
      };

      if (user && pass) {
        options.auth = {
          user,
          pass
        };
      }
    } else if (remoteUrl.protocol === 'ftp:') {
      options = {
        host: remoteUrl.hostname,
        port: remoteUrl.port || 21
      };

      if (user && pass) {
        options.user = user;
        options.pass = pass;
      }
    }

    yield _appiumSupport.net.uploadFile(localFile, remotePath, options);
    return '';
  });
  return _encodeBase64OrUpload.apply(this, arguments);
}

function removeAllSessionWebSocketHandlers(_x12, _x13) {
  return _removeAllSessionWebSocketHandlers.apply(this, arguments);
}

function _removeAllSessionWebSocketHandlers() {
  _removeAllSessionWebSocketHandlers = (0, _asyncToGenerator2.default)(function* (server, sessionId) {
    if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
      return;
    }

    const activeHandlers = yield server.getWebSocketHandlers(sessionId);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.keys(activeHandlers)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const pathname = _step2.value;
        yield server.removeWebSocketHandler(pathname);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  });
  return _removeAllSessionWebSocketHandlers.apply(this, arguments);
}

function verifyApplicationPlatform(_x14, _x15) {
  return _verifyApplicationPlatform.apply(this, arguments);
}

function _verifyApplicationPlatform() {
  _verifyApplicationPlatform = (0, _asyncToGenerator2.default)(function* (app, isSimulator) {
    _logger.default.debug('Verifying application platform');

    const infoPlist = _path.default.resolve(app, 'Info.plist');

    if (!(yield _appiumSupport.fs.exists(infoPlist))) {
      _logger.default.debug(`'${infoPlist}' does not exist`);

      return null;
    }

    const _ref9 = yield _appiumSupport.plist.parsePlistFile(infoPlist),
          CFBundleSupportedPlatforms = _ref9.CFBundleSupportedPlatforms;

    _logger.default.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(CFBundleSupportedPlatforms)}`);

    if (!_lodash.default.isArray(CFBundleSupportedPlatforms)) {
      _logger.default.debug(`CFBundleSupportedPlatforms key does not exist in '${infoPlist}'`);

      return null;
    }

    const isAppSupported = isSimulator && CFBundleSupportedPlatforms.includes('iPhoneSimulator') || !isSimulator && CFBundleSupportedPlatforms.includes('iPhoneOS');

    if (isAppSupported) {
      return true;
    }

    throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);
  });
  return _verifyApplicationPlatform.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1RJTUVPVVRfS0VZIiwiZGV0ZWN0VWRpZCIsImxvZyIsImRlYnVnIiwiY21kIiwiYXJncyIsImZzIiwid2hpY2giLCJwdXNoIiwiZXJyIiwicmVxdWlyZSIsInJlc29sdmUiLCJ1ZGlkIiwidGltZW91dCIsInN0ZG91dCIsInVkaWRzIiwiXyIsInVuaXEiLCJmaWx0ZXIiLCJzcGxpdCIsIkJvb2xlYW4iLCJsYXN0IiwibGVuZ3RoIiwid2FybiIsImpvaW4iLCJlcnJvckFuZFRocm93IiwibWVzc2FnZSIsIkVycm9yIiwiZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24iLCJ2ZXJzaW9uIiwieGNvZGUiLCJnZXRWZXJzaW9uIiwidG9vbHNWZXJzaW9uIiwiZ2V0Q29tbWFuZExpbmVUb29sc1ZlcnNpb24iLCJpZ24iLCJ2ZXJzaW9uRmxvYXQiLCJ2ZXJzaW9uU3RyaW5nIiwiZ2V0QW5kQ2hlY2tJb3NTZGtWZXJzaW9uIiwidmVyc2lvbk51bWJlciIsImdldE1heElPU1NESyIsInRyYW5zbGF0ZURldmljZU5hbWUiLCJwbGF0Zm9ybVZlcnNpb24iLCJkZXZOYW1lIiwiZGV2aWNlTmFtZSIsInRvTG93ZXJDYXNlIiwidHJpbSIsInBhcnNlRmxvYXQiLCJkZXJpdmVkRGF0YVBlcm1pc3Npb25zU3RhY2tzIiwiTWFwIiwiYWRqdXN0V0RBQXR0YWNobWVudHNQZXJtaXNzaW9ucyIsIndkYSIsInBlcm1zIiwicmV0cmlldmVEZXJpdmVkRGF0YVBhdGgiLCJhdHRhY2htZW50c0ZvbGRlciIsInBhdGgiLCJwZXJtc1N0YWNrIiwiZ2V0IiwiaW5mbyIsInBvcCIsInNldCIsImV4aXN0cyIsImNobW9kIiwiZGVyaXZlZERhdGFDbGVhbnVwTWFya2VycyIsIm1hcmtTeXN0ZW1GaWxlc0ZvckNsZWFudXAiLCJsb2dzUm9vdCIsIm1hcmtlcnNDb3VudCIsImhhcyIsImNsZWFyU3lzdGVtRmlsZXMiLCJjbGVhbnVwQ21kIiwiY2xlYW51cFRhc2siLCJTdWJQcm9jZXNzIiwiZGV0YWNoZWQiLCJzdGRpbyIsInN0YXJ0IiwiaW9zVXRpbHMiLCJjbGVhckxvZ3MiLCJjaGVja0FwcFByZXNlbnQiLCJhcHAiLCJnZXREcml2ZXJJbmZvIiwic3RhdCIsIl9fZGlybmFtZSIsImJ1aWx0IiwibXRpbWUiLCJnZXRUaW1lIiwicGtnIiwiX19maWxlbmFtZSIsImluZGV4T2YiLCJub3JtYWxpemVDb21tYW5kVGltZW91dHMiLCJ2YWx1ZSIsInJlc3VsdCIsImlzTmFOIiwidG9JbnRlZ2VyIiwiSlNPTiIsInBhcnNlIiwiaXNQbGFpbk9iamVjdCIsInRvUGFpcnMiLCJpc0ludGVnZXIiLCJnZXRQaWRVc2luZ1BhdHRlcm4iLCJwZ3JlcFBhdHRlcm4iLCJwaWQiLCJwYXJzZUludCIsImNvZGUiLCJraWxsQXBwVXNpbmdQYXR0ZXJuIiwic2lnbmFsIiwiQiIsImRlbGF5IiwicmVzZXRYQ1Rlc3RQcm9jZXNzZXMiLCJpc1NpbXVsYXRvciIsIm9wdHMiLCJwcm9jZXNzUGF0dGVybnMiLCJ3ZGFMb2NhbFBvcnQiLCJwcmludFVzZXIiLCJwcmludExpYmltb2JpbGVkZXZpY2VJbmZvIiwibWF0Y2giLCJleGVjIiwiZ2V0UElEc0xpc3RlbmluZ09uUG9ydCIsInBvcnQiLCJmaWx0ZXJpbmdGdW5jIiwiZSIsImlzRnVuY3Rpb24iLCJ4IiwiZW5jb2RlQmFzZTY0T3JVcGxvYWQiLCJsb2NhbEZpbGUiLCJyZW1vdGVQYXRoIiwidXBsb2FkT3B0aW9ucyIsInNpemUiLCJ1dGlsIiwidG9SZWFkYWJsZVNpemVTdHJpbmciLCJpc0VtcHR5IiwibWF4TWVtb3J5TGltaXQiLCJ2OCIsImdldEhlYXBTdGF0aXN0aWNzIiwidG90YWxfYXZhaWxhYmxlX3NpemUiLCJjb250ZW50IiwicmVhZEZpbGUiLCJ0b1N0cmluZyIsInJlbW90ZVVybCIsInVybCIsIm9wdGlvbnMiLCJ1c2VyIiwicGFzcyIsIm1ldGhvZCIsInByb3RvY29sIiwic3RhcnRzV2l0aCIsImhyZWYiLCJtdWx0aXBhcnQiLCJib2R5IiwiX2ZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsImF1dGgiLCJob3N0IiwiaG9zdG5hbWUiLCJuZXQiLCJ1cGxvYWRGaWxlIiwicmVtb3ZlQWxsU2Vzc2lvbldlYlNvY2tldEhhbmRsZXJzIiwic2VydmVyIiwic2Vzc2lvbklkIiwiZ2V0V2ViU29ja2V0SGFuZGxlcnMiLCJhY3RpdmVIYW5kbGVycyIsImtleXMiLCJwYXRobmFtZSIsInJlbW92ZVdlYlNvY2tldEhhbmRsZXIiLCJ2ZXJpZnlBcHBsaWNhdGlvblBsYXRmb3JtIiwiaW5mb1BsaXN0IiwicGxpc3QiLCJwYXJzZVBsaXN0RmlsZSIsIkNGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zIiwic3RyaW5naWZ5IiwiaXNBcnJheSIsImlzQXBwU3VwcG9ydGVkIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxtQkFBbUIsR0FBRyxTQUE1Qjs7O1NBR2VDLFU7Ozs7O2dEQUFmLGFBQTZCO0FBQzNCQyxvQkFBSUMsS0FBSixDQUFVLG9DQUFWOztBQUNBLFFBQUlDLEdBQUo7QUFBQSxRQUFTQyxJQUFJLEdBQUcsRUFBaEI7O0FBQ0EsUUFBSTtBQUNGRCxNQUFBQSxHQUFHLFNBQVNFLGtCQUFHQyxLQUFILENBQVMsWUFBVCxDQUFaO0FBQ0FGLE1BQUFBLElBQUksQ0FBQ0csSUFBTCxDQUFVLElBQVY7O0FBQ0FOLHNCQUFJQyxLQUFKLENBQVUsa0JBQVY7QUFDRCxLQUpELENBSUUsT0FBT00sR0FBUCxFQUFZO0FBQ1pQLHNCQUFJQyxLQUFKLENBQVUsaUJBQVY7O0FBQ0FDLE1BQUFBLEdBQUcsR0FBR00sT0FBTyxDQUFDQyxPQUFSLENBQWdCLFdBQWhCLENBQU47QUFDRDs7QUFDRCxRQUFJQyxJQUFKOztBQUNBLFFBQUk7QUFBQSx1QkFD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LFNBQVUsR0FBekU7O0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBTU0sY0FBYyxHQUFJOUQsV0FBVyxJQUFJMkQsMEJBQTBCLENBQUNJLFFBQTNCLENBQW9DLGlCQUFwQyxDQUFoQixJQUNqQixDQUFDL0QsV0FBRCxJQUFnQjJELDBCQUEwQixDQUFDSSxRQUEzQixDQUFvQyxVQUFwQyxDQUR0Qjs7QUFFQSxRQUFJRCxjQUFKLEVBQW9CO0FBQ2xCLGFBQU8sSUFBUDtBQUNEOztBQUNELFVBQU0sSUFBSTlJLEtBQUosQ0FBVyxHQUFFZ0YsV0FBVyxHQUFHLFdBQUgsR0FBaUIsYUFBYyx3Q0FBdUM5QixHQUFJLGlCQUF4RixHQUNDLHlGQURYLENBQU47QUFFRCxHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgZnMsIHV0aWwsIG5ldCwgcGxpc3QgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHV0aWxzIGFzIGlvc1V0aWxzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IHsgU3ViUHJvY2VzcywgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHY4IGZyb20gJ3Y4JztcblxuY29uc3QgREVGQVVMVF9USU1FT1VUX0tFWSA9ICdkZWZhdWx0JztcblxuXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RVZGlkICgpIHtcbiAgbG9nLmRlYnVnKCdBdXRvLWRldGVjdGluZyByZWFsIGRldmljZSB1ZGlkLi4uJyk7XG4gIGxldCBjbWQsIGFyZ3MgPSBbXTtcbiAgdHJ5IHtcbiAgICBjbWQgPSBhd2FpdCBmcy53aGljaCgnaWRldmljZV9pZCcpO1xuICAgIGFyZ3MucHVzaCgnLWwnKTtcbiAgICBsb2cuZGVidWcoJ1VzaW5nIGlkZXZpY2VfaWQnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKCdVc2luZyB1ZGlkZXRlY3QnKTtcbiAgICBjbWQgPSByZXF1aXJlLnJlc29sdmUoJ3VkaWRldGVjdCcpO1xuICB9XG4gIGxldCB1ZGlkO1xuICB0cnkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoY21kLCBhcmdzLCB7dGltZW91dDogMzAwMH0pO1xuICAgIGxldCB1ZGlkcyA9IF8udW5pcShfLmZpbHRlcihzdGRvdXQuc3BsaXQoJ1xcbicpLCBCb29sZWFuKSk7XG4gICAgdWRpZCA9IF8ubGFzdCh1ZGlkcyk7XG4gICAgaWYgKHVkaWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxvZy53YXJuKGBNdWx0aXBsZSBkZXZpY2VzIGZvdW5kOiAke3VkaWRzLmpvaW4oJywgJyl9YCk7XG4gICAgICBsb2cud2FybihgQ2hvb3NpbmcgJyR7dWRpZH0nLiBJZiB0aGlzIGlzIHdyb25nLCBtYW51YWxseSBzZXQgd2l0aCAndWRpZCcgZGVzaXJlZCBjYXBhYmlsaXR5YCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRXJyb3IgZGV0ZWN0aW5nIHVkaWQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbiAgaWYgKCF1ZGlkIHx8IHVkaWQubGVuZ3RoIDw9IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXRlY3QgdWRpZC4nKTtcbiAgfVxuICBsb2cuZGVidWcoYERldGVjdGVkIHJlYWwgZGV2aWNlIHVkaWQ6ICcke3VkaWR9J2ApO1xuICByZXR1cm4gdWRpZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24gKCkge1xuICBsZXQgdmVyc2lvbjtcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGVycik7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBkZXRlcm1pbmUgWGNvZGUgdmVyc2lvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuXG4gIGlmICghdmVyc2lvbi50b29sc1ZlcnNpb24pIHtcbiAgICB0cnkge1xuICAgICAgdmVyc2lvbi50b29sc1ZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRDb21tYW5kTGluZVRvb2xzVmVyc2lvbigpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfVxuXG4gIC8vIHdlIGRvIG5vdCBzdXBwb3J0IFhjb2RlcyA8IDcuMyxcbiAgaWYgKHZlcnNpb24udmVyc2lvbkZsb2F0IDwgNy4zKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFhjb2RlIHZlcnNpb24gJyR7dmVyc2lvbi52ZXJzaW9uU3RyaW5nfScuIFN1cHBvcnQgZm9yIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBYY29kZSAke3ZlcnNpb24udmVyc2lvblN0cmluZ30gaXMgbm90IHN1cHBvcnRlZC4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYFBsZWFzZSB1cGdyYWRlIHRvIHZlcnNpb24gNy4zIG9yIGhpZ2hlcmApO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbmRDaGVja0lvc1Nka1ZlcnNpb24gKCkge1xuICBsZXQgdmVyc2lvbk51bWJlcjtcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uTnVtYmVyID0gYXdhaXQgeGNvZGUuZ2V0TWF4SU9TU0RLKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZGV0ZXJtaW5lIGlPUyBTREsgdmVyc2lvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4gdmVyc2lvbk51bWJlcjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlRGV2aWNlTmFtZSAocGxhdGZvcm1WZXJzaW9uLCBkZXZOYW1lID0gJycpIHtcbiAgbGV0IGRldmljZU5hbWUgPSBkZXZOYW1lO1xuICBzd2l0Y2ggKGRldk5hbWUudG9Mb3dlckNhc2UoKS50cmltKCkpIHtcbiAgICBjYXNlICdpcGhvbmUgc2ltdWxhdG9yJzpcbiAgICAgIGRldmljZU5hbWUgPSAnaVBob25lIDYnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaXBhZCBzaW11bGF0b3InOlxuICAgICAgLy8gbm8gbmVlZCB0byB3b3JyeSBhYm91dCBmbG9hdGluZyBwb2ludCBjb21wYXJpc29uIGJlY2F1c2Ugb2YgdGhlXG4gICAgICAvLyAgIG5hdHVyZSBvZiB0aGUgbnVtYmVycyBiZWluZyBjb21wYXJlZFxuICAgICAgLy8gaVBhZCBSZXRpbmEgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZSBmb3IgaW9zIDEwLjNcbiAgICAgIC8vICAgc28gd2UgcGljayBhbm90aGVyIGlQYWQgdG8gdXNlIGFzIGRlZmF1bHRcbiAgICAgIGRldmljZU5hbWUgPSAocGFyc2VGbG9hdChwbGF0Zm9ybVZlcnNpb24pIDwgMTAuMykgPyAnaVBhZCBSZXRpbmEnIDogJ2lQYWQgQWlyJztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKGRldmljZU5hbWUgIT09IGRldk5hbWUpIHtcbiAgICBsb2cuZGVidWcoYENoYW5naW5nIGRldmljZU5hbWUgZnJvbSAnJHtkZXZOYW1lfScgdG8gJyR7ZGV2aWNlTmFtZX0nYCk7XG4gIH1cbiAgcmV0dXJuIGRldmljZU5hbWU7XG59XG5cbi8vIFRoaXMgbWFwIGNvbnRhaW5zIGRlcml2ZWQgZGF0YSBhdHRhY2htZW50IGZvbGRlcnMgYXMga2V5c1xuLy8gYW5kIHZhbHVlcyBhcmUgc3RhY2tzIG9mIHBlcm1zc2lvbiBtYXNrc1xuLy8gSXQgaXMgdXNlZCB0byBzeW5jaHJvbml6ZSBwZXJtaXNzaW9ucyBjaGFuZ2Vcbi8vIG9uIHNoYXJlZCBmb2xkZXJzXG5jb25zdCBkZXJpdmVkRGF0YVBlcm1pc3Npb25zU3RhY2tzID0gbmV3IE1hcCgpO1xuXG5hc3luYyBmdW5jdGlvbiBhZGp1c3RXREFBdHRhY2htZW50c1Blcm1pc3Npb25zICh3ZGEsIHBlcm1zKSB7XG4gIGlmICghd2RhIHx8ICFhd2FpdCB3ZGEucmV0cmlldmVEZXJpdmVkRGF0YVBhdGgoKSkge1xuICAgIGxvZy53YXJuKCdObyBXZWJEcml2ZXJBZ2VudCBkZXJpdmVkIGRhdGEgYXZhaWxhYmxlLCBzbyB1bmFibGUgdG8gc2V0IHBlcm1pc3Npb25zIG9uIFdEQSBhdHRhY2htZW50cyBmb2xkZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhdHRhY2htZW50c0ZvbGRlciA9IHBhdGguam9pbihhd2FpdCB3ZGEucmV0cmlldmVEZXJpdmVkRGF0YVBhdGgoKSwgJ0xvZ3MvVGVzdC9BdHRhY2htZW50cycpO1xuICBjb25zdCBwZXJtc1N0YWNrID0gZGVyaXZlZERhdGFQZXJtaXNzaW9uc1N0YWNrcy5nZXQoYXR0YWNobWVudHNGb2xkZXIpIHx8IFtdO1xuICBpZiAocGVybXNTdGFjay5sZW5ndGgpIHtcbiAgICBpZiAoXy5sYXN0KHBlcm1zU3RhY2spID09PSBwZXJtcykge1xuICAgICAgcGVybXNTdGFjay5wdXNoKHBlcm1zKTtcbiAgICAgIGxvZy5pbmZvKGBOb3QgY2hhbmdpbmcgcGVybWlzc2lvbnMgb2YgJyR7YXR0YWNobWVudHNGb2xkZXJ9JyB0byAnJHtwZXJtc30nLCBiZWNhdXNlIHRoZXkgd2VyZSBhbHJlYWR5IHNldCBieSB0aGUgb3RoZXIgc2Vzc2lvbmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGVybXNTdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICBwZXJtc1N0YWNrLnBvcCgpO1xuICAgICAgbG9nLmluZm8oYE5vdCBjaGFuZ2luZyBwZXJtaXNzaW9ucyBvZiAnJHthdHRhY2htZW50c0ZvbGRlcn0nIHRvICcke3Blcm1zfScsIGJlY2F1c2UgdGhlIG90aGVyIHNlc3Npb24gZG9lcyBub3QgZXhwZWN0IHRoZW0gdG8gYmUgY2hhbmdlZGApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkZXJpdmVkRGF0YVBlcm1pc3Npb25zU3RhY2tzLnNldChhdHRhY2htZW50c0ZvbGRlciwgW3Blcm1zXSk7XG5cbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyhhdHRhY2htZW50c0ZvbGRlcikpIHtcbiAgICBsb2cuaW5mbyhgU2V0dGluZyAnJHtwZXJtc30nIHBlcm1pc3Npb25zIHRvICcke2F0dGFjaG1lbnRzRm9sZGVyfScgZm9sZGVyYCk7XG4gICAgYXdhaXQgZnMuY2htb2QoYXR0YWNobWVudHNGb2xkZXIsIHBlcm1zKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nLmluZm8oYFRoZXJlIGlzIG5vICR7YXR0YWNobWVudHNGb2xkZXJ9IGZvbGRlciwgc28gbm90IGNoYW5naW5nIHBlcm1pc3Npb25zYCk7XG59XG5cbi8vIFRoaXMgbWFwIGNvbnRhaW5zIGRlcml2ZWQgZGF0YSBsb2dzIGZvbGRlcnMgYXMga2V5c1xuLy8gYW5kIHZhbHVlcyBhcmUgdGhlIGNvdW50IG9mIHRpbWVzIHRoZSBwYXJ0aWN1bGFyXG4vLyBmb2xkZXIgaGFzIGJlZW4gc2NoZWR1bGVkIGZvciByZW1vdmFsXG5jb25zdCBkZXJpdmVkRGF0YUNsZWFudXBNYXJrZXJzID0gbmV3IE1hcCgpO1xuXG5hc3luYyBmdW5jdGlvbiBtYXJrU3lzdGVtRmlsZXNGb3JDbGVhbnVwICh3ZGEpIHtcbiAgaWYgKCF3ZGEgfHwgIWF3YWl0IHdkYS5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpKSB7XG4gICAgbG9nLndhcm4oJ05vIFdlYkRyaXZlckFnZW50IGRlcml2ZWQgZGF0YSBhdmFpbGFibGUsIHNvIHVuYWJsZSB0byBtYXJrIHN5c3RlbSBmaWxlcyBmb3IgY2xlYW51cCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGxvZ3NSb290ID0gcGF0aC5yZXNvbHZlKGF3YWl0IHdkYS5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpLCAnTG9ncycpO1xuICBsZXQgbWFya2Vyc0NvdW50ID0gMDtcbiAgaWYgKGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuaGFzKGxvZ3NSb290KSkge1xuICAgIG1hcmtlcnNDb3VudCA9IGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuZ2V0KGxvZ3NSb290KTtcbiAgfVxuICBkZXJpdmVkRGF0YUNsZWFudXBNYXJrZXJzLnNldChsb2dzUm9vdCwgKyttYXJrZXJzQ291bnQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGVhclN5c3RlbUZpbGVzICh3ZGEpIHtcbiAgLy8gb25seSB3YW50IHRvIGNsZWFyIHRoZSBzeXN0ZW0gZmlsZXMgZm9yIHRoZSBwYXJ0aWN1bGFyIFdEQSB4Y29kZSBydW5cbiAgaWYgKCF3ZGEgfHwgIWF3YWl0IHdkYS5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpKSB7XG4gICAgbG9nLndhcm4oJ05vIFdlYkRyaXZlckFnZW50IGRlcml2ZWQgZGF0YSBhdmFpbGFibGUsIHNvIHVuYWJsZSB0byBjbGVhciBzeXN0ZW0gZmlsZXMnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBsb2dzUm9vdCA9IHBhdGgucmVzb2x2ZShhd2FpdCB3ZGEucmV0cmlldmVEZXJpdmVkRGF0YVBhdGgoKSwgJ0xvZ3MnKTtcbiAgaWYgKGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuaGFzKGxvZ3NSb290KSkge1xuICAgIGxldCBtYXJrZXJzQ291bnQgPSBkZXJpdmVkRGF0YUNsZWFudXBNYXJrZXJzLmdldChsb2dzUm9vdCk7XG4gICAgZGVyaXZlZERhdGFDbGVhbnVwTWFya2Vycy5zZXQobG9nc1Jvb3QsIC0tbWFya2Vyc0NvdW50KTtcbiAgICBpZiAobWFya2Vyc0NvdW50ID4gMCkge1xuICAgICAgbG9nLmluZm8oYE5vdCBjbGVhbmluZyAnJHtsb2dzUm9vdH0nIGZvbGRlciwgYmVjYXVzZSB0aGUgb3RoZXIgc2Vzc2lvbiBkb2VzIG5vdCBleHBlY3QgaXQgdG8gYmUgY2xlYW5lZGApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkZXJpdmVkRGF0YUNsZWFudXBNYXJrZXJzLnNldChsb2dzUm9vdCwgMCk7XG5cbiAgLy8gQ2xlYW5pbmcgdXAgYmlnIHRlbXBvcmFyeSBmaWxlcyBjcmVhdGVkIGJ5IFhDVGVzdDogaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzk0MTBcbiAgY29uc3QgY2xlYW51cENtZCA9IGBmaW5kIC1FIC9wcml2YXRlL3Zhci9mb2xkZXJzIGAgK1xuICAgIGAtcmVnZXggJy4qL1Nlc3Npb24tV2ViRHJpdmVyQWdlbnRSdW5uZXIuKlxcXFwubG9nJHwuKi9TdGFuZGFyZE91dHB1dEFuZFN0YW5kYXJkRXJyb3JcXFxcLnR4dCQnIGAgK1xuICAgIGAtdHlwZSBmIC1leGVjIHNoIC1jICdlY2hvIFwiXCIgPiBcInt9XCInIFxcXFw7YDtcbiAgY29uc3QgY2xlYW51cFRhc2sgPSBuZXcgU3ViUHJvY2VzcygnYmFzaCcsIFsnLWMnLCBjbGVhbnVwQ21kXSwge1xuICAgIGRldGFjaGVkOiB0cnVlLFxuICAgIHN0ZGlvOiBbJ2lnbm9yZScsICdwaXBlJywgJ3BpcGUnXSxcbiAgfSk7XG4gIC8vIERvIG5vdCB3YWl0IGZvciB0aGUgdGFzayB0byBiZSBjb21wbGV0ZWQsIHNpbmNlIGl0IG1pZ2h0IHRha2UgYSBsb3Qgb2YgdGltZVxuICAvLyBXZSBrZWVwIGl0IHJ1bm5pbmcgYWZ0ZXIgQXBwaXVtIHByb2Nlc3MgaXMga2lsbGVkXG4gIGF3YWl0IGNsZWFudXBUYXNrLnN0YXJ0KDAsIHRydWUpO1xuICBsb2cuZGVidWcoYFN0YXJ0ZWQgYmFja2dyb3VuZCBYQ1Rlc3QgbG9ncyBjbGVhbnVwOiAke2NsZWFudXBDbWR9YCk7XG5cbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyhsb2dzUm9vdCkpIHtcbiAgICBsb2cuaW5mbyhgQ2xlYW5pbmcgdGVzdCBsb2dzIGluICcke2xvZ3NSb290fScgZm9sZGVyYCk7XG4gICAgYXdhaXQgaW9zVXRpbHMuY2xlYXJMb2dzKFtsb2dzUm9vdF0pO1xuICAgIHJldHVybjtcbiAgfVxuICBsb2cuaW5mbyhgVGhlcmUgaXMgbm8gJHtsb2dzUm9vdH0gZm9sZGVyLCBzbyBub3QgY2xlYW5pbmcgZmlsZXNgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBcHBQcmVzZW50IChhcHApIHtcbiAgbG9nLmRlYnVnKGBDaGVja2luZyB3aGV0aGVyIGFwcCAnJHthcHB9JyBpcyBhY3R1YWxseSBwcmVzZW50IG9uIGZpbGUgc3lzdGVtYCk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyhhcHApKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZmluZCBhcHAgYXQgJyR7YXBwfSdgKTtcbiAgfVxuICBsb2cuZGVidWcoJ0FwcCBpcyBwcmVzZW50Jyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERyaXZlckluZm8gKCkge1xuICBsZXQgc3RhdCA9IGF3YWl0IGZzLnN0YXQocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJykpO1xuICBsZXQgYnVpbHQgPSBzdGF0Lm10aW1lLmdldFRpbWUoKTtcblxuICAvLyBnZXQgdGhlIHBhY2thZ2UuanNvbiBhbmQgdGhlIHZlcnNpb24gZnJvbSBpdFxuICBsZXQgcGtnID0gcmVxdWlyZShfX2ZpbGVuYW1lLmluZGV4T2YoJ2J1aWxkL2xpYi91dGlscycpICE9PSAtMSA/ICcuLi8uLi9wYWNrYWdlLmpzb24nIDogJy4uL3BhY2thZ2UuanNvbicpO1xuICBsZXQgdmVyc2lvbiA9IHBrZy52ZXJzaW9uO1xuXG4gIGxldCBpbmZvID0ge1xuICAgIGJ1aWx0LFxuICAgIHZlcnNpb24sXG4gIH07XG4gIHJldHVybiBpbmZvO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVDb21tYW5kVGltZW91dHMgKHZhbHVlKSB7XG4gIC8vIFRoZSB2YWx1ZSBpcyBub3JtYWxpemVkIGFscmVhZHlcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0ge307XG4gIC8vIFVzZSBhcyBkZWZhdWx0IHRpbWVvdXQgZm9yIGFsbCBjb21tYW5kcyBpZiBhIHNpbmdsZSBpbnRlZ2VyIHZhbHVlIGlzIHByb3ZpZGVkXG4gIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgcmVzdWx0W0RFRkFVTFRfVElNRU9VVF9LRVldID0gXy50b0ludGVnZXIodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBKU09OIG9iamVjdCBoYXMgYmVlbiBwcm92aWRlZC4gTGV0J3MgcGFyc2UgaXRcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICBpZiAoIV8uaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBcImNvbW1hbmRUaW1lb3V0c1wiIGNhcGFiaWxpdHkgc2hvdWxkIGJlIGEgdmFsaWQgSlNPTiBvYmplY3QuIFwiJHt2YWx1ZX1cIiB3YXMgZ2l2ZW4gaW5zdGVhZGApO1xuICB9XG4gIGZvciAobGV0IFtjbWQsIHRpbWVvdXRdIG9mIF8udG9QYWlycyhyZXN1bHQpKSB7XG4gICAgaWYgKCFfLmlzSW50ZWdlcih0aW1lb3V0KSB8fCB0aW1lb3V0IDw9IDApIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGUgdGltZW91dCBmb3IgXCIke2NtZH1cIiBzaG91bGQgYmUgYSB2YWxpZCBuYXR1cmFsIG51bWJlciBvZiBtaWxsaXNlY29uZHMuIFwiJHt0aW1lb3V0fVwiIHdhcyBnaXZlbiBpbnN0ZWFkYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcm9jZXNzIGlkIG9mIHRoZSBtb3N0IHJlY2VudCBydW5uaW5nIGFwcGxpY2F0aW9uXG4gKiBoYXZpbmcgdGhlIHBhcnRpY3VsYXIgY29tbWFuZCBsaW5lIHBhdHRlcm4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBncmVwUGF0dGVybiAtIHBncmVwLWNvbXBhdGlibGUgc2VhcmNoIHBhdHRlcm4uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEVpdGhlciBhIHByb2Nlc3MgaWQgb3IgbnVsbCBpZiBubyBtYXRjaGVzIHdlcmUgZm91bmQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFBpZFVzaW5nUGF0dGVybiAocGdyZXBQYXR0ZXJuKSB7XG4gIGNvbnN0IGFyZ3MgPSBbJy1uaWYnLCBwZ3JlcFBhdHRlcm5dO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygncGdyZXAnLCBhcmdzKTtcbiAgICBjb25zdCBwaWQgPSBwYXJzZUludChzdGRvdXQsIDEwKTtcbiAgICBpZiAoaXNOYU4ocGlkKSkge1xuICAgICAgbG9nLmRlYnVnKGBDYW5ub3QgcGFyc2UgcHJvY2VzcyBpZCBmcm9tICdwZ3JlcCAke2FyZ3Muam9pbignICcpfScgb3V0cHV0OiAke3N0ZG91dH1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cGlkfWA7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZyhgJ3BncmVwICR7YXJncy5qb2luKCcgJyl9JyBkaWRuJ3QgZGV0ZWN0IGFueSBtYXRjaGluZyBwcm9jZXNzZXMuIFJldHVybiBjb2RlOiAke2Vyci5jb2RlfWApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogS2lsbCBhIHByb2Nlc3MgaGF2aW5nIHRoZSBwYXJ0aWN1bGFyIGNvbW1hbmQgbGluZSBwYXR0ZXJuLlxuICogVGhpcyBtZXRob2QgdHJpZXMgdG8gc2VuZCBTSUdJTlQsIFNJR1RFUk0gYW5kIFNJR0tJTEwgdG8gdGhlXG4gKiBtYXRjaGVkIHByb2Nlc3NlcyBpbiB0aGlzIG9yZGVyIGlmIHRoZSBwcm9jZXNzIGlzIHN0aWxsIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBncmVwUGF0dGVybiAtIHBncmVwLWNvbXBhdGlibGUgc2VhcmNoIHBhdHRlcm4uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGtpbGxBcHBVc2luZ1BhdHRlcm4gKHBncmVwUGF0dGVybikge1xuICBmb3IgKGNvbnN0IHNpZ25hbCBvZiBbMiwgMTUsIDldKSB7XG4gICAgaWYgKCFhd2FpdCBnZXRQaWRVc2luZ1BhdHRlcm4ocGdyZXBQYXR0ZXJuKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhcmdzID0gW2AtJHtzaWduYWx9YCwgJy1pZicsIHBncmVwUGF0dGVybl07XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4ZWMoJ3BraWxsJywgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZGVidWcoYHBraWxsICR7YXJncy5qb2luKCcgJyl9IC0+ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIGF3YWl0IEIuZGVsYXkoMTAwKTtcbiAgfVxufVxuXG4vKipcbiAqIEtpbGxzIHJ1bm5pbmcgWENUZXN0IHByb2Nlc3NlcyBmb3IgdGhlIHBhcnRpY3VsYXIgZGV2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIC0gVGhlIGRldmljZSBVRElELlxuICogQHBhcmFtIHtib29sZWFufSBpc1NpbXVsYXRvciAtIEVxdWFscyB0byB0cnVlIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIFNpbXVsYXRvclxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZy4gUG9zc2libGUga2V5cyBhcmU6XG4gKiAgIC0ge3N0cmluZ3xudW1iZXJ9IHdkYUxvY2FsUG9ydDogVGhlIG51bWJlciBvZiBsb2NhbCBwb3J0IFdEQSBpcyBsaXN0ZW5pbmcgb24uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0WENUZXN0UHJvY2Vzc2VzICh1ZGlkLCBpc1NpbXVsYXRvciwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHByb2Nlc3NQYXR0ZXJucyA9IFtgeGNvZGVidWlsZC4qJHt1ZGlkfWBdO1xuICBpZiAob3B0cy53ZGFMb2NhbFBvcnQpIHtcbiAgICBwcm9jZXNzUGF0dGVybnMucHVzaChgaXByb3h5ICR7b3B0cy53ZGFMb2NhbFBvcnR9YCk7XG4gIH0gZWxzZSBpZiAoIWlzU2ltdWxhdG9yKSB7XG4gICAgcHJvY2Vzc1BhdHRlcm5zLnB1c2goYGlwcm94eS4qJHt1ZGlkfWApO1xuICB9XG4gIGlmIChpc1NpbXVsYXRvcikge1xuICAgIHByb2Nlc3NQYXR0ZXJucy5wdXNoKGAke3VkaWR9LipYQ1RSdW5uZXJgKTtcbiAgfVxuICBsb2cuZGVidWcoYEtpbGxpbmcgcnVubmluZyBwcm9jZXNzZXMgJyR7cHJvY2Vzc1BhdHRlcm5zLmpvaW4oJywgJyl9JyBmb3IgdGhlIGRldmljZSAke3VkaWR9Li4uYCk7XG4gIGZvciAoY29uc3QgcGdyZXBQYXR0ZXJuIG9mIHByb2Nlc3NQYXR0ZXJucykge1xuICAgIGF3YWl0IGtpbGxBcHBVc2luZ1BhdHRlcm4ocGdyZXBQYXR0ZXJuKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwcmludFVzZXIgKCkge1xuICB0cnkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3dob2FtaScpO1xuICAgIGxvZy5kZWJ1ZyhgQ3VycmVudCB1c2VyOiAnJHtzdGRvdXQudHJpbSgpfSdgKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGBVbmFibGUgdG8gZ2V0IHVzZXJuYW1lIHJ1bm5pbmcgc2VydmVyOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByaW50TGliaW1vYmlsZWRldmljZUluZm8gKCkge1xuICB0cnkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ2JyZXcnLCBbJ2luZm8nLCAnbGliaW1vYmlsZWRldmljZSddKTtcbiAgICBsZXQgbWF0Y2ggPSAvbGliaW1vYmlsZWRldmljZTooLispLy5leGVjKHN0ZG91dCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICBsb2cuZGVidWcoYEN1cnJlbnQgdmVyc2lvbiBvZiBsaWJpbW9iaWxlZGV2aWNlOiAke21hdGNoWzFdLnRyaW0oKX1gKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZyhgVW5hYmxlIHRvIGdldCB2ZXJzaW9uIG9mIGxpYmltb2JpbGVkZXZpY2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIElEcyBvZiBwcm9jZXNzZXMgbGlzdGVuaW5nIG9uIHRoZSBwYXJ0aWN1bGFyIHN5c3RlbSBwb3J0LlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBhcHBseSBhZGRpdGlvbmFsIGZpbHRlcmluZyBiYXNlZCBvbiB0aGVcbiAqIHByb2Nlc3MgY29tbWFuZCBsaW5lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gcG9ydCAtIFRoZSBwb3J0IG51bWJlci5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBmaWx0ZXJpbmdGdW5jIC0gT3B0aW9uYWwgbGFtYmRhIGZ1bmN0aW9uLCB3aGljaFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlcyBjb21tYW5kIGxpbmUgc3RyaW5nIG9mIHRoZSBwYXJ0aWN1bGFyIHByb2Nlc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuaW5nIG9uIGdpdmVuIHBvcnQsIGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHRydWUgb3IgZmFsc2UgdG8gaW5jbHVkZS9leGNsdWRlIHRoZSBjb3JyZXNwb25kaW5nIFBJRFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSByZXN1bHRpbmcgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gLSB0aGUgbGlzdCBvZiBtYXRjaGVkIHByb2Nlc3MgaWRzLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQSURzTGlzdGVuaW5nT25Qb3J0IChwb3J0LCBmaWx0ZXJpbmdGdW5jID0gbnVsbCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgdHJ5IHtcbiAgICAvLyBUaGlzIG9ubHkgd29ya3Mgc2luY2UgTWFjIE9TIFggRWwgQ2FwaXRhblxuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnbHNvZicsIFsnLXRpJywgYHRjcDoke3BvcnR9YF0pO1xuICAgIHJlc3VsdC5wdXNoKC4uLihzdGRvdXQudHJpbSgpLnNwbGl0KC9cXG4rLykpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIV8uaXNGdW5jdGlvbihmaWx0ZXJpbmdGdW5jKSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IEIuZmlsdGVyKHJlc3VsdCwgYXN5bmMgKHgpID0+IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3BzJywgWyctcCcsIHgsICctbycsICdjb21tYW5kJ10pO1xuICAgIHJldHVybiBhd2FpdCBmaWx0ZXJpbmdGdW5jKHN0ZG91dCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVwbG9hZE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVzZXIgLSBUaGUgbmFtZSBvZiB0aGUgdXNlciBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHBhc3MgLSBUaGUgcGFzc3dvcmQgZm9yIHRoZSByZW1vdGUgYXV0aGVudGljYXRpb24uIE9ubHkgd29ya3MgaWYgYHJlbW90ZVBhdGhgIGlzIHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZXRob2QgLSBUaGUgaHR0cCBtdWx0aXBhcnQgdXBsb2FkIG1ldGhvZCBuYW1lLiBUaGUgJ1BVVCcgb25lIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKi9cblxuXG4vKipcbiAqIEVuY29kZXMgdGhlIGdpdmVuIGxvY2FsIGZpbGUgdG8gYmFzZTY0IGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgc3RyaW5nXG4gKiBvciB1cGxvYWRzIGl0IHRvIGEgcmVtb3RlIHNlcnZlciB1c2luZyBodHRwL2h0dHBzIG9yIGZ0cCBwcm90b2NvbHNcbiAqIGlmIGByZW1vdGVQYXRoYCBpcyBzZXRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxGaWxlIC0gVGhlIHBhdGggdG8gYW4gZXhpc3RpbmcgbG9jYWwgZmlsZVxuICogQHBhcmFtIHs/c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHBhdGggdG8gdGhlIHJlbW90ZSBsb2NhdGlvbiwgd2hlcmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBzaG91bGQgYmUgdXBsb2FkZWRcbiAqIEBwYXJhbSB7P1VwbG9hZE9wdGlvbnN9IHVwbG9hZE9wdGlvbnMgLSBTZXQgb2YgdXBsb2FkIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEVpdGhlciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHVwbG9hZCB3YXMgc3VjY2Vzc2Z1bCBvclxuICogYmFzZTY0LWVuY29kZWQgZmlsZSByZXByZXNlbnRhdGlvbiBpZiBgcmVtb3RlUGF0aGAgaXMgZmFsc3lcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW5jb2RlQmFzZTY0T3JVcGxvYWQgKGxvY2FsRmlsZSwgcmVtb3RlUGF0aCA9IG51bGwsIHVwbG9hZE9wdGlvbnMgPSB7fSkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhsb2NhbEZpbGUpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZSBmaWxlIGF0ICcke2xvY2FsRmlsZX0nIGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBhY2Nlc3NpYmxlYCk7XG4gIH1cblxuICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KGxvY2FsRmlsZSk7XG4gIGxvZy5kZWJ1ZyhgVGhlIHNpemUgb2YgdGhlIGZpbGUgaXMgJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKHNpemUpfWApO1xuICBpZiAoXy5pc0VtcHR5KHJlbW90ZVBhdGgpKSB7XG4gICAgY29uc3QgbWF4TWVtb3J5TGltaXQgPSB2OC5nZXRIZWFwU3RhdGlzdGljcygpLnRvdGFsX2F2YWlsYWJsZV9zaXplIC8gMjtcbiAgICBpZiAoc2l6ZSA+PSBtYXhNZW1vcnlMaW1pdCkge1xuICAgICAgbG9nLmluZm8oYFRoZSBmaWxlIG1pZ2h0IGJlIHRvbyBsYXJnZSB0byBmaXQgaW50byB0aGUgcHJvY2VzcyBtZW1vcnkgYCArXG4gICAgICAgIGAoJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKHNpemUpfSA+PSAke3V0aWwudG9SZWFkYWJsZVNpemVTdHJpbmcobWF4TWVtb3J5TGltaXQpfSkuIGAgK1xuICAgICAgICBgUHJvdmlkZSBhIGxpbmsgdG8gYSByZW1vdGUgd3JpdGFibGUgbG9jYXRpb24gZm9yIHZpZGVvIHVwbG9hZCBgICtcbiAgICAgICAgYChodHRwKHMpIGFuZCBmdHAgcHJvdG9jb2xzIGFyZSBzdXBwb3J0ZWQpIGlmIHlvdSBleHBlcmllbmNlIE91dCBPZiBNZW1vcnkgZXJyb3JzYCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShsb2NhbEZpbGUpO1xuICAgIHJldHVybiBjb250ZW50LnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIGNvbnN0IHJlbW90ZVVybCA9IHVybC5wYXJzZShyZW1vdGVQYXRoKTtcbiAgbGV0IG9wdGlvbnMgPSB7fTtcbiAgY29uc3Qge3VzZXIsIHBhc3MsIG1ldGhvZH0gPSB1cGxvYWRPcHRpb25zO1xuICBpZiAocmVtb3RlVXJsLnByb3RvY29sLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICB1cmw6IHJlbW90ZVVybC5ocmVmLFxuICAgICAgbWV0aG9kOiBtZXRob2QgfHwgJ1BVVCcsXG4gICAgICBtdWx0aXBhcnQ6IFt7IGJvZHk6IF9mcy5jcmVhdGVSZWFkU3RyZWFtKGxvY2FsRmlsZSkgfV0sXG4gICAgfTtcbiAgICBpZiAodXNlciAmJiBwYXNzKSB7XG4gICAgICBvcHRpb25zLmF1dGggPSB7dXNlciwgcGFzc307XG4gICAgfVxuICB9IGVsc2UgaWYgKHJlbW90ZVVybC5wcm90b2NvbCA9PT0gJ2Z0cDonKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3Q6IHJlbW90ZVVybC5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6IHJlbW90ZVVybC5wb3J0IHx8IDIxLFxuICAgIH07XG4gICAgaWYgKHVzZXIgJiYgcGFzcykge1xuICAgICAgb3B0aW9ucy51c2VyID0gdXNlcjtcbiAgICAgIG9wdGlvbnMucGFzcyA9IHBhc3M7XG4gICAgfVxuICB9XG4gIGF3YWl0IG5ldC51cGxvYWRGaWxlKGxvY2FsRmlsZSwgcmVtb3RlUGF0aCwgb3B0aW9ucyk7XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBTdG9wcyBhbmQgcmVtb3ZlcyBhbGwgd2ViIHNvY2tldCBoYW5kbGVycyB0aGF0IGFyZSBsaXN0ZW5pbmdcbiAqIGluIHNjb3BlIG9mIHRoZSBjdXJyZWN0IHNlc3Npb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlcnZlciAtIFRoZSBpbnN0YW5jZSBvZiBOb2RlSnMgSFRUUCBzZXJ2ZXIsXG4gKiB3aGljaCBob3N0cyBBcHBpdW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgaWQgb2YgdGhlIGN1cnJlbnQgc2Vzc2lvblxuICovXG5hc3luYyBmdW5jdGlvbiByZW1vdmVBbGxTZXNzaW9uV2ViU29ja2V0SGFuZGxlcnMgKHNlcnZlciwgc2Vzc2lvbklkKSB7XG4gIGlmICghc2VydmVyIHx8ICFfLmlzRnVuY3Rpb24oc2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFjdGl2ZUhhbmRsZXJzID0gYXdhaXQgc2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKHNlc3Npb25JZCk7XG4gIGZvciAoY29uc3QgcGF0aG5hbWUgb2YgXy5rZXlzKGFjdGl2ZUhhbmRsZXJzKSkge1xuICAgIGF3YWl0IHNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVyKHBhdGhuYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIFZlcmlmeSB3aGV0aGVyIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiBpcyBjb21wYXRpYmxlIHRvIHRoZVxuICogcGxhdGZvcm0gd2hlcmUgaXQgaXMgZ29pbmcgdG8gYmUgaW5zdGFsbGVkIGFuZCB0ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcCAtIFRoZSBhY3R1YWwgcGF0aCB0byB0aGUgYXBwbGljYXRpb24gYnVuZGxlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2ltdWxhdG9yIC0gU2hvdWxkIGJlIHNldCB0byBgdHJ1ZWAgaWYgdGhlIHRlc3Qgd2lsbCBiZSBleGVjdXRlZCBvbiBTaW11bGF0b3JcbiAqIEByZXR1cm5zIHs/Ym9vbGVhbn0gVGhlIGZ1bmN0aW9uIHJldHVybnMgYG51bGxgIGlmIHRoZSBhcHBsaWNhdGlvbiBkb2VzIG5vdCBleGlzdCBvciB0aGVyZSBpcyBub1xuICogYENGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zYCBrZXkgaW4gaXRzIEluZm8ucGxpc3QgbWFuaWZlc3QuXG4gKiBgdHJ1ZWAgaXMgcmV0dXJuZWQgaWYgdGhlIGJ1bmRsZSBhcmNoaXRlY3R1cmUgbWF0Y2hlcyB0aGUgZGV2aWNlIGFyY2hpdGVjdHVyZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBidW5kbGUgYXJjaGl0ZWN0dXJlIGRvZXMgbm90IG1hdGNoIHRoZSBkZXZpY2UgYXJjaGl0ZWN0dXJlLlxuICovXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlBcHBsaWNhdGlvblBsYXRmb3JtIChhcHAsIGlzU2ltdWxhdG9yKSB7XG4gIGxvZy5kZWJ1ZygnVmVyaWZ5aW5nIGFwcGxpY2F0aW9uIHBsYXRmb3JtJyk7XG5cbiAgY29uc3QgaW5mb1BsaXN0ID0gcGF0aC5yZXNvbHZlKGFwcCwgJ0luZm8ucGxpc3QnKTtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHMoaW5mb1BsaXN0KSkge1xuICAgIGxvZy5kZWJ1ZyhgJyR7aW5mb1BsaXN0fScgZG9lcyBub3QgZXhpc3RgKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHtDRkJ1bmRsZVN1cHBvcnRlZFBsYXRmb3Jtc30gPSBhd2FpdCBwbGlzdC5wYXJzZVBsaXN0RmlsZShpbmZvUGxpc3QpO1xuICBsb2cuZGVidWcoYENGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zOiAke0pTT04uc3RyaW5naWZ5KENGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zKX1gKTtcbiAgaWYgKCFfLmlzQXJyYXkoQ0ZCdW5kbGVTdXBwb3J0ZWRQbGF0Zm9ybXMpKSB7XG4gICAgbG9nLmRlYnVnKGBDRkJ1bmRsZVN1cHBvcnRlZFBsYXRmb3JtcyBrZXkgZG9lcyBub3QgZXhpc3QgaW4gJyR7aW5mb1BsaXN0fSdgKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGlzQXBwU3VwcG9ydGVkID0gKGlzU2ltdWxhdG9yICYmIENGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zLmluY2x1ZGVzKCdpUGhvbmVTaW11bGF0b3InKSlcbiAgICB8fCAoIWlzU2ltdWxhdG9yICYmIENGQnVuZGxlU3VwcG9ydGVkUGxhdGZvcm1zLmluY2x1ZGVzKCdpUGhvbmVPUycpKTtcbiAgaWYgKGlzQXBwU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGAke2lzU2ltdWxhdG9yID8gJ1NpbXVsYXRvcicgOiAnUmVhbCBkZXZpY2UnfSBhcmNoaXRlY3R1cmUgaXMgdW5zdXBwb3J0ZWQgYnkgdGhlICcke2FwcH0nIGFwcGxpY2F0aW9uLiBgICtcbiAgICAgICAgICAgICAgICAgIGBNYWtlIHN1cmUgdGhlIGNvcnJlY3QgZGVwbG95bWVudCB0YXJnZXQgaGFzIGJlZW4gc2VsZWN0ZWQgZm9yIGl0cyBjb21waWxhdGlvbiBpbiBYY29kZS5gKTtcbn1cblxuZXhwb3J0IHsgZGV0ZWN0VWRpZCwgZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24sIGdldEFuZENoZWNrSW9zU2RrVmVyc2lvbixcbiAgYWRqdXN0V0RBQXR0YWNobWVudHNQZXJtaXNzaW9ucywgY2hlY2tBcHBQcmVzZW50LCBnZXREcml2ZXJJbmZvLFxuICBjbGVhclN5c3RlbUZpbGVzLCB0cmFuc2xhdGVEZXZpY2VOYW1lLCBub3JtYWxpemVDb21tYW5kVGltZW91dHMsXG4gIERFRkFVTFRfVElNRU9VVF9LRVksIHJlc2V0WENUZXN0UHJvY2Vzc2VzLCBnZXRQaWRVc2luZ1BhdHRlcm4sXG4gIG1hcmtTeXN0ZW1GaWxlc0ZvckNsZWFudXAsIHByaW50VXNlciwgcHJpbnRMaWJpbW9iaWxlZGV2aWNlSW5mbyxcbiAgZ2V0UElEc0xpc3RlbmluZ09uUG9ydCwgZW5jb2RlQmFzZTY0T3JVcGxvYWQsIHJlbW92ZUFsbFNlc3Npb25XZWJTb2NrZXRIYW5kbGVycyxcbiAgdmVyaWZ5QXBwbGljYXRpb25QbGF0Zm9ybSB9O1xuIl0sImZpbGUiOiJsaWIvdXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
