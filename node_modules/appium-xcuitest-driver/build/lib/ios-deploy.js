"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

const IOSDEPLOY_PATH = `ios-deploy`;

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
    this.cmd = IOSDEPLOY_PATH;
  }

  checkStatus() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _appiumSupport.fs.which(_this.cmd);
    })();
  }

  remove(bundleid) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let remove = [`--uninstall_only`, `--id`, _this2.udid, `--bundle_id`, bundleid];

      try {
        yield (0, _teen_process.exec)(_this2.cmd, remove);
      } catch (err) {
        _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

        throw new Error(`Could not remove app: '${err.message}'`);
      }
    })();
  }

  removeApp(bundleId) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this3.remove(bundleId);
    })();
  }

  install(app) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const args = [`--id`, _this4.udid, `--bundle`, app];

      try {
        yield (0, _asyncbox.retryInterval)(5, 500, _teen_process.exec, _this4.cmd, args);
      } catch (err) {
        _logger.default.debug(`Stdout: '${err.stdout}'. Stderr: '${err.stderr}'.`);

        throw new Error(`Could not install app: '${err.message}'`);
      }
    })();
  }

  installApp(app) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this5.install(app);
    })();
  }

  isAppInstalled(bundleid) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let isInstalled = [`--exists`, `--id`, _this6.udid, `--bundle_id`, bundleid];

      try {
        let _ref = yield (0, _teen_process.exec)(_this6.cmd, isInstalled),
            stdout = _ref.stdout;

        return stdout && stdout.indexOf("true") > -1;
      } catch (err) {
        if (err.code !== 255) {
          _logger.default.debug(`Error checking install status: '${err.message}'`);
        }

        return false;
      }
    })();
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtZGVwbG95LmpzIl0sIm5hbWVzIjpbIklPU0RFUExPWV9QQVRIIiwiSU9TRGVwbG95IiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwiY21kIiwiY2hlY2tTdGF0dXMiLCJmcyIsIndoaWNoIiwicmVtb3ZlIiwiYnVuZGxlaWQiLCJlcnIiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0ZG91dCIsInN0ZGVyciIsIkVycm9yIiwibWVzc2FnZSIsInJlbW92ZUFwcCIsImJ1bmRsZUlkIiwiaW5zdGFsbCIsImFwcCIsImFyZ3MiLCJleGVjIiwiaW5zdGFsbEFwcCIsImlzQXBwSW5zdGFsbGVkIiwiaXNJbnN0YWxsZWQiLCJpbmRleE9mIiwiY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxjQUFjLEdBQUksWUFBeEI7O0FBRUEsTUFBTUMsU0FBTixDQUFnQjtBQUVkQyxFQUFBQSxXQUFXLENBQUVDLElBQUYsRUFBUTtBQUNqQixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxHQUFMLEdBQVdKLGNBQVg7QUFDRDs7QUFFS0ssRUFBQUEsV0FBTixHQUFxQjtBQUFBOztBQUFBO0FBRW5CLFlBQU1DLGtCQUFHQyxLQUFILENBQVMsS0FBSSxDQUFDSCxHQUFkLENBQU47QUFGbUI7QUFHcEI7O0FBRUtJLEVBQUFBLE1BQU4sQ0FBY0MsUUFBZCxFQUF3QjtBQUFBOztBQUFBO0FBQ3RCLFVBQUlELE1BQU0sR0FBRyxDQUFFLGtCQUFGLEVBQXNCLE1BQXRCLEVBQTZCLE1BQUksQ0FBQ0wsSUFBbEMsRUFBeUMsYUFBekMsRUFBdURNLFFBQXZELENBQWI7O0FBQ0EsVUFBSTtBQUNGLGNBQU0sd0JBQUssTUFBSSxDQUFDTCxHQUFWLEVBQWVJLE1BQWYsQ0FBTjtBQUNELE9BRkQsQ0FFRSxPQUFPRSxHQUFQLEVBQVk7QUFDWkMsd0JBQU9DLEtBQVAsQ0FBYyxZQUFXRixHQUFHLENBQUNHLE1BQU8sZUFBY0gsR0FBRyxDQUFDSSxNQUFPLElBQTdEOztBQUNBLGNBQU0sSUFBSUMsS0FBSixDQUFXLDBCQUF5QkwsR0FBRyxDQUFDTSxPQUFRLEdBQWhELENBQU47QUFDRDtBQVBxQjtBQVF2Qjs7QUFFS0MsRUFBQUEsU0FBTixDQUFpQkMsUUFBakIsRUFBMkI7QUFBQTs7QUFBQTtBQUN6QixZQUFNLE1BQUksQ0FBQ1YsTUFBTCxDQUFZVSxRQUFaLENBQU47QUFEeUI7QUFFMUI7O0FBRUtDLEVBQUFBLE9BQU4sQ0FBZUMsR0FBZixFQUFvQjtBQUFBOztBQUFBO0FBQ2xCLFlBQU1DLElBQUksR0FBRyxDQUFFLE1BQUYsRUFBUyxNQUFJLENBQUNsQixJQUFkLEVBQXFCLFVBQXJCLEVBQWdDaUIsR0FBaEMsQ0FBYjs7QUFDQSxVQUFJO0FBQ0YsY0FBTSw2QkFBYyxDQUFkLEVBQWlCLEdBQWpCLEVBQXNCRSxrQkFBdEIsRUFBNEIsTUFBSSxDQUFDbEIsR0FBakMsRUFBc0NpQixJQUF0QyxDQUFOO0FBQ0QsT0FGRCxDQUVFLE9BQU9YLEdBQVAsRUFBWTtBQUNaQyx3QkFBT0MsS0FBUCxDQUFjLFlBQVdGLEdBQUcsQ0FBQ0csTUFBTyxlQUFjSCxHQUFHLENBQUNJLE1BQU8sSUFBN0Q7O0FBQ0EsY0FBTSxJQUFJQyxLQUFKLENBQVcsMkJBQTBCTCxHQUFHLENBQUNNLE9BQVEsR0FBakQsQ0FBTjtBQUNEO0FBUGlCO0FBUW5COztBQUVLTyxFQUFBQSxVQUFOLENBQWtCSCxHQUFsQixFQUF1QjtBQUFBOztBQUFBO0FBQ3JCLFlBQU0sTUFBSSxDQUFDRCxPQUFMLENBQWFDLEdBQWIsQ0FBTjtBQURxQjtBQUV0Qjs7QUFFS0ksRUFBQUEsY0FBTixDQUFzQmYsUUFBdEIsRUFBZ0M7QUFBQTs7QUFBQTtBQUM5QixVQUFJZ0IsV0FBVyxHQUFHLENBQUUsVUFBRixFQUFjLE1BQWQsRUFBcUIsTUFBSSxDQUFDdEIsSUFBMUIsRUFBaUMsYUFBakMsRUFBK0NNLFFBQS9DLENBQWxCOztBQUNBLFVBQUk7QUFBQSx5QkFDbUIsd0JBQUssTUFBSSxDQUFDTCxHQUFWLEVBQWVxQixXQUFmLENBRG5CO0FBQUEsWUFDR1osTUFESCxRQUNHQSxNQURIOztBQUVGLGVBQVFBLE1BQU0sSUFBS0EsTUFBTSxDQUFDYSxPQUFQLENBQWUsTUFBZixJQUF5QixDQUFDLENBQTdDO0FBQ0QsT0FIRCxDQUdFLE9BQU9oQixHQUFQLEVBQVk7QUFFWixZQUFJQSxHQUFHLENBQUNpQixJQUFKLEtBQWEsR0FBakIsRUFBc0I7QUFDcEJoQiwwQkFBT0MsS0FBUCxDQUFjLG1DQUFrQ0YsR0FBRyxDQUFDTSxPQUFRLEdBQTVEO0FBQ0Q7O0FBQ0QsZUFBTyxLQUFQO0FBQ0Q7QUFYNkI7QUFZL0I7O0FBcERhOztlQXVERGYsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5cbmNvbnN0IElPU0RFUExPWV9QQVRIID0gYGlvcy1kZXBsb3lgO1xuXG5jbGFzcyBJT1NEZXBsb3kge1xuXG4gIGNvbnN0cnVjdG9yICh1ZGlkKSB7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLmNtZCA9IElPU0RFUExPWV9QQVRIOyAvLyB0aGlzLmNtZCBpcyBpbiBhY2NvcmRhbmNlIHdpdGggaURldmljZVxuICB9XG5cbiAgYXN5bmMgY2hlY2tTdGF0dXMgKCkge1xuICAgIC8vIG1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIHRoZSBwcm9ncmFtXG4gICAgYXdhaXQgZnMud2hpY2godGhpcy5jbWQpO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlIChidW5kbGVpZCkge1xuICAgIGxldCByZW1vdmUgPSBbYC0tdW5pbnN0YWxsX29ubHlgLCBgLS1pZGAsIHRoaXMudWRpZCwgYC0tYnVuZGxlX2lkYCwgYnVuZGxlaWRdO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBleGVjKHRoaXMuY21kLCByZW1vdmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBTdGRvdXQ6ICcke2Vyci5zdGRvdXR9Jy4gU3RkZXJyOiAnJHtlcnIuc3RkZXJyfScuYCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCByZW1vdmUgYXBwOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQXBwIChidW5kbGVJZCkge1xuICAgIGF3YWl0IHRoaXMucmVtb3ZlKGJ1bmRsZUlkKTtcbiAgfVxuXG4gIGFzeW5jIGluc3RhbGwgKGFwcCkge1xuICAgIGNvbnN0IGFyZ3MgPSBbYC0taWRgLCB0aGlzLnVkaWQsIGAtLWJ1bmRsZWAsIGFwcF07XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoNSwgNTAwLCBleGVjLCB0aGlzLmNtZCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFN0ZG91dDogJyR7ZXJyLnN0ZG91dH0nLiBTdGRlcnI6ICcke2Vyci5zdGRlcnJ9Jy5gKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGluc3RhbGwgYXBwOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEFwcCAoYXBwKSB7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwcCk7XG4gIH1cblxuICBhc3luYyBpc0FwcEluc3RhbGxlZCAoYnVuZGxlaWQpIHtcbiAgICBsZXQgaXNJbnN0YWxsZWQgPSBbYC0tZXhpc3RzYCwgYC0taWRgLCB0aGlzLnVkaWQsIGAtLWJ1bmRsZV9pZGAsIGJ1bmRsZWlkXTtcbiAgICB0cnkge1xuICAgICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmNtZCwgaXNJbnN0YWxsZWQpO1xuICAgICAgcmV0dXJuIChzdGRvdXQgJiYgKHN0ZG91dC5pbmRleE9mKFwidHJ1ZVwiKSA+IC0xKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBlcnJvciAyNTUgaXMganVzdCBpb3MtZGVwbG95J3Mgd2F5IG9mIHNheWluZyBpdCBpcyBub3QgaW5zdGFsbGVkXG4gICAgICBpZiAoZXJyLmNvZGUgIT09IDI1NSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoYEVycm9yIGNoZWNraW5nIGluc3RhbGwgc3RhdHVzOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElPU0RlcGxveTtcbiJdLCJmaWxlIjoibGliL2lvcy1kZXBsb3kuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
