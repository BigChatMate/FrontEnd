"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XCUITestDriver = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

var _nodeSimctl = require("node-simctl");

var _webdriveragent = _interopRequireDefault(require("./wda/webdriveragent"));

var _logger = _interopRequireDefault(require("./logger"));

var _simulatorManagement = require("./simulator-management");

var _appiumIosSimulator = require("appium-ios-simulator");

var _asyncbox = require("asyncbox");

var _appiumIosDriver = require("appium-ios-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _utils = require("./utils");

var _realDeviceManagement = require("./real-device-management");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const WDA_SIM_STARTUP_RETRIES = 2;
const WDA_REAL_DEV_STARTUP_RETRIES = 1;
const WDA_REAL_DEV_TUTORIAL_URL = 'https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md';
const WDA_STARTUP_RETRY_INTERVAL = 10000;
const DEFAULT_SETTINGS = {
  nativeWebTap: false,
  useJSONSource: false,
  shouldUseCompactResponses: true,
  elementResponseAttributes: "type,label",
  mjpegServerScreenshotQuality: 25,
  mjpegServerFramerate: 10
};
const SHARED_RESOURCES_GUARD = new _asyncLock.default();
const NO_PROXY_NATIVE_LIST = [['DELETE', /window/], ['GET', /^\/session\/[^\/]+$/], ['GET', /alert_text/], ['GET', /alert\/[^\/]+/], ['GET', /appium/], ['GET', /attribute/], ['GET', /context/], ['GET', /location/], ['GET', /log/], ['GET', /screenshot/], ['GET', /size/], ['GET', /source/], ['GET', /url/], ['GET', /window/], ['POST', /accept_alert/], ['POST', /actions$/], ['POST', /alert_text/], ['POST', /alert\/[^\/]+/], ['POST', /appium/], ['POST', /appium\/device\/is_locked/], ['POST', /appium\/device\/lock/], ['POST', /appium\/device\/unlock/], ['POST', /back/], ['POST', /clear/], ['POST', /context/], ['POST', /dismiss_alert/], ['POST', /element$/], ['POST', /elements$/], ['POST', /execute/], ['POST', /keys/], ['POST', /log/], ['POST', /moveto/], ['POST', /receive_async_response/], ['POST', /session\/[^\/]+\/location/], ['POST', /shake/], ['POST', /timeouts/], ['POST', /touch/], ['POST', /url/], ['POST', /value/], ['POST', /window/]];
const NO_PROXY_WEB_LIST = [['DELETE', /cookie/], ['GET', /attribute/], ['GET', /cookie/], ['GET', /element/], ['GET', /text/], ['GET', /title/], ['POST', /clear/], ['POST', /click/], ['POST', /cookie/], ['POST', /element/], ['POST', /forward/], ['POST', /frame/], ['POST', /keys/], ['POST', /refresh/]].concat(NO_PROXY_NATIVE_LIST);
const MEMOIZED_FUNCTIONS = ['getWindowSizeNative', 'getWindowSizeWeb', 'getStatusBarHeight', 'getDevicePixelRatio', 'getScreenInfo', 'getSafariIsIphone', 'getSafariIsIphoneX'];

class XCUITestDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', '-ios predicate string', '-ios class chain', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'link text', 'partial link text'];
    this.resetIos();
    this.settings = new _appiumBaseDriver.DeviceSettings(DEFAULT_SETTINGS, this.onSettingsUpdate.bind(this));

    for (var _i = 0; _i < MEMOIZED_FUNCTIONS.length; _i++) {
      const fn = MEMOIZED_FUNCTIONS[_i];
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }

  onSettingsUpdate(key, value) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (key !== 'nativeWebTap') {
        return yield _this.proxyCommand('/appium/settings', 'POST', {
          settings: {
            [key]: value
          }
        });
      }

      _this.opts.nativeWebTap = !!value;
    })();
  }

  resetIos() {
    this.opts = this.opts || {};
    this.wda = null;
    this.opts.device = null;
    this.jwpProxyActive = false;
    this.proxyReqRes = null;
    this.jwpProxyAvoid = [];
    this.safari = false;
    this.cachedWdaStatus = null;
    this.curWebFrames = [];
    this.webElementIds = [];
    this._currentUrl = null;
    this.curContext = null;
    this.xcodeVersion = {};
    this.iosSdkVersion = null;
    this.contexts = [];
    this.implicitWaitMs = 0;
    this.asynclibWaitMs = 0;
    this.pageLoadMs = 6000;
    this.landscapeWebCoordsOffset = 0;
  }

  get driverData() {
    return {};
  }

  getStatus() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (typeof _this2.driverInfo === 'undefined') {
        _this2.driverInfo = yield (0, _utils.getDriverInfo)();
      }

      let status = {
        build: {
          version: _this2.driverInfo.version
        }
      };

      if (_this2.cachedWdaStatus) {
        status.wda = _this2.cachedWdaStatus;
      }

      return status;
    })();
  }

  createSession(...args) {
    var _this3 = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.lifecycleData = {};

      try {
        let _ref = yield _superprop_callCreateSession(...args),
            _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            sessionId = _ref2[0],
            caps = _ref2[1];

        _this3.opts.sessionId = sessionId;
        yield _this3.start();
        caps = Object.assign({}, _appiumIosDriver.defaultServerCaps, caps);
        caps.udid = _this3.opts.udid;

        if (_lodash.default.has(_this3.opts, 'nativeWebTap')) {
          yield _this3.updateSettings({
            nativeWebTap: _this3.opts.nativeWebTap
          });
        }

        if (_lodash.default.has(_this3.opts, 'useJSONSource')) {
          yield _this3.updateSettings({
            useJSONSource: _this3.opts.useJSONSource
          });
        }

        let wdaSettings = {
          elementResponseAttributes: DEFAULT_SETTINGS.elementResponseAttributes,
          shouldUseCompactResponses: DEFAULT_SETTINGS.shouldUseCompactResponses,
          mjpegServerScreenshotQuality: DEFAULT_SETTINGS.mjpegServerScreenshotQuality,
          mjpegServerFramerate: DEFAULT_SETTINGS.mjpegServerFramerate
        };

        if (_lodash.default.has(_this3.opts, 'elementResponseAttributes')) {
          wdaSettings.elementResponseAttributes = _this3.opts.elementResponseAttributes;
        }

        if (_lodash.default.has(_this3.opts, 'shouldUseCompactResponses')) {
          wdaSettings.shouldUseCompactResponses = _this3.opts.shouldUseCompactResponses;
        }

        if (_lodash.default.has(_this3.opts, 'mjpegServerScreenshotQuality')) {
          wdaSettings.mjpegServerScreenshotQuality = _this3.opts.mjpegServerScreenshotQuality;
        }

        if (_lodash.default.has(_this3.opts, 'mjpegServerFramerate')) {
          wdaSettings.mjpegServerFramerate = _this3.opts.mjpegServerFramerate;
        }

        yield _this3.updateSettings(wdaSettings);

        if (_this3.opts.mjpegScreenshotUrl) {
          _logger.default.info(`Starting MJPEG stream reading URL: '${_this3.opts.mjpegScreenshotUrl}'`);

          _this3.mjpegStream = new _appiumSupport.mjpeg.MJpegStream(_this3.opts.mjpegScreenshotUrl);
          yield _this3.mjpegStream.start();
        }

        return [sessionId, caps];
      } catch (e) {
        _logger.default.error(e);

        yield _this3.deleteSession();
        throw e;
      }
    })();
  }

  start() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this4.opts.noReset = !!_this4.opts.noReset;
      _this4.opts.fullReset = !!_this4.opts.fullReset;
      yield (0, _utils.printUser)();

      if (_this4.opts.platformVersion && parseFloat(_this4.opts.platformVersion) < 9.3) {
        throw Error(`Platform version must be 9.3 or above. '${_this4.opts.platformVersion}' is not supported.`);
      }

      const _ref3 = yield _this4.determineDevice(),
            device = _ref3.device,
            udid = _ref3.udid,
            realDevice = _ref3.realDevice;

      _logger.default.info(`Determining device to run tests on: udid: '${udid}', real device: ${realDevice}`);

      _this4.opts.device = device;
      _this4.opts.udid = udid;
      _this4.opts.realDevice = realDevice;

      if (_lodash.default.isEmpty(_this4.xcodeVersion) && (!_this4.opts.webDriverAgentUrl || !_this4.opts.realDevice)) {
        _this4.xcodeVersion = yield (0, _utils.getAndCheckXcodeVersion)();
        const tools = !_this4.xcodeVersion.toolsVersion ? '' : `(tools v${_this4.xcodeVersion.toolsVersion})`;

        _logger.default.debug(`Xcode version set to '${_this4.xcodeVersion.versionString}' ${tools}`);

        _this4.iosSdkVersion = yield (0, _utils.getAndCheckIosSdkVersion)();

        _logger.default.debug(`iOS SDK Version set to '${_this4.iosSdkVersion}'`);
      }

      _this4.logEvent('xcodeDetailsRetrieved');

      if (_this4.opts.enableAsyncExecuteFromHttps && !_this4.isRealDevice()) {
        yield (0, _simulatorManagement.shutdownSimulator)(_this4.opts.device);
        yield _this4.startHttpsAsyncServer();
      }

      if (!_this4.opts.platformVersion) {
        if (_this4.opts.device && _lodash.default.isFunction(_this4.opts.device.getPlatformVersion)) {
          _this4.opts.platformVersion = yield _this4.opts.device.getPlatformVersion();

          _logger.default.info(`No platformVersion specified. Using device version: '${_this4.opts.platformVersion}'`);
        } else {}
      }

      if (!_this4.opts.webDriverAgentUrl && _this4.iosSdkVersion) {
        if (parseFloat(_this4.opts.platformVersion) > parseFloat(_this4.iosSdkVersion)) {
          let msg = `Xcode ${_this4.xcodeVersion.versionString} has a maximum SDK version of ${_this4.iosSdkVersion}. ` + `It does not support iOS version ${_this4.opts.platformVersion}`;

          _logger.default.errorAndThrow(msg);
        }
      } else {
        _logger.default.debug('Xcode version will not be validated against iOS SDK version.');
      }

      if ((_this4.opts.browserName || '').toLowerCase() === 'safari') {
        _logger.default.info('Safari test requested');

        _this4.safari = true;
        _this4.opts.app = undefined;
        _this4.opts.processArguments = _this4.opts.processArguments || {};
        _this4.opts.bundleId = SAFARI_BUNDLE_ID;
        _this4._currentUrl = _this4.opts.safariInitialUrl || (_this4.isRealDevice() ? 'http://appium.io' : `http://${_this4.opts.address}:${_this4.opts.port}/welcome`);
        _this4.opts.processArguments.args = ['-u', _this4._currentUrl];
      } else {
        yield _this4.configureApp();
      }

      _this4.logEvent('appConfigured');

      if (_this4.opts.app) {
        yield (0, _utils.checkAppPresent)(_this4.opts.app);
      }

      if (!_this4.opts.bundleId) {
        _this4.opts.bundleId = yield _appiumIosDriver.appUtils.extractBundleId(_this4.opts.app);
      }

      yield _this4.runReset();

      const startLogCapture = function () {
        var _ref4 = (0, _asyncToGenerator2.default)(function* () {
          const result = yield _this4.startLogCapture();

          if (result) {
            _this4.logEvent('logCaptureStarted');
          }

          return result;
        });

        return function startLogCapture() {
          return _ref4.apply(this, arguments);
        };
      }();

      const isLogCaptureStarted = yield startLogCapture();

      _logger.default.info(`Setting up ${_this4.isRealDevice() ? 'real device' : 'simulator'}`);

      if (_this4.isSimulator()) {
        if (_this4.opts.shutdownOtherSimulators) {
          if (!_this4.relaxedSecurityEnabled) {
            _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for 'shutdownOtherSimulators' capability to work`);
          }

          yield (0, _simulatorManagement.shutdownOtherSimulators)(_this4.opts.device);
        }

        if (_appiumSupport.util.hasValue(_this4.opts.reduceMotion)) {
          yield _this4.opts.device.setReduceMotion(_this4.opts.reduceMotion);
        }

        _this4.localConfig = yield _appiumIosDriver.settings.setLocaleAndPreferences(_this4.opts.device, _this4.opts, _this4.isSafari(), function () {
          var _ref5 = (0, _asyncToGenerator2.default)(function* (sim) {
            yield (0, _simulatorManagement.shutdownSimulator)(sim);
            yield _appiumIosDriver.settings.setLocaleAndPreferences(sim, _this4.opts, _this4.isSafari());
          });

          return function (_x) {
            return _ref5.apply(this, arguments);
          };
        }());
        yield _this4.startSim();

        if (_this4.opts.customSSLCert) {
          if (yield (0, _appiumIosSimulator.hasSSLCert)(_this4.opts.customSSLCert, _this4.opts.udid)) {
            _logger.default.info(`SSL cert '${_lodash.default.truncate(_this4.opts.customSSLCert, {
              length: 20
            })}' already installed`);
          } else {
            _logger.default.info(`Installing ssl cert '${_lodash.default.truncate(_this4.opts.customSSLCert, {
              length: 20
            })}'`);

            yield (0, _simulatorManagement.shutdownSimulator)(_this4.opts.device);
            yield (0, _appiumIosSimulator.installSSLCert)(_this4.opts.customSSLCert, _this4.opts.udid);

            _logger.default.info(`Restarting Simulator so that SSL certificate installation takes effect`);

            yield _this4.startSim();

            _this4.logEvent('customCertInstalled');
          }
        }

        _this4.logEvent('simStarted');

        if (!isLogCaptureStarted) {
          yield startLogCapture();
        }
      }

      if (_this4.opts.app) {
        yield _this4.installAUT();

        _this4.logEvent('appInstalled');
      }

      if (!_this4.opts.app && _this4.opts.bundleId && !_this4.safari) {
        if (!(yield _this4.opts.device.isAppInstalled(_this4.opts.bundleId))) {
          _logger.default.errorAndThrow(`App with bundle identifier '${_this4.opts.bundleId}' unknown`);
        }
      }

      if (_this4.opts.permissions) {
        if (_this4.isSimulator()) {
          _logger.default.debug('Setting the requested permissions before WDA is started');

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = _lodash.default.toPairs(JSON.parse(_this4.opts.permissions))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
                    bundleId = _step$value[0],
                    permissionsMapping = _step$value[1];

              yield _this4.opts.device.setPermissions(bundleId, permissionsMapping);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          _logger.default.warn('Setting permissions is only supported on Simulator. ' + 'The "permissions" capability will be ignored.');
        }
      }

      yield SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, (0, _asyncToGenerator2.default)(function* () {
        return yield _this4.startWda(_this4.opts.sessionId, realDevice);
      }));
      yield _this4.setInitialOrientation(_this4.opts.orientation);

      _this4.logEvent('orientationSet');

      if (_this4.isRealDevice() && _this4.opts.startIWDP) {
        try {
          yield _this4.startIWDP();

          _logger.default.debug(`Started ios_webkit_debug proxy server at: ${_this4.iwdpServer.endpoint}`);
        } catch (err) {
          _logger.default.errorAndThrow(`Could not start ios_webkit_debug_proxy server: ${err.message}`);
        }
      }

      if (_this4.isSafari() || _this4.opts.autoWebview) {
        _logger.default.debug('Waiting for initial webview');

        yield _this4.navToInitialWebview();

        _this4.logEvent('initialWebviewNavigated');
      }

      if (!_this4.isRealDevice()) {
        if (_this4.opts.calendarAccessAuthorized) {
          yield _this4.opts.device.enableCalendarAccess(_this4.opts.bundleId);
        } else if (_this4.opts.calendarAccessAuthorized === false) {
          yield _this4.opts.device.disableCalendarAccess(_this4.opts.bundleId);
        }
      }
    })();
  }

  startWda(sessionId, realDevice) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this5.wda = new _webdriveragent.default(_this5.xcodeVersion, _this5.opts);
      yield _this5.wda.cleanupObsoleteProcesses();

      if (_this5.opts.useNewWDA) {
        _logger.default.debug(`Capability 'useNewWDA' set to true, so uninstalling WDA before proceeding`);

        yield _this5.wda.quitAndUninstall();

        _this5.logEvent('wdaUninstalled');
      } else if (!_appiumSupport.util.hasValue(_this5.wda.webDriverAgentUrl)) {
        yield _this5.wda.setupCaching(_this5.opts.updatedWDABundleId);
      }

      const quitAndUninstall = function () {
        var _ref7 = (0, _asyncToGenerator2.default)(function* (msg) {
          _logger.default.debug(msg);

          if (_this5.opts.webDriverAgentUrl) {
            _logger.default.debug('Not quitting and unsinstalling WebDriverAgent as webDriverAgentUrl is provided');

            throw new Error(msg);
          }

          _logger.default.warn('Quitting and uninstalling WebDriverAgent, then retrying');

          yield _this5.wda.quitAndUninstall();
          throw new Error(msg);
        });

        return function quitAndUninstall(_x2) {
          return _ref7.apply(this, arguments);
        };
      }();

      const startupRetries = _this5.opts.wdaStartupRetries || (_this5.isRealDevice() ? WDA_REAL_DEV_STARTUP_RETRIES : WDA_SIM_STARTUP_RETRIES);
      const startupRetryInterval = _this5.opts.wdaStartupRetryInterval || WDA_STARTUP_RETRY_INTERVAL;

      _logger.default.debug(`Trying to start WebDriverAgent ${startupRetries} times with ${startupRetryInterval}ms interval`);

      yield (0, _asyncbox.retryInterval)(startupRetries, startupRetryInterval, (0, _asyncToGenerator2.default)(function* () {
        _this5.logEvent('wdaStartAttempted');

        try {
          const retries = _this5.xcodeVersion.major >= 10 ? 2 : 1;
          _this5.cachedWdaStatus = yield (0, _asyncbox.retry)(retries, _this5.wda.launch.bind(_this5.wda), sessionId, realDevice);
        } catch (err) {
          _this5.logEvent('wdaStartFailed');

          let errorMsg = `Unable to launch WebDriverAgent because of xcodebuild failure: "${err.message}".`;

          if (_this5.isRealDevice()) {
            errorMsg += ` Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
          }

          yield quitAndUninstall(errorMsg);
        }

        _this5.proxyReqRes = _this5.wda.proxyReqRes.bind(_this5.wda);
        _this5.jwpProxyActive = true;

        try {
          yield (0, _asyncbox.retryInterval)(15, 1000, (0, _asyncToGenerator2.default)(function* () {
            _this5.logEvent('wdaSessionAttempted');

            _logger.default.debug('Sending createSession command to WDA');

            try {
              _this5.cachedWdaStatus = _this5.cachedWdaStatus || (yield _this5.proxyCommand('/status', 'GET'));
              yield _this5.startWdaSession(_this5.opts.bundleId, _this5.opts.processArguments);
            } catch (err) {
              _logger.default.debug(`Failed to create WDA session (${err.message}). Retrying...`);

              throw err;
            }
          }));

          _this5.logEvent('wdaSessionStarted');
        } catch (err) {
          let errorMsg = `Unable to start WebDriverAgent session because of xcodebuild failure: ${err.message}`;

          if (_this5.isRealDevice()) {
            errorMsg += ` Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
          }

          yield quitAndUninstall(errorMsg);
        }

        if (!_appiumSupport.util.hasValue(_this5.opts.preventWDAAttachments)) {
          _this5.opts.preventWDAAttachments = _this5.xcodeVersion.major < 9;

          if (_this5.opts.preventWDAAttachments) {
            _logger.default.info('Enabled WDA attachments prevention by default to save the disk space. ' + `Set 'preventWDAAttachments' capability to false if this is an undesired behavior.`);
          }
        }

        if (_this5.opts.preventWDAAttachments) {
          yield (0, _utils.adjustWDAAttachmentsPermissions)(_this5.wda, _this5.opts.preventWDAAttachments ? '555' : '755');

          _this5.logEvent('wdaPermsAdjusted');
        }

        if (_this5.opts.clearSystemFiles) {
          yield (0, _utils.markSystemFilesForCleanup)(_this5.wda);
        }

        _this5.wda.fullyStarted = true;

        _this5.logEvent('wdaStarted');
      }));
    })();
  }

  runReset(opts = null) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this6.logEvent('resetStarted');

      if (_this6.isRealDevice()) {
        yield (0, _realDeviceManagement.runRealDeviceReset)(_this6.opts.device, opts || _this6.opts);
      } else {
        yield (0, _simulatorManagement.runSimulatorReset)(_this6.opts.device, opts || _this6.opts);
      }

      _this6.logEvent('resetComplete');
    })();
  }

  deleteSession() {
    var _this7 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _utils.removeAllSessionWebSocketHandlers)(_this7.server, _this7.sessionId);
      yield SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, (0, _asyncToGenerator2.default)(function* () {
        yield _this7.stop();

        if (_this7.opts.preventWDAAttachments) {
          yield (0, _utils.adjustWDAAttachmentsPermissions)(_this7.wda, '755');
        }

        if (_this7.opts.clearSystemFiles) {
          if (_this7.isAppTemporary) {
            yield _appiumSupport.fs.rimraf(_this7.opts.app);
          }

          yield (0, _utils.clearSystemFiles)(_this7.wda, !!_this7.opts.showXcodeLog);
        } else {
          _logger.default.debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');
        }
      }));

      if (_this7.isWebContext()) {
        _logger.default.debug('In a web session. Removing remote debugger');

        yield _this7.stopRemote();
      }

      if (_this7.opts.resetOnSessionStartOnly === false) {
        yield _this7.runReset();
      }

      if (_this7.isSimulator() && !_this7.opts.noReset && !!_this7.opts.device) {
        if (_this7.lifecycleData.createSim) {
          _logger.default.debug(`Deleting simulator created for this run (udid: '${_this7.opts.udid}')`);

          yield (0, _simulatorManagement.shutdownSimulator)(_this7.opts.device);
          yield _this7.opts.device.delete();
        }
      }

      if (!_lodash.default.isEmpty(_this7.logs)) {
        yield _this7.logs.syslog.stopCapture();
        _this7.logs = {};
      }

      if (_this7.iwdpServer) {
        yield _this7.stopIWDP();
      }

      if (_this7.opts.enableAsyncExecuteFromHttps && !_this7.isRealDevice()) {
        yield _this7.stopHttpsAsyncServer();
      }

      if (_this7.mjpegStream) {
        _logger.default.info('Closing MJPEG stream');

        _this7.mjpegStream.stop();
      }

      _this7.resetIos();

      yield _superprop_callDeleteSession();
    })();
  }

  stop() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this8.jwpProxyActive = false;
      _this8.proxyReqRes = null;

      if (_this8.wda && _this8.wda.fullyStarted) {
        if (_this8.wda.jwproxy) {
          try {
            yield _this8.proxyCommand(`/session/${_this8.sessionId}`, 'DELETE');
          } catch (err) {
            _logger.default.debug(`Unable to DELETE session on WDA: '${err.message}'. Continuing shutdown.`);
          }
        }

        if (_this8.wda && !_this8.wda.webDriverAgentUrl && _this8.opts.useNewWDA) {
          yield _this8.wda.quit();
        }
      }
    })();
  }

  executeCommand(cmd, ...args) {
    var _this9 = this,
        _superprop_callExecuteCommand = (..._args3) => super.executeCommand(..._args3);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Executing command '${cmd}'`);

      if (cmd === 'receiveAsyncResponse') {
        return yield _this9.receiveAsyncResponse(...args);
      }

      if (cmd === 'getStatus') {
        return yield _this9.getStatus();
      }

      return yield _superprop_callExecuteCommand(cmd, ...args);
    })();
  }

  configureApp() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      function appIsPackageOrBundle(app) {
        return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
      }

      if (!_this10.opts.bundleId && appIsPackageOrBundle(_this10.opts.app)) {
        _this10.opts.bundleId = _this10.opts.app;
        _this10.opts.app = '';
      }

      if (_this10.opts.bundleId && appIsPackageOrBundle(_this10.opts.bundleId) && (_this10.opts.app === '' || appIsPackageOrBundle(_this10.opts.app))) {
        _logger.default.debug('App is an iOS bundle, will attempt to run as pre-existing');

        return;
      }

      if (_this10.opts.app && _this10.opts.app.toLowerCase() === 'settings') {
        _this10.opts.bundleId = 'com.apple.Preferences';
        _this10.opts.app = null;
        return;
      } else if (_this10.opts.app && _this10.opts.app.toLowerCase() === 'calendar') {
        _this10.opts.bundleId = 'com.apple.mobilecal';
        _this10.opts.app = null;
        return;
      }

      const originalAppPath = _this10.opts.app;

      try {
        _this10.opts.app = yield _this10.helpers.configureApp(_this10.opts.app, '.app', _this10.opts.mountRoot, _this10.opts.windowsShareUserName, _this10.opts.windowsSharePassword);
      } catch (err) {
        _logger.default.error(err);

        throw new Error(`Bad app: ${_this10.opts.app}. App paths need to be absolute, or relative to the appium ` + 'server install dir, or a URL to compressed file, or a special app name.');
      }

      _this10.isAppTemporary = _this10.opts.app && originalAppPath !== _this10.opts.app;
    })();
  }

  determineDevice() {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this11.lifecycleData.createSim = false;
      _this11.opts.deviceName = (0, _utils.translateDeviceName)(_this11.opts.platformVersion, _this11.opts.deviceName);

      if (_this11.opts.udid && (yield (0, _appiumIosSimulator.simExists)(_this11.opts.udid))) {
        const device = yield (0, _appiumIosSimulator.getSimulator)(_this11.opts.udid);
        return {
          device,
          realDevice: false,
          udid: _this11.opts.udid
        };
      }

      if (_this11.opts.udid) {
        if (_this11.opts.udid.toLowerCase() === 'auto') {
          try {
            _this11.opts.udid = yield (0, _utils.detectUdid)();
          } catch (err) {
            _logger.default.warn(`Cannot detect any connected real devices. Falling back to Simulator. Original error: ${err.message}`);

            const device = yield (0, _simulatorManagement.getExistingSim)(_this11.opts);

            if (!device) {
              _logger.default.errorAndThrow(`Cannot detect udid for ${_this11.opts.deviceName} Simulator running iOS ${_this11.opts.platformVersion}`);
            }

            _this11.opts.udid = device.udid;
            return {
              device,
              realDevice: false,
              udid: device.udid
            };
          }
        } else {
          const devices = yield (0, _realDeviceManagement.getConnectedDevices)();

          _logger.default.debug(`Available devices: ${devices.join(', ')}`);

          if (devices.indexOf(_this11.opts.udid) === -1) {
            throw new Error(`Unknown device or simulator UDID: '${_this11.opts.udid}'`);
          }
        }

        const device = yield (0, _realDeviceManagement.getRealDeviceObj)(_this11.opts.udid);
        return {
          device,
          realDevice: true,
          udid: _this11.opts.udid
        };
      }

      let device = yield (0, _simulatorManagement.getExistingSim)(_this11.opts);

      if (device) {
        return {
          device,
          realDevice: false,
          udid: device.udid
        };
      }

      _logger.default.info('Simulator udid not provided, using desired caps to create a new simulator');

      if (!_this11.opts.platformVersion && _this11.iosSdkVersion) {
        _logger.default.info(`No platformVersion specified. Using latest version Xcode supports: '${_this11.iosSdkVersion}' ` + `This may cause problems if a simulator does not exist for this platform version.`);

        _this11.opts.platformVersion = _this11.iosSdkVersion;
      }

      if (_this11.opts.noReset) {
        let device = yield (0, _simulatorManagement.getExistingSim)(_this11.opts);

        if (device) {
          return {
            device,
            realDevice: false,
            udid: device.udid
          };
        }
      }

      device = yield _this11.createSim();
      return {
        device,
        realDevice: false,
        udid: device.udid
      };
    })();
  }

  startSim() {
    var _this12 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const runOpts = {
        scaleFactor: _this12.opts.scaleFactor,
        connectHardwareKeyboard: !!_this12.opts.connectHardwareKeyboard,
        isHeadless: !!_this12.opts.isHeadless,
        devicePreferences: {}
      };

      if (_this12.opts.SimulatorWindowCenter) {
        runOpts.devicePreferences.SimulatorWindowCenter = _this12.opts.SimulatorWindowCenter;
      }

      const orientation = _lodash.default.isString(_this12.opts.orientation) && _this12.opts.orientation.toUpperCase();

      switch (orientation) {
        case 'LANDSCAPE':
          runOpts.devicePreferences.SimulatorWindowOrientation = 'LandscapeLeft';
          runOpts.devicePreferences.SimulatorWindowRotationAngle = 90;
          break;

        case 'PORTRAIT':
          runOpts.devicePreferences.SimulatorWindowOrientation = 'Portrait';
          runOpts.devicePreferences.SimulatorWindowRotationAngle = 0;
          break;
      }

      yield _this12.opts.device.run(runOpts);
    })();
  }

  createSim() {
    var _this13 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this13.lifecycleData.createSim = true;
      let sim = yield (0, _simulatorManagement.createSim)(_this13.opts);

      _logger.default.info(`Created simulator with udid '${sim.udid}'.`);

      return sim;
    })();
  }

  launchApp() {
    var _this14 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const APP_LAUNCH_TIMEOUT = 20 * 1000;

      _this14.logEvent('appLaunchAttempted');

      yield (0, _nodeSimctl.launch)(_this14.opts.device.udid, _this14.opts.bundleId);

      let checkStatus = function () {
        var _ref11 = (0, _asyncToGenerator2.default)(function* () {
          let response = yield _this14.proxyCommand('/status', 'GET');
          let currentApp = response.currentApp.bundleID;

          if (currentApp !== _this14.opts.bundleId) {
            throw new Error(`${_this14.opts.bundleId} not in foreground. ${currentApp} is in foreground`);
          }
        });

        return function checkStatus() {
          return _ref11.apply(this, arguments);
        };
      }();

      _logger.default.info(`Waiting for '${_this14.opts.bundleId}' to be in foreground`);

      let retries = parseInt(APP_LAUNCH_TIMEOUT / 200, 10);
      yield (0, _asyncbox.retryInterval)(retries, 200, checkStatus);

      _logger.default.info(`${_this14.opts.bundleId} is in foreground`);

      _this14.logEvent('appLaunched');
    })();
  }

  startWdaSession(bundleId, processArguments) {
    var _this15 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let args = processArguments ? processArguments.args || [] : [];

      if (!_lodash.default.isArray(args)) {
        throw new Error(`processArguments.args capability is expected to be an array. ` + `${JSON.stringify(args)} is given instead`);
      }

      let env = processArguments ? processArguments.env || {} : {};

      if (!_lodash.default.isPlainObject(env)) {
        throw new Error(`processArguments.env capability is expected to be a dictionary. ` + `${JSON.stringify(env)} is given instead`);
      }

      let shouldWaitForQuiescence = _appiumSupport.util.hasValue(_this15.opts.waitForQuiescence) ? _this15.opts.waitForQuiescence : true;
      let maxTypingFrequency = _appiumSupport.util.hasValue(_this15.opts.maxTypingFrequency) ? _this15.opts.maxTypingFrequency : 60;
      let shouldUseSingletonTestManager = _appiumSupport.util.hasValue(_this15.opts.shouldUseSingletonTestManager) ? _this15.opts.shouldUseSingletonTestManager : true;
      let shouldUseTestManagerForVisibilityDetection = false;

      if (_appiumSupport.util.hasValue(_this15.opts.simpleIsVisibleCheck)) {
        shouldUseTestManagerForVisibilityDetection = _this15.opts.simpleIsVisibleCheck;
      }

      if (!isNaN(parseFloat(_this15.opts.platformVersion)) && parseFloat(_this15.opts.platformVersion).toFixed(1) === '9.3') {
        _logger.default.info(`Forcing shouldUseSingletonTestManager capability value to true, because of known XCTest issues under 9.3 platform version`);

        shouldUseTestManagerForVisibilityDetection = true;
      }

      if (_appiumSupport.util.hasValue(_this15.opts.language)) {
        args.push('-AppleLanguages', `(${_this15.opts.language})`);
        args.push('-NSLanguages', `(${_this15.opts.language})`);
      }

      if (_appiumSupport.util.hasValue(_this15.opts.locale)) {
        args.push('-AppleLocale', _this15.opts.locale);
      }

      let desired = {
        desiredCapabilities: {
          bundleId,
          arguments: args,
          environment: env,
          shouldWaitForQuiescence,
          shouldUseTestManagerForVisibilityDetection,
          maxTypingFrequency,
          shouldUseSingletonTestManager
        }
      };

      if (_appiumSupport.util.hasValue(_this15.opts.shouldUseCompactResponses)) {
        desired.desiredCapabilities.shouldUseCompactResponses = _this15.opts.shouldUseCompactResponses;
      }

      if (_appiumSupport.util.hasValue(_this15.opts.elementResponseFields)) {
        desired.desiredCapabilities.elementResponseFields = _this15.opts.elementResponseFields;
      }

      if (_this15.opts.autoAcceptAlerts) {
        desired.desiredCapabilities.defaultAlertAction = 'accept';
      } else if (_this15.opts.autoDismissAlerts) {
        desired.desiredCapabilities.defaultAlertAction = 'dismiss';
      }

      yield _this15.proxyCommand('/session', 'POST', desired);
    })();
  }

  proxyActive() {
    return this.jwpProxyActive;
  }

  getProxyAvoidList() {
    if (this.isWebview()) {
      return NO_PROXY_WEB_LIST;
    }

    return NO_PROXY_NATIVE_LIST;
  }

  canProxy() {
    return true;
  }

  isSafari() {
    return !!this.safari;
  }

  isRealDevice() {
    return this.opts.realDevice;
  }

  isSimulator() {
    return !this.opts.realDevice;
  }

  isWebview() {
    return this.isSafari() || this.isWebContext();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, this.isWebContext());
  }

  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }

    if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
      let msg = 'The desired capabilities must include either an app or a bundleId for iOS';

      _logger.default.errorAndThrow(msg);
    }

    let verifyProcessArgument = processArguments => {
      const args = processArguments.args,
            env = processArguments.env;

      if (!_lodash.default.isNil(args) && !_lodash.default.isArray(args)) {
        _logger.default.errorAndThrow('processArguments.args must be an array of strings');
      }

      if (!_lodash.default.isNil(env) && !_lodash.default.isPlainObject(env)) {
        _logger.default.errorAndThrow('processArguments.env must be an object <key,value> pair {a:b, c:d}');
      }
    };

    if (caps.processArguments) {
      if (_lodash.default.isString(caps.processArguments)) {
        try {
          caps.processArguments = JSON.parse(caps.processArguments);
          verifyProcessArgument(caps.processArguments);
        } catch (err) {
          _logger.default.errorAndThrow(`processArguments must be a json format or an object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null. Error: ${err}`);
        }
      } else if (_lodash.default.isPlainObject(caps.processArguments)) {
        verifyProcessArgument(caps.processArguments);
      } else {
        _logger.default.errorAndThrow(`'processArguments must be an object, or a string JSON object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null.`);
      }
    }

    if (caps.keychainPath && !caps.keychainPassword || !caps.keychainPath && caps.keychainPassword) {
      _logger.default.errorAndThrow(`If 'keychainPath' is set, 'keychainPassword' must also be set (and vice versa).`);
    }

    this.opts.resetOnSessionStartOnly = !_appiumSupport.util.hasValue(this.opts.resetOnSessionStartOnly) || this.opts.resetOnSessionStartOnly;
    this.opts.useNewWDA = _appiumSupport.util.hasValue(this.opts.useNewWDA) ? this.opts.useNewWDA : false;

    if (caps.commandTimeouts) {
      caps.commandTimeouts = (0, _utils.normalizeCommandTimeouts)(caps.commandTimeouts);
    }

    if (_lodash.default.isString(caps.webDriverAgentUrl)) {
      const _url$parse = _url.default.parse(caps.webDriverAgentUrl),
            protocol = _url$parse.protocol,
            host = _url$parse.host;

      if (_lodash.default.isEmpty(protocol) || _lodash.default.isEmpty(host)) {
        _logger.default.errorAndThrow(`'webDriverAgentUrl' capability is expected to contain a valid WebDriverAgent server URL. ` + `'${caps.webDriverAgentUrl}' is given instead`);
      }
    }

    if (caps.browserName) {
      if (caps.bundleId) {
        _logger.default.errorAndThrow(`'browserName' cannot be set together with 'bundleId' capability`);
      }

      if (caps.app) {
        _logger.default.warn(`The capabilities should generally not include both an 'app' and a 'browserName'`);
      }
    }

    if (caps.permissions) {
      try {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _lodash.default.toPairs(JSON.parse(caps.permissions))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            const _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
                  bundleId = _step2$value[0],
                  perms = _step2$value[1];

            if (!_lodash.default.isString(bundleId)) {
              throw new Error(`'${JSON.stringify(bundleId)}' must be a string`);
            }

            if (!_lodash.default.isPlainObject(perms)) {
              throw new Error(`'${JSON.stringify(perms)}' must be a JSON object`);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } catch (e) {
        _logger.default.errorAndThrow(`'${caps.permissions}' is expected to be a valid object with format ` + `{"<bundleId1>": {"<serviceName1>": "<serviceStatus1>", ...}, ...}. Original error: ${e.message}`);
      }
    }

    return true;
  }

  installAUT() {
    var _this16 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this16.isSafari()) {
        return;
      }

      if (_this16.opts.autoLaunch === false) {
        return;
      }

      try {
        yield (0, _utils.verifyApplicationPlatform)(_this16.opts.app, _this16.isSimulator());
      } catch (err) {
        _logger.default.warn(`*********************************`);

        _logger.default.warn(`${_this16.isSimulator() ? 'Simulator' : 'Real device'} architecture appears to be unsupported ` + `by the '${_this16.opts.app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);

        _logger.default.warn('Don\'t be surprised if the application fails to launch.');

        _logger.default.warn(`*********************************`);
      }

      if (_this16.isRealDevice()) {
        yield (0, _realDeviceManagement.installToRealDevice)(_this16.opts.device, _this16.opts.app, _this16.opts.bundleId, _this16.opts.noReset);
      } else {
        yield (0, _simulatorManagement.installToSimulator)(_this16.opts.device, _this16.opts.app, _this16.opts.bundleId, _this16.opts.noReset);
      }

      if (_appiumSupport.util.hasValue(_this16.opts.iosInstallPause)) {
        let pause = parseInt(_this16.opts.iosInstallPause, 10);

        _logger.default.debug(`iosInstallPause set. Pausing ${pause} ms before continuing`);

        yield _bluebird.default.delay(pause);
      }
    })();
  }

  setInitialOrientation(orientation) {
    var _this17 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_lodash.default.isString(orientation)) {
        _logger.default.info('Skipping setting of the initial display orientation. ' + 'Set the "orientation" capability to either "LANDSCAPE" or "PORTRAIT", if this is an undesired behavior.');

        return;
      }

      orientation = orientation.toUpperCase();

      if (!_lodash.default.includes(['LANDSCAPE', 'PORTRAIT'], orientation)) {
        _logger.default.debug(`Unable to set initial orientation to '${orientation}'`);

        return;
      }

      _logger.default.debug(`Setting initial orientation to '${orientation}'`);

      try {
        yield _this17.proxyCommand('/orientation', 'POST', {
          orientation
        });
        _this17.opts.curOrientation = orientation;
      } catch (err) {
        _logger.default.warn(`Setting initial orientation failed with: ${err.message}`);
      }
    })();
  }

  _getCommandTimeout(cmdName) {
    if (this.opts.commandTimeouts) {
      if (cmdName && _lodash.default.has(this.opts.commandTimeouts, cmdName)) {
        return this.opts.commandTimeouts[cmdName];
      }

      return this.opts.commandTimeouts[_utils.DEFAULT_TIMEOUT_KEY];
    }
  }

  getSession() {
    var _this18 = this,
        _superprop_callGetSession = (..._args4) => super.getSession(..._args4);

    return (0, _asyncToGenerator2.default)(function* () {
      const driverSession = yield _superprop_callGetSession();

      if (!_this18.wdaCaps) {
        _this18.wdaCaps = yield _this18.proxyCommand('/', 'GET');
      }

      if (!_this18.deviceCaps) {
        const _ref12 = yield _this18.getScreenInfo(),
              statusBarSize = _ref12.statusBarSize,
              scale = _ref12.scale;

        _this18.deviceCaps = {
          pixelRatio: scale,
          statBarHeight: statusBarSize.height,
          viewportRect: yield _this18.getViewportRect()
        };
      }

      _logger.default.info("Merging WDA caps over Appium caps for session detail response");

      return Object.assign({
        udid: _this18.opts.udid
      }, driverSession, _this18.wdaCaps.capabilities, _this18.deviceCaps);
    })();
  }

  startIWDP() {
    var _this19 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this19.logEvent('iwdpStarting');

      _this19.iwdpServer = new _appiumIosDriver.IWDP(_this19.opts.webkitDebugProxyPort, _this19.opts.udid);
      yield _this19.iwdpServer.start();

      _this19.logEvent('iwdpStarted');
    })();
  }

  stopIWDP() {
    var _this20 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this20.iwdpServer) {
        yield _this20.iwdpServer.stop();
        delete _this20.iwdpServer;
      }
    })();
  }

  reset() {
    var _this21 = this,
        _superprop_callReset = (..._args5) => super.reset(..._args5);

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this21.opts.noReset) {
        let opts = _lodash.default.cloneDeep(_this21.opts);

        opts.noReset = false;
        opts.fullReset = false;
        const shutdownHandler = _this21.resetOnUnexpectedShutdown;

        _this21.resetOnUnexpectedShutdown = () => {};

        try {
          yield _this21.runReset(opts);
        } finally {
          _this21.resetOnUnexpectedShutdown = shutdownHandler;
        }
      }

      yield _superprop_callReset();
    })();
  }

}

exports.XCUITestDriver = XCUITestDriver;
Object.assign(XCUITestDriver.prototype, _index.default);
var _default = XCUITestDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
