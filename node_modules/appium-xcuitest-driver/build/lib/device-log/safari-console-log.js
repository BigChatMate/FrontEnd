"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariConsoleLog = void 0;

var _rotatingLog = require("./rotating-log");

class SafariConsoleLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariConsole');
    this.log.warning = this.log.warn;
  }

  addLogLine(out) {
    if (this.isCapturing) {
      this.logs = this.logs || [];

      while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          this.logIdxSinceLastRequest--;
        }
      }

      const entry = {
        level: {
          error: 'SEVERE',
          warning: 'WARNING',
          log: 'FINE'
        }[out.level] || 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(out)
      };
      this.logs.push(entry);
    }

    if (this.showLogs) {
      let level = 'debug';

      if (out.level === 'warning' || out.level === 'error') {
        level = out.level;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = out.text.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const line = _step.value;
          const url = out.url ? `${out.url} ` : '';
          this.log[level](`[${level.toUpperCase()}][${url}${out.line}:${out.column}] ${line}`);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }

}

exports.SafariConsoleLog = SafariConsoleLog;
var _default = SafariConsoleLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZy5qcyJdLCJuYW1lcyI6WyJTYWZhcmlDb25zb2xlTG9nIiwiUm90YXRpbmdMb2ciLCJjb25zdHJ1Y3RvciIsInNob3dMb2dzIiwibG9nIiwid2FybmluZyIsIndhcm4iLCJhZGRMb2dMaW5lIiwib3V0IiwiaXNDYXB0dXJpbmciLCJsb2dzIiwibGVuZ3RoIiwiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwic2hpZnQiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwiZW50cnkiLCJsZXZlbCIsImVycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsInRleHQiLCJzcGxpdCIsImxpbmUiLCJ1cmwiLCJ0b1VwcGVyQ2FzZSIsImNvbHVtbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBLE1BQU1BLGdCQUFOLFNBQStCQyx3QkFBL0IsQ0FBMkM7QUFDekNDLEVBQUFBLFdBQVcsQ0FBRUMsUUFBRixFQUFZO0FBQ3JCLFVBQU1BLFFBQU4sRUFBZ0IsZUFBaEI7QUFHQSxTQUFLQyxHQUFMLENBQVNDLE9BQVQsR0FBbUIsS0FBS0QsR0FBTCxDQUFTRSxJQUE1QjtBQUNEOztBQUVEQyxFQUFBQSxVQUFVLENBQUVDLEdBQUYsRUFBTztBQUNmLFFBQUksS0FBS0MsV0FBVCxFQUFzQjtBQUNwQixXQUFLQyxJQUFMLEdBQVksS0FBS0EsSUFBTCxJQUFhLEVBQXpCOztBQUNBLGFBQU8sS0FBS0EsSUFBTCxDQUFVQyxNQUFWLElBQW9CQyxrQ0FBM0IsRUFBa0Q7QUFDaEQsYUFBS0YsSUFBTCxDQUFVRyxLQUFWOztBQUNBLFlBQUksS0FBS0Msc0JBQUwsR0FBOEIsQ0FBbEMsRUFBcUM7QUFDbkMsZUFBS0Esc0JBQUw7QUFDRDtBQUNGOztBQTRCRCxZQUFNQyxLQUFLLEdBQUc7QUFDWkMsUUFBQUEsS0FBSyxFQUFFO0FBQ0xDLFVBQUFBLEtBQUssRUFBRSxRQURGO0FBRUxaLFVBQUFBLE9BQU8sRUFBRSxTQUZKO0FBR0xELFVBQUFBLEdBQUcsRUFBRTtBQUhBLFVBSUxJLEdBQUcsQ0FBQ1EsS0FKQyxLQUlTLE1BTEo7QUFNWkUsUUFBQUEsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEdBQUwsRUFOQztBQU9aQyxRQUFBQSxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlZixHQUFmO0FBUEcsT0FBZDtBQVNBLFdBQUtFLElBQUwsQ0FBVWMsSUFBVixDQUFlVCxLQUFmO0FBQ0Q7O0FBSUQsUUFBSSxLQUFLWixRQUFULEVBQW1CO0FBQ2pCLFVBQUlhLEtBQUssR0FBRyxPQUFaOztBQUNBLFVBQUlSLEdBQUcsQ0FBQ1EsS0FBSixLQUFjLFNBQWQsSUFBMkJSLEdBQUcsQ0FBQ1EsS0FBSixLQUFjLE9BQTdDLEVBQXNEO0FBQ3BEQSxRQUFBQSxLQUFLLEdBQUdSLEdBQUcsQ0FBQ1EsS0FBWjtBQUNEOztBQUpnQjtBQUFBO0FBQUE7O0FBQUE7QUFLakIsNkJBQW1CUixHQUFHLENBQUNpQixJQUFKLENBQVNDLEtBQVQsQ0FBZSxJQUFmLENBQW5CLDhIQUF5QztBQUFBLGdCQUE5QkMsSUFBOEI7QUFFdkMsZ0JBQU1DLEdBQUcsR0FBR3BCLEdBQUcsQ0FBQ29CLEdBQUosR0FBVyxHQUFFcEIsR0FBRyxDQUFDb0IsR0FBSSxHQUFyQixHQUEwQixFQUF0QztBQUNBLGVBQUt4QixHQUFMLENBQVNZLEtBQVQsRUFBaUIsSUFBR0EsS0FBSyxDQUFDYSxXQUFOLEVBQW9CLEtBQUlELEdBQUksR0FBRXBCLEdBQUcsQ0FBQ21CLElBQUssSUFBR25CLEdBQUcsQ0FBQ3NCLE1BQU8sS0FBSUgsSUFBSyxFQUFsRjtBQUNEO0FBVGdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVbEI7QUFDRjs7QUFyRXdDOzs7ZUF5RTVCM0IsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3RhdGluZ0xvZywgTUFYX0xPR19FTlRSSUVTX0NPVU5UIH0gZnJvbSAnLi9yb3RhdGluZy1sb2cnO1xuXG5cbmNsYXNzIFNhZmFyaUNvbnNvbGVMb2cgZXh0ZW5kcyBSb3RhdGluZ0xvZyB7XG4gIGNvbnN0cnVjdG9yIChzaG93TG9ncykge1xuICAgIHN1cGVyKHNob3dMb2dzLCAnU2FmYXJpQ29uc29sZScpO1xuXG4gICAgLy8ganMgY29uc29sZSBoYXMgYHdhcm5pbmdgIGxldmVsLCBzbyBtYXAgdG8gYHdhcm5gXG4gICAgdGhpcy5sb2cud2FybmluZyA9IHRoaXMubG9nLndhcm47XG4gIH1cblxuICBhZGRMb2dMaW5lIChvdXQpIHtcbiAgICBpZiAodGhpcy5pc0NhcHR1cmluZykge1xuICAgICAgdGhpcy5sb2dzID0gdGhpcy5sb2dzIHx8IFtdO1xuICAgICAgd2hpbGUgKHRoaXMubG9ncy5sZW5ndGggPj0gTUFYX0xPR19FTlRSSUVTX0NPVU5UKSB7XG4gICAgICAgIHRoaXMubG9ncy5zaGlmdCgpO1xuICAgICAgICBpZiAodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID4gMCkge1xuICAgICAgICAgIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdC0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKiBUaGUgb3V0cHV0IHdpbGwgYmUgbGlrZTpcbiAgICAgICAqICAge1xuICAgICAgICogICAgIFwic291cmNlXCI6IFwiamF2YXNjcmlwdFwiLFxuICAgICAgICogICAgIFwibGV2ZWxcIjpcImVycm9yXCIsXG4gICAgICAgKiAgICAgXCJ0ZXh0XCI6XCJSZWZlcmVuY2VFcnJvcjogQ2FuJ3QgZmluZCB2YXJpYWJsZTogc19hY2NvdW50XCIsXG4gICAgICAgKiAgICAgXCJ0eXBlXCI6XCJsb2dcIixcbiAgICAgICAqICAgICBcImxpbmVcIjoyLFxuICAgICAgICogICAgIFwiY29sdW1uXCI6MjEsXG4gICAgICAgKiAgICAgXCJ1cmxcIjpcImh0dHBzOi8vYXNzZXRzLmFkb2JlZHRtLmNvbS9iNDZlMzE4ZDg0NTI1MDgzNGVkYTEwYzVhMjA4MjdjMDQ1YTRkNzZmL3NjcmlwdHMvc2F0ZWxsaXRlLTU3ODY2ZjhiNjQ3NDZkNTNhODAwMDEwNC1zdGFnaW5nLmpzXCIsXG4gICAgICAgKiAgICAgXCJyZXBlYXRDb3VudFwiOjEsXG4gICAgICAgKiAgICAgXCJzdGFja1RyYWNlXCI6W3tcbiAgICAgICAqICAgICAgIFwiZnVuY3Rpb25OYW1lXCI6XCJnbG9iYWwgY29kZVwiLFxuICAgICAgICogICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vYXNzZXRzLmFkb2JlZHRtLmNvbS9iNDZlMzE4ZDg0NTI1MDgzNGVkYTEwYzVhMjA4MjdjMDQ1YTRkNzZmL3NjcmlwdHMvc2F0ZWxsaXRlLTU3ODY2ZjhiNjQ3NDZkNTNhODAwMDEwNC1zdGFnaW5nLmpzXCIsXG4gICAgICAgKiAgICAgICBcInNjcmlwdElkXCI6XCI2XCIsXG4gICAgICAgKiAgICAgICBcImxpbmVOdW1iZXJcIjoyLFxuICAgICAgICogICAgICAgXCJjb2x1bW5OdW1iZXJcIjoyMVxuICAgICAgICogICAgIH1dXG4gICAgICAgKiAgfVxuICAgICAgICpcbiAgICAgICAqIHdlIG5lZWQsIGF0IGxlYXN0LCBgbGV2ZWxgIChpbiBhY2NvcmRhbmNlIHdpdGggSmF2YSBsZXZlbHNcbiAgICAgICAqIChodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvNy9kb2NzL2FwaS9qYXZhL3V0aWwvbG9nZ2luZy9MZXZlbC5odG1sKSksXG4gICAgICAgKiBgdGltZXN0YW1wYCwgYW5kIGBtZXNzYWdlYCB0byBzYXRpc2Z5IHRoZSBqYXZhIGNsaWVudC4gSW4gb3JkZXIgdG9cbiAgICAgICAqIHByb3ZpZGUgYWxsIHRoZSBpbmZvcm1hdGlvbiB0byB0aGUgY2xpZW50LCBgbWVzc2FnZWAgaXMgdGhlIGZ1bGxcbiAgICAgICAqIG9iamVjdCwgc3RyaW5naWZpZWQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICBsZXZlbDoge1xuICAgICAgICAgIGVycm9yOiAnU0VWRVJFJyxcbiAgICAgICAgICB3YXJuaW5nOiAnV0FSTklORycsXG4gICAgICAgICAgbG9nOiAnRklORScsXG4gICAgICAgIH1bb3V0LmxldmVsXSB8fCAnSU5GTycsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgbWVzc2FnZTogSlNPTi5zdHJpbmdpZnkob3V0KSxcbiAgICAgIH07XG4gICAgICB0aGlzLmxvZ3MucHVzaChlbnRyeSk7XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IG91dHB1dCBsaWtlXG4gICAgLy8gICAgIFNhZmFyaUNvbnNvbGUgW1dBUk5JTkddW2h0dHA6Ly9hcHBpdW0uaW8gMjoxM10gTG9nIHNvbWV0aGluZyB0byB3YXJuXG4gICAgaWYgKHRoaXMuc2hvd0xvZ3MpIHtcbiAgICAgIGxldCBsZXZlbCA9ICdkZWJ1Zyc7XG4gICAgICBpZiAob3V0LmxldmVsID09PSAnd2FybmluZycgfHwgb3V0LmxldmVsID09PSAnZXJyb3InKSB7XG4gICAgICAgIGxldmVsID0gb3V0LmxldmVsO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG91dC50ZXh0LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAvLyB1cmwgaXMgb3B0aW9uYWwsIHNvIGdldCBmb3JtYXR0aW5nIGhlcmVcbiAgICAgICAgY29uc3QgdXJsID0gb3V0LnVybCA/IGAke291dC51cmx9IGAgOiAnJztcbiAgICAgICAgdGhpcy5sb2dbbGV2ZWxdKGBbJHtsZXZlbC50b1VwcGVyQ2FzZSgpfV1bJHt1cmx9JHtvdXQubGluZX06JHtvdXQuY29sdW1ufV0gJHtsaW5lfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBTYWZhcmlDb25zb2xlTG9nIH07XG5leHBvcnQgZGVmYXVsdCBTYWZhcmlDb25zb2xlTG9nO1xuIl0sImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9zYWZhcmktY29uc29sZS1sb2cuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
