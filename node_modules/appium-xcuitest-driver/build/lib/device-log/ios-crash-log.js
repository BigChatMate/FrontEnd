"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSCrashLog = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

class IOSCrashLog extends _appiumIosDriver.IOSCrashLog {
  constructor(opts = {}) {
    super(opts.udid ? _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CrashReporter', 'MobileDevice') : _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'DiagnosticReports'));
    this.udid = opts.udid;
    this.phoneName = null;
    this.sim = opts.sim;
  }

  getCrashes() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let crashLogsRoot = _this.logDir;

      if (_this.udid) {
        if (!_this.phoneName) {
          try {
            const _ref = yield (0, _teen_process.exec)('idevicename', ['-u', _this.udid]),
                  stdout = _ref.stdout;

            _this.phoneName = stdout.trim();
          } catch (e) {
            _logger.default.warn(`Cannot get the name of the crashes folder for the device with udid '${_this.udid}'. ` + `Original error: ${e.message}`);

            return [];
          }
        }

        if (_this.phoneName) {
          crashLogsRoot = _path.default.resolve(crashLogsRoot, _this.phoneName);
        }
      }

      if (!(yield _appiumSupport.fs.exists(crashLogsRoot))) {
        _logger.default.debug(`Crash reports root '${crashLogsRoot}' does not exist. Got nothing to gather.`);

        return [];
      }

      const foundFiles = yield _appiumSupport.fs.glob(`${crashLogsRoot}/**/*.crash`);

      if (_this.udid) {
        return foundFiles;
      }

      return yield _bluebird.default.filter(foundFiles, function () {
        var _ref2 = (0, _asyncToGenerator2.default)(function* (x) {
          try {
            const content = yield _appiumSupport.fs.readFile(x, 'utf8');
            return content.toUpperCase().includes(_this.sim.udid.toUpperCase());
          } catch (err) {
            return false;
          }
        });

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    })();
  }

  filesToJSON(paths) {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield _bluebird.default.map(paths, function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* (fullPath) {
          const stat = yield _appiumSupport.fs.stat(fullPath);
          return {
            timestamp: stat.ctime.getTime(),
            level: 'ALL',
            message: yield _appiumSupport.fs.readFile(fullPath, 'utf8')
          };
        });

        return function (_x2) {
          return _ref3.apply(this, arguments);
        };
      }());
    })();
  }

}

exports.IOSCrashLog = IOSCrashLog;
var _default = IOSCrashLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cuanMiXSwibmFtZXMiOlsiSU9TQ3Jhc2hMb2ciLCJJT1NEcml2ZXJJT1NDcmFzaExvZyIsImNvbnN0cnVjdG9yIiwib3B0cyIsInVkaWQiLCJwYXRoIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJlbnYiLCJIT01FIiwicGhvbmVOYW1lIiwic2ltIiwiZ2V0Q3Jhc2hlcyIsImNyYXNoTG9nc1Jvb3QiLCJsb2dEaXIiLCJzdGRvdXQiLCJ0cmltIiwiZSIsImxvZyIsIndhcm4iLCJtZXNzYWdlIiwiZnMiLCJleGlzdHMiLCJkZWJ1ZyIsImZvdW5kRmlsZXMiLCJnbG9iIiwiQiIsImZpbHRlciIsIngiLCJjb250ZW50IiwicmVhZEZpbGUiLCJ0b1VwcGVyQ2FzZSIsImluY2x1ZGVzIiwiZXJyIiwiZmlsZXNUb0pTT04iLCJwYXRocyIsIm1hcCIsImZ1bGxQYXRoIiwic3RhdCIsInRpbWVzdGFtcCIsImN0aW1lIiwiZ2V0VGltZSIsImxldmVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFdBQU4sU0FBMEJDLDRCQUExQixDQUErQztBQUM3Q0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCLFVBQU1BLElBQUksQ0FBQ0MsSUFBTCxHQUNKQyxjQUFLQyxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUF6QixFQUErQixTQUEvQixFQUEwQyxNQUExQyxFQUFrRCxlQUFsRCxFQUFtRSxjQUFuRSxDQURJLEdBRUpKLGNBQUtDLE9BQUwsQ0FBYUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQXpCLEVBQStCLFNBQS9CLEVBQTBDLE1BQTFDLEVBQWtELG1CQUFsRCxDQUZGO0FBR0EsU0FBS0wsSUFBTCxHQUFZRCxJQUFJLENBQUNDLElBQWpCO0FBQ0EsU0FBS00sU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLEdBQUwsR0FBV1IsSUFBSSxDQUFDUSxHQUFoQjtBQUNEOztBQUVLQyxFQUFBQSxVQUFOLEdBQW9CO0FBQUE7O0FBQUE7QUFDbEIsVUFBSUMsYUFBYSxHQUFHLEtBQUksQ0FBQ0MsTUFBekI7O0FBQ0EsVUFBSSxLQUFJLENBQUNWLElBQVQsRUFBZTtBQUNiLFlBQUksQ0FBQyxLQUFJLENBQUNNLFNBQVYsRUFBcUI7QUFDbkIsY0FBSTtBQUFBLCtCQUNxQix3QkFBSyxhQUFMLEVBQW9CLENBQUMsSUFBRCxFQUFPLEtBQUksQ0FBQ04sSUFBWixDQUFwQixDQURyQjtBQUFBLGtCQUNLVyxNQURMLFFBQ0tBLE1BREw7O0FBRUYsWUFBQSxLQUFJLENBQUNMLFNBQUwsR0FBaUJLLE1BQU0sQ0FBQ0MsSUFBUCxFQUFqQjtBQUNELFdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkMsNEJBQUlDLElBQUosQ0FBVSx1RUFBc0UsS0FBSSxDQUFDZixJQUFLLEtBQWpGLEdBQ04sbUJBQWtCYSxDQUFDLENBQUNHLE9BQVEsRUFEL0I7O0FBRUEsbUJBQU8sRUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsWUFBSSxLQUFJLENBQUNWLFNBQVQsRUFBb0I7QUFDbEJHLFVBQUFBLGFBQWEsR0FBR1IsY0FBS0MsT0FBTCxDQUFhTyxhQUFiLEVBQTRCLEtBQUksQ0FBQ0gsU0FBakMsQ0FBaEI7QUFDRDtBQUNGOztBQUNELFVBQUksUUFBT1csa0JBQUdDLE1BQUgsQ0FBVVQsYUFBVixDQUFQLENBQUosRUFBcUM7QUFDbkNLLHdCQUFJSyxLQUFKLENBQVcsdUJBQXNCVixhQUFjLDBDQUEvQzs7QUFDQSxlQUFPLEVBQVA7QUFDRDs7QUFDRCxZQUFNVyxVQUFVLFNBQVNILGtCQUFHSSxJQUFILENBQVMsR0FBRVosYUFBYyxhQUF6QixDQUF6Qjs7QUFDQSxVQUFJLEtBQUksQ0FBQ1QsSUFBVCxFQUFlO0FBQ2IsZUFBT29CLFVBQVA7QUFDRDs7QUFFRCxtQkFBYUUsa0JBQUVDLE1BQUYsQ0FBU0gsVUFBVDtBQUFBLG9EQUFxQixXQUFPSSxDQUFQLEVBQWE7QUFDN0MsY0FBSTtBQUNGLGtCQUFNQyxPQUFPLFNBQVNSLGtCQUFHUyxRQUFILENBQVlGLENBQVosRUFBZSxNQUFmLENBQXRCO0FBQ0EsbUJBQU9DLE9BQU8sQ0FBQ0UsV0FBUixHQUFzQkMsUUFBdEIsQ0FBK0IsS0FBSSxDQUFDckIsR0FBTCxDQUFTUCxJQUFULENBQWMyQixXQUFkLEVBQS9CLENBQVA7QUFDRCxXQUhELENBR0UsT0FBT0UsR0FBUCxFQUFZO0FBQ1osbUJBQU8sS0FBUDtBQUNEO0FBQ0YsU0FQWTs7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUFiO0FBMUJrQjtBQWtDbkI7O0FBRUtDLEVBQUFBLFdBQU4sQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUE7QUFDeEIsbUJBQWFULGtCQUFFVSxHQUFGLENBQU1ELEtBQU47QUFBQSxvREFBYSxXQUFPRSxRQUFQLEVBQW9CO0FBQzVDLGdCQUFNQyxJQUFJLFNBQVNqQixrQkFBR2lCLElBQUgsQ0FBUUQsUUFBUixDQUFuQjtBQUNBLGlCQUFPO0FBQ0xFLFlBQUFBLFNBQVMsRUFBRUQsSUFBSSxDQUFDRSxLQUFMLENBQVdDLE9BQVgsRUFETjtBQUVMQyxZQUFBQSxLQUFLLEVBQUUsS0FGRjtBQUdMdEIsWUFBQUEsT0FBTyxRQUFRQyxrQkFBR1MsUUFBSCxDQUFZTyxRQUFaLEVBQXNCLE1BQXRCO0FBSFYsV0FBUDtBQUtELFNBUFk7O0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFBYjtBQUR3QjtBQVN6Qjs7QUF2RDRDOzs7ZUEyRGhDckMsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElPU0NyYXNoTG9nIGFzIElPU0RyaXZlcklPU0NyYXNoTG9nIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jbGFzcyBJT1NDcmFzaExvZyBleHRlbmRzIElPU0RyaXZlcklPU0NyYXNoTG9nIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMudWRpZCA/XG4gICAgICBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSwgJ0xpYnJhcnknLCAnTG9ncycsICdDcmFzaFJlcG9ydGVyJywgJ01vYmlsZURldmljZScpIDpcbiAgICAgIHBhdGgucmVzb2x2ZShwcm9jZXNzLmVudi5IT01FLCAnTGlicmFyeScsICdMb2dzJywgJ0RpYWdub3N0aWNSZXBvcnRzJykpO1xuICAgIHRoaXMudWRpZCA9IG9wdHMudWRpZDtcbiAgICB0aGlzLnBob25lTmFtZSA9IG51bGw7XG4gICAgdGhpcy5zaW0gPSBvcHRzLnNpbTtcbiAgfVxuXG4gIGFzeW5jIGdldENyYXNoZXMgKCkge1xuICAgIGxldCBjcmFzaExvZ3NSb290ID0gdGhpcy5sb2dEaXI7XG4gICAgaWYgKHRoaXMudWRpZCkge1xuICAgICAgaWYgKCF0aGlzLnBob25lTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnaWRldmljZW5hbWUnLCBbJy11JywgdGhpcy51ZGlkXSk7XG4gICAgICAgICAgdGhpcy5waG9uZU5hbWUgPSBzdGRvdXQudHJpbSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nLndhcm4oYENhbm5vdCBnZXQgdGhlIG5hbWUgb2YgdGhlIGNyYXNoZXMgZm9sZGVyIGZvciB0aGUgZGV2aWNlIHdpdGggdWRpZCAnJHt0aGlzLnVkaWR9Jy4gYCArXG4gICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGhvbmVOYW1lKSB7XG4gICAgICAgIGNyYXNoTG9nc1Jvb3QgPSBwYXRoLnJlc29sdmUoY3Jhc2hMb2dzUm9vdCwgdGhpcy5waG9uZU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhjcmFzaExvZ3NSb290KSkge1xuICAgICAgbG9nLmRlYnVnKGBDcmFzaCByZXBvcnRzIHJvb3QgJyR7Y3Jhc2hMb2dzUm9vdH0nIGRvZXMgbm90IGV4aXN0LiBHb3Qgbm90aGluZyB0byBnYXRoZXIuYCk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGZvdW5kRmlsZXMgPSBhd2FpdCBmcy5nbG9iKGAke2NyYXNoTG9nc1Jvb3R9LyoqLyouY3Jhc2hgKTtcbiAgICBpZiAodGhpcy51ZGlkKSB7XG4gICAgICByZXR1cm4gZm91bmRGaWxlcztcbiAgICB9XG4gICAgLy8gRm9yIFNpbXVsYXRvciBvbmx5IGluY2x1ZGUgZmlsZXMsIHRoYXQgY29udGFpbiBjdXJyZW50IFVESURcbiAgICByZXR1cm4gYXdhaXQgQi5maWx0ZXIoZm91bmRGaWxlcywgYXN5bmMgKHgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZSh4LCAndXRmOCcpO1xuICAgICAgICByZXR1cm4gY29udGVudC50b1VwcGVyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc2ltLnVkaWQudG9VcHBlckNhc2UoKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZmlsZXNUb0pTT04gKHBhdGhzKSB7XG4gICAgcmV0dXJuIGF3YWl0IEIubWFwKHBhdGhzLCBhc3luYyAoZnVsbFBhdGgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXQgPSBhd2FpdCBmcy5zdGF0KGZ1bGxQYXRoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVzdGFtcDogc3RhdC5jdGltZS5nZXRUaW1lKCksXG4gICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgbWVzc2FnZTogYXdhaXQgZnMucmVhZEZpbGUoZnVsbFBhdGgsICd1dGY4JylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSU9TQ3Jhc2hMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IElPU0NyYXNoTG9nO1xuIl0sImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9pb3MtY3Jhc2gtbG9nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
