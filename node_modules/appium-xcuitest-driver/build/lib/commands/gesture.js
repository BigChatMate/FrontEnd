"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gesturesChainToString = gesturesChainToString;
exports.default = exports.commands = exports.helpers = exports.extensions = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

let helpers = {},
    extensions = {},
    commands = {};
exports.commands = commands;
exports.extensions = extensions;
exports.helpers = helpers;
commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;
commands.mobileShake = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isSimulator()) {
    throw new _appiumBaseDriver.errors.UnknownError('Shake is not supported on real devices');
  }

  yield this.opts.device.shake();
});

commands.click = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (el) {
    if (!this.isWebContext()) {
      return yield this.nativeClick(el);
    }

    el = _appiumSupport.util.unwrapElement(el);

    if ((yield this.settings.getSettings()).nativeWebTap) {
      _logger.default.debug('Using native web tap');

      yield this.nativeWebTap(el);
    } else {
      let atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('click', [atomsElement]);
    }
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

function gesturesChainToString(gestures, keysToInclude = ['options']) {
  return gestures.map(item => {
    let otherKeys = _lodash.default.difference(_lodash.default.keys(item), ['action']);

    otherKeys = _lodash.default.isArray(keysToInclude) ? _lodash.default.intersection(otherKeys, keysToInclude) : otherKeys;

    if (otherKeys.length) {
      return `${item.action}` + `(${_lodash.default.map(otherKeys, x => x + '=' + (_lodash.default.isPlainObject(item[x]) ? JSON.stringify(item[x]) : item[x])).join(', ')})`;
    }

    return item.action;
  }).join('-');
}

commands.performActions = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (actions) {
    _logger.default.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);

    const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
      parameters: {
        pointerType: 'touch'
      }
    } : {})).map(action => {
      const modifiedAction = _lodash.default.clone(action) || {};
      modifiedAction.actions = (action.actions || []).filter(innerAction => !(innerAction.type === 'pause' && innerAction.duration === 0));
      return modifiedAction;
    });

    _logger.default.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);

    return yield this.proxyCommand('/actions', 'POST', {
      actions: preprocessedActions
    });
  });

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}();

commands.performTouch = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (gestures) {
    _logger.default.debug(`Received the following touch action: ${gesturesChainToString(gestures)}`);

    try {
      return yield this.proxyCommand('/wda/touch/perform', 'POST', {
        actions: gestures
      });
    } catch (e) {
      if (!this.isWebContext()) {
        throw e;
      }

      _logger.default.errorAndThrow('The Touch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate touch events being in WEBVIEW context. Original error: ${e.message}`);
    }
  });

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

commands.performMultiAction = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (actions) {
    _logger.default.debug(`Received the following multi touch action:`);

    for (let i in actions) {
      _logger.default.debug(`    ${parseInt(i, 10) + 1}: ${_lodash.default.map(actions[i], 'action').join('-')}`);
    }

    try {
      return yield this.proxyCommand('/wda/touch/multi/perform', 'POST', {
        actions
      });
    } catch (e) {
      if (!this.isWebContext()) {
        throw e;
      }

      _logger.default.errorAndThrow('The MultiTouch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate multitouch events being in WEBVIEW context. Original error: ${e.message}`);
    }
  });

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}();

commands.nativeClick = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);
    let endpoint = `/element/${el}/click`;
    return yield this.proxyCommand(endpoint, 'POST', {});
  });

  return function (_x5) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.mobileScroll = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (opts = {}, swipe = false) {
    if (!opts.element) {
      opts.element = yield this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
    }

    let params = {};

    if (opts.name && !swipe) {
      params.name = opts.name;
    } else if (opts.direction) {
      if (['up', 'down', 'left', 'right'].indexOf(opts.direction.toLowerCase()) < 0) {
        let msg = 'Direction must be up, down, left or right';

        _logger.default.errorAndThrow(msg);
      }

      params.direction = opts.direction;
    } else if (opts.predicateString && !swipe) {
      params.predicateString = opts.predicateString;
    } else if (opts.toVisible && !swipe) {
      params.toVisible = opts.toVisible;
    } else {
      let msg = swipe ? 'Mobile swipe requires direction' : 'Mobile scroll supports the following strategies: name, direction, predicateString, and toVisible. Specify one of these';

      _logger.default.errorAndThrow(msg);
    }

    if (!swipe && opts.distance) {
      params.distance = opts.distance;
    }

    let element = opts.element.ELEMENT || opts.element;
    let endpoint = `/wda/element/${element}/${swipe ? 'swipe' : 'scroll'}`;
    return yield this.proxyCommand(endpoint, 'POST', params);
  });

  return function () {
    return _ref7.apply(this, arguments);
  };
}();

helpers.mobileSwipe = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.mobileScroll(opts, true);
  });

  return function () {
    return _ref8.apply(this, arguments);
  };
}();

function parseFloatParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseFloat(paramValue);

  if (isNaN(result)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter should be a valid number. "${paramValue}" is given instead`);
  }

  return result;
}

helpers.mobilePinch = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!opts.element) {
      opts.element = yield this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
    }

    const params = {
      scale: parseFloatParameter('scale', opts.scale, 'pinch'),
      velocity: parseFloatParameter('velocity', opts.velocity, 'pinch')
    };
    const el = opts.element.ELEMENT || opts.element;
    return yield this.proxyCommand(`/wda/element/${el}/pinch`, 'POST', params);
  });

  return function () {
    return _ref9.apply(this, arguments);
  };
}();

helpers.mobileDoubleTap = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (opts.element) {
      const el = opts.element.ELEMENT || opts.element;
      return yield this.proxyCommand(`/wda/element/${el}/doubleTap`, 'POST');
    }

    const params = {
      x: parseFloatParameter('x', opts.x, 'doubleTap'),
      y: parseFloatParameter('y', opts.y, 'doubleTap')
    };
    return yield this.proxyCommand('/wda/doubleTap', 'POST', params);
  });

  return function () {
    return _ref10.apply(this, arguments);
  };
}();

helpers.mobileTwoFingerTap = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!opts.element) {
      opts.element = yield this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
    }

    const el = opts.element.ELEMENT || opts.element;
    return yield this.proxyCommand(`/wda/element/${el}/twoFingerTap`, 'POST');
  });

  return function () {
    return _ref11.apply(this, arguments);
  };
}();

helpers.mobileTouchAndHold = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    let params = {
      duration: parseFloatParameter('duration', opts.duration, 'touchAndHold')
    };

    if (opts.element) {
      const el = opts.element.ELEMENT || opts.element;
      return yield this.proxyCommand(`/wda/element/${el}/touchAndHold`, 'POST', params);
    }

    params.x = parseFloatParameter('x', opts.x, 'touchAndHold');
    params.y = parseFloatParameter('y', opts.y, 'touchAndHold');
    return yield this.proxyCommand('/wda/touchAndHold', 'POST', params);
  });

  return function () {
    return _ref12.apply(this, arguments);
  };
}();

helpers.mobileTap = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const params = {
      x: parseFloatParameter('x', opts.x, 'tap'),
      y: parseFloatParameter('y', opts.y, 'tap')
    };
    const el = opts.element ? opts.element.ELEMENT || opts.element : '0';
    return yield this.proxyCommand(`/wda/tap/${el}`, 'POST', params);
  });

  return function () {
    return _ref13.apply(this, arguments);
  };
}();

helpers.mobileDragFromToForDuration = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const params = {
      duration: parseFloatParameter('duration', opts.duration, 'dragFromToForDuration'),
      fromX: parseFloatParameter('fromX', opts.fromX, 'dragFromToForDuration'),
      fromY: parseFloatParameter('fromY', opts.fromY, 'dragFromToForDuration'),
      toX: parseFloatParameter('toX', opts.toX, 'dragFromToForDuration'),
      toY: parseFloatParameter('toY', opts.toY, 'dragFromToForDuration')
    };

    if (opts.element) {
      const el = opts.element.ELEMENT || opts.element;
      return yield this.proxyCommand(`/wda/element/${el}/dragfromtoforduration`, 'POST', params);
    }

    return yield this.proxyCommand('/wda/dragfromtoforduration', 'POST', params);
  });

  return function () {
    return _ref14.apply(this, arguments);
  };
}();

helpers.mobileSelectPickerWheelValue = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!opts.element) {
      _logger.default.errorAndThrow('Element id is expected to be set for selectPickerWheelValue method');
    }

    if (!_lodash.default.isString(opts.order) || ['next', 'previous'].indexOf(opts.order.toLowerCase()) === -1) {
      _logger.default.errorAndThrow(`The mandatory "order" parameter is expected to be equal either to 'next' or 'previous'. ` + `'${opts.order}' is given instead`);
    }

    const el = opts.element.ELEMENT || opts.element;
    const params = {
      order: opts.order
    };

    if (opts.offset) {
      params.offset = parseFloatParameter('offset', opts.offset, 'selectPickerWheelValue');
    }

    return yield this.proxyCommand(`/wda/pickerwheel/${el}/select`, 'POST', params);
  });

  return function () {
    return _ref15.apply(this, arguments);
  };
}();

helpers.getCoordinates = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (gesture) {
    let el = gesture.options.element;
    let coordinates = {
      x: 0,
      y: 0,
      areOffsets: false
    };
    let optionX = null;

    if (gesture.options.x) {
      optionX = parseFloatParameter('x', gesture.options.x, 'getCoordinates');
    }

    let optionY = null;

    if (gesture.options.y) {
      optionY = parseFloatParameter('y', gesture.options.y, 'getCoordinates');
    }

    if (el) {
      let rect = yield this.getElementRect(el);
      let pos = {
        x: rect.x,
        y: rect.y
      };
      let size = {
        w: rect.width,
        h: rect.height
      };
      let offsetX = 0;
      let offsetY = 0;

      if (optionX || optionY) {
        offsetX = optionX || 0;
        offsetY = optionY || 0;
      } else {
        offsetX = size.w / 2;
        offsetY = size.h / 2;
      }

      coordinates.x = pos.x + offsetX;
      coordinates.y = pos.y + offsetY;
    } else {
      coordinates.areOffsets = gesture.action === 'moveTo';
      coordinates.x = optionX || 0;
      coordinates.y = optionY || 0;
    }

    return coordinates;
  });

  return function (_x6) {
    return _ref16.apply(this, arguments);
  };
}();

helpers.applyMoveToOffset = function (firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

Object.assign(extensions, helpers, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
