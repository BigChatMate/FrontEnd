"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    extensions = {};
exports.commands = commands;
Object.assign(extensions, _appiumIosDriver.iosCommands.element);

commands.getAttribute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (attribute, el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (!this.isWebContext()) {
      if (attribute === "contentSize") {
        return yield this.getContentSize(el);
      }

      let value = yield this.proxyCommand(`/element/${el}/attribute/${attribute}`, 'GET');

      if ([0, 1].indexOf(value) !== -1) {
        value = !!value;
      }

      return _lodash.default.isNull(value) || _lodash.default.isString(value) ? value : JSON.stringify(value);
    }

    let atomsElement = this.getAtomsElement(el);

    if (_lodash.default.isNull(atomsElement)) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}`);
    }

    return yield this.executeAtom('get_attribute_value', [atomsElement, attribute]);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.getText = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (!this.isWebContext()) {
      return yield this.proxyCommand(`/element/${el}/text`, 'GET');
    }

    let atomsElement = this.useAtomsElement(el);
    return yield this.executeAtom('get_text', [atomsElement]);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.getElementRect = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (el) {
    if (this.isWebContext()) {
      const _ref4 = yield this.getLocation(el),
            x = _ref4.x,
            y = _ref4.y;

      const _ref5 = yield this.getSize(el),
            width = _ref5.width,
            height = _ref5.height;

      return {
        x,
        y,
        width,
        height
      };
    }

    el = _appiumSupport.util.unwrapElement(el);
    return yield this.getNativeRect(el);
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

extensions.getNativeRect = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (el) {
    return yield this.proxyCommand(`/element/${el}/rect`, 'GET');
  });

  return function (_x5) {
    return _ref6.apply(this, arguments);
  };
}();

commands.getLocation = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (this.isWebContext()) {
      const atomsElement = yield this.useAtomsElement(el);
      let loc = yield this.executeAtom('get_top_left_coordinates', [atomsElement]);

      if (this.opts.absoluteWebLocations) {
        const script = 'return [document.body.scrollLeft, document.body.scrollTop];';

        const _ref8 = yield this.execute(script),
              _ref9 = (0, _slicedToArray2.default)(_ref8, 2),
              xOffset = _ref9[0],
              yOffset = _ref9[1];

        loc.x += xOffset;
        loc.y += yOffset;
      }

      return loc;
    }

    const rect = yield this.getElementRect(el);
    return {
      x: rect.x,
      y: rect.y
    };
  });

  return function (_x6) {
    return _ref7.apply(this, arguments);
  };
}();

commands.getLocationInView = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (el) {
    return yield this.getLocation(el);
  });

  return function (_x7) {
    return _ref10.apply(this, arguments);
  };
}();

commands.getSize = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (this.isWebContext()) {
      let atomsElement = this.getAtomsElement(el);

      if (atomsElement === null) {
        throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
      }

      return yield this.executeAtom('get_size', [atomsElement]);
    }

    const rect = yield this.getElementRect(el);
    return {
      width: rect.width,
      height: rect.height
    };
  });

  return function (_x8) {
    return _ref11.apply(this, arguments);
  };
}();

function hasSpecialKeys(keys) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let char = _step.value;

      if (isSpecialKey(char)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

function isSpecialKey(k) {
  if (k === '\uE003' || k === '\ue017') {
    return true;
  } else if (k === '\uE006' || k === '\uE007') {
    return true;
  }

  return false;
}

function translateKey(k) {
  if (k === '\uE006' || k === '\uE007') {
    return '\n';
  } else if (k === '\uE003' || k === '\ue017') {
    return '\b';
  }

  return k;
}

extensions.bringUpKeyboard = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (element) {
    var _this = this;

    let implicitWaitMs = this.implicitWaitMs;
    yield this.setImplicitWait(0);

    try {
      yield (0, _asyncbox.retryInterval)(10, 10, (0, _asyncToGenerator2.default)(function* () {
        try {
          yield _this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);

          _logger.default.debug('Keyboard found. Continuing with text input.');
        } catch (err) {
          _logger.default.debug('No keyboard found. Clicking element to open it.');

          yield _this.nativeClick(element);
          yield _this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
        }
      }));
    } finally {
      yield this.setImplicitWait(implicitWaitMs);
    }
  });

  return function (_x9) {
    return _ref12.apply(this, arguments);
  };
}();

commands.setValueImmediate = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (value, el) {
    _logger.default.info('There is currently no way to bypass typing using XCUITest. Setting value through keyboard');

    yield this.setValue(value, el);
  });

  return function (_x10, _x11) {
    return _ref14.apply(this, arguments);
  };
}();

commands.setValue = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (value, el) {
    var _this2 = this;

    el = _appiumSupport.util.unwrapElement(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      yield this.executeAtom('click', [atomsElement]);
      yield this.executeAtom('type', [atomsElement, value]);
    } else {
      const setFormattedValue = function () {
        var _ref16 = (0, _asyncToGenerator2.default)(function* (input, isKeyboardPresenceCheckEnabled) {
          if (typeof input !== 'string' && !(input instanceof Array)) {
            input = input.toString().split('');
          }

          try {
            yield _this2.proxyCommand(`/element/${el}/value`, 'POST', {
              value: input
            });
          } catch (err) {
            if (isKeyboardPresenceCheckEnabled && (yield _this2.getAttribute('type', el)) === 'XCUIElementTypeTextField') {
              _logger.default.info(`Cannot type in the text field because of ${err}.\nTrying to apply a workaround...`);

              yield _this2.bringUpKeyboard(el);
              yield _this2.proxyCommand(`/element/${el}/value`, 'POST', {
                value: input
              });
            } else {
              throw err;
            }
          }
        });

        return function setFormattedValue(_x14, _x15) {
          return _ref16.apply(this, arguments);
        };
      }();

      if (_lodash.default.isNull(value) || _lodash.default.isUndefined(value) || _lodash.default.isPlainObject(value)) {
        throw new Error(`Only strings and arrays of strings are supported as input arguments. Received: '${JSON.stringify(value)}'`);
      }

      if (_lodash.default.isArray(value)) {
        value = _lodash.default.flatMap(value, v => (_lodash.default.isString(v) ? v : JSON.stringify(v)).split(''));
      } else {
        value = (value || '').toString().split('');
      }

      if (!hasSpecialKeys(value)) {
        yield setFormattedValue(value, true);
        return;
      }

      let buffer = [];
      let isFirstChar = true;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let k = _step2.value;
          let char = translateKey(k);

          if (char === k) {
            buffer.push(char);
            continue;
          }

          yield setFormattedValue(buffer, isFirstChar);
          isFirstChar = false;
          buffer = [];
          yield setFormattedValue([char], isFirstChar);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (buffer.length) {
        yield setFormattedValue(buffer, false);
      }
    }
  });

  return function (_x12, _x13) {
    return _ref15.apply(this, arguments);
  };
}();

commands.keys = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (value) {
    if (_lodash.default.isArray(value)) {
      value = value.join('');
    }

    if (_lodash.default.isString(value)) {
      value = value.split('');
    }

    let buffer = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let k = _step3.value;
        let char = translateKey(k);
        buffer.push(char);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    yield this.proxyCommand('/wda/keys', 'POST', {
      value: buffer
    });
  });

  return function (_x16) {
    return _ref17.apply(this, arguments);
  };
}();

commands.clear = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (this.isWebContext()) {
      let atomsElement = this.useAtomsElement(el);
      yield this.executeAtom('clear', [atomsElement]);
      return;
    }

    yield (0, _asyncbox.retry)(5, this.proxyCommand.bind(this), `/element/${el}/clear`, 'POST');
  });

  return function (_x17) {
    return _ref18.apply(this, arguments);
  };
}();

commands.getContentSize = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (el) {
    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getContentSize for webcontext is not yet implemented. Please contact an Appium dev');
    }

    const type = yield this.getAttribute('type', el);

    if (type !== "XCUIElementTypeTable" && type !== "XCUIElementTypeCollectionView") {
      throw new Error(`Can't get content size for type '${type}', only for ` + `tables and collection views`);
    }

    let locator = "*";

    if (type === "XCUIElementTypeTable") {
      locator = "XCUIElementTypeCell";
    }

    let contentHeight = 0;
    let children = yield this.findElOrEls(`class chain`, locator, true, el);

    if (children.length === 1) {
      const rect = yield this.getElementRect(_lodash.default.head(children));
      contentHeight = rect.height;
    } else if (children.length) {
      switch (type) {
        case "XCUIElementTypeTable":
          {
            const firstRect = yield this.getElementRect(_lodash.default.head(children));
            const lastRect = yield this.getElementRect(_lodash.default.last(children));
            contentHeight = lastRect.y + lastRect.height - firstRect.y;
            break;
          }

        case "XCUIElementTypeCollectionView":
          {
            let elsInRow = 1;
            let firstRect = yield this.getElementRect(_lodash.default.head(children));
            let initialRects = [firstRect];

            for (let i = 1; i < children.length; i++) {
              const rect = yield this.getElementRect(children[i]);
              initialRects.push(rect);

              if (rect.y !== firstRect.y) {
                elsInRow = i;
                break;
              }
            }

            const spaceBetweenEls = initialRects[elsInRow].y - initialRects[elsInRow - 1].y - initialRects[elsInRow - 1].height;
            const numRows = Math.ceil(children.length / elsInRow);
            contentHeight = numRows * firstRect.height + spaceBetweenEls * (numRows - 1);
            break;
          }

        default:
          throw new Error(`Programming error: type '${type}' was not ` + `valid but should have already been rejected`);
      }
    }

    const size = yield this.getSize(el);
    const origin = yield this.getLocationInView(el);
    return JSON.stringify({
      width: size.width,
      height: size.height,
      top: origin.y,
      left: origin.x,
      scrollableOffset: contentHeight
    });
  });

  return function (_x18) {
    return _ref19.apply(this, arguments);
  };
}();

commands.isKeyboardShown = (0, _asyncToGenerator2.default)(function* () {
  try {
    yield this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
    return true;
  } catch (ign) {
    return false;
  }
});
Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
