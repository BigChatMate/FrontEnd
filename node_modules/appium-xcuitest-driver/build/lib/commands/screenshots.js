"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _nodeSimctl = require("node-simctl");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {};

function getScreenshotWithIdevicelib(_x, _x2) {
  return _getScreenshotWithIdevicelib.apply(this, arguments);
}

function _getScreenshotWithIdevicelib() {
  _getScreenshotWithIdevicelib = (0, _asyncToGenerator2.default)(function* (udid, isLandscape) {
    const pathToScreenshotTiff = yield _appiumSupport.tempDir.path({
      prefix: `screenshot-${udid}`,
      suffix: '.tiff'
    });
    yield _appiumSupport.fs.rimraf(pathToScreenshotTiff);
    const pathToResultPng = yield _appiumSupport.tempDir.path({
      prefix: `screenshot-${udid}`,
      suffix: '.png'
    });
    yield _appiumSupport.fs.rimraf(pathToResultPng);

    try {
      try {
        yield (0, _teen_process.exec)('idevicescreenshot', ['-u', udid, pathToScreenshotTiff]);
      } catch (e) {
        throw new Error(`Cannot take a screenshot from the device '${udid}' using ` + `idevicescreenshot. Original error: ${e.message}`);
      }

      let sipsArgs = ['-s', 'format', 'png', pathToScreenshotTiff, '--out', pathToResultPng];

      if (isLandscape) {
        sipsArgs = ['-r', '-90', ...sipsArgs];
      }

      try {
        yield (0, _teen_process.exec)('sips', sipsArgs);
      } catch (e) {
        throw new Error(`Cannot convert a screenshot from TIFF to PNG using sips tool. ` + `Original error: ${e.message}`);
      }

      if (!(yield _appiumSupport.fs.exists(pathToResultPng))) {
        throw new Error(`Cannot convert a screenshot from TIFF to PNG. The conversion ` + `result does not exist at '${pathToResultPng}'`);
      }

      return (yield _appiumSupport.fs.readFile(pathToResultPng)).toString('base64');
    } finally {
      yield _appiumSupport.fs.rimraf(pathToScreenshotTiff);
      yield _appiumSupport.fs.rimraf(pathToResultPng);
    }
  });
  return _getScreenshotWithIdevicelib.apply(this, arguments);
}

function verifyIdeviceScreenshotAvailable() {
  return _verifyIdeviceScreenshotAvailable.apply(this, arguments);
}

function _verifyIdeviceScreenshotAvailable() {
  _verifyIdeviceScreenshotAvailable = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield _appiumSupport.fs.which('idevicescreenshot');
    } catch (err) {
      throw new Error(`No 'idevicescreenshot' program found. To use, install ` + `using 'brew install --HEAD libimobiledevice'`);
    }
  });
  return _verifyIdeviceScreenshotAvailable.apply(this, arguments);
}

commands.getScreenshot = (0, _asyncToGenerator2.default)(function* () {
  var _this = this;

  const getScreenshotFromIDS = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Taking screenshot with 'idevicescreenshot'`);

      yield verifyIdeviceScreenshotAvailable();
      const orientation = yield _this.proxyCommand('/orientation', 'GET');
      return yield getScreenshotWithIdevicelib(_this.opts.udid, orientation === 'LANDSCAPE');
    });

    return function getScreenshotFromIDS() {
      return _ref2.apply(this, arguments);
    };
  }();

  const getScreenshotFromWDA = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Taking screenshot with WDA`);

      const data = yield _this.proxyCommand('/screenshot', 'GET');

      if (!_lodash.default.isString(data)) {
        throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);
      }

      return data;
    });

    return function getScreenshotFromWDA() {
      return _ref3.apply(this, arguments);
    };
  }();

  if (this.opts.realDeviceScreenshotter && this.mjpegStream) {
    _logger.default.warn("You've specified screenshot retrieval via both MJpeg server " + "and a real device screenshot utility. Please use one or the " + "other! Choosing MJPEG server");
  }

  if (this.mjpegStrem) {
    const data = yield this.mjpegStream.lastChunkPNGBase64();

    if (data) {
      return data;
    }

    _logger.default.warn("Tried to get screenshot from active MJPEG stream, but there " + "was no data yet. Falling back to regular screenshot methods.");
  }

  const useIdeviceScreenshot = _lodash.default.lowerCase(this.opts.realDeviceScreenshotter) === 'idevicescreenshot';

  if (useIdeviceScreenshot) {
    return yield getScreenshotFromIDS();
  }

  try {
    return yield getScreenshotFromWDA();
  } catch (err) {
    _logger.default.warn(`Error getting screenshot: ${err.message}`);
  }

  if (this.isSimulator()) {
    if (this.xcodeVersion.versionFloat < 8.1) {
      _logger.default.errorAndThrow(`No command line screenshot ability with Xcode ` + `${this.xcodeVersion.versionFloat}. Please upgrade to ` + `at least Xcode 8.1`);
    }

    _logger.default.info(`Falling back to 'simctl io screenshot' API`);

    return yield (0, _nodeSimctl.getScreenshot)(this.opts.udid);
  }

  try {
    return yield getScreenshotFromIDS();
  } catch (err) {
    _logger.default.warn(`Error getting screenshot through 'idevicescreenshot': ${err.message}`);
  }

  return yield (0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA);
});

commands.getElementScreenshot = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (el) {
    el = _appiumSupport.util.unwrapElement(el);

    if (this.isWebContext()) {
      const atomsElement = this.useAtomsElement(el);
      return yield this.executeAtom('getElementScreenshot', [atomsElement]);
    }

    if (this.xcodeVersion.major < 9) {
      _logger.default.errorAndThrow(`Element screenshots are only available since Xcode 9. ` + `The current Xcode version is ${this.xcodeVersion.major}.${this.xcodeVersion.minor}`);
    }

    const data = yield this.proxyCommand(`/element/${el}/screenshot`, 'GET');

    if (!_lodash.default.isString(data)) {
      _logger.default.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);
    }

    return data;
  });

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

commands.getViewportScreenshot = (0, _asyncToGenerator2.default)(function* () {
  let statusBarHeight = yield this.getStatusBarHeight();
  const screenshot = yield this.getScreenshot();

  if (statusBarHeight === 0) {
    return screenshot;
  }

  const scale = yield this.getDevicePixelRatio();
  statusBarHeight = Math.round(statusBarHeight * scale);
  const windowSize = yield this.getWindowSize();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = yield _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
});
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
