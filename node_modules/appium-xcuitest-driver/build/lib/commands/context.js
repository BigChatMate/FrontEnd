"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _appiumSupport = require("appium-support");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.context);
extensions.closeAlertBeforeTest = (0, _asyncToGenerator2.default)(function* () {
  return true;
});
extensions._setContext = extensions.setContext;

extensions.setContext = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (name, callback, skipReadyCheck) {
    yield this._setContext(name, callback, skipReadyCheck);

    if (name && name !== _appiumIosDriver.NATIVE_WIN && this.logs) {
      if (this.logs.safariConsole) {
        yield this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
      }

      if (this.logs.safariNetwork) {
        yield this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
      }
    }
  });

  return function (_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

extensions._getLatestWebviewContextForTitle = extensions.getLatestWebviewContextForTitle;

extensions.getLatestWebviewContextForTitle = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (regExp) {
    let currentUrl = this.getCurrentUrl();

    if (!currentUrl) {
      return yield this._getLatestWebviewContextForTitle(regExp);
    }

    let contexts = yield this.getContextsAndViews();
    let matchingCtx;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = contexts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let ctx = _step.value;

        if (ctx.view) {
          let url = ctx.view.url || '';

          if (url === this.getCurrentUrl()) {
            matchingCtx = ctx;
            break;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (matchingCtx) {
      return matchingCtx.id;
    }

    return yield this._getLatestWebviewContextForTitle(regExp);
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

extensions.isWebContext = function () {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function () {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = (0, _asyncToGenerator2.default)(function* () {
  const socketPath = yield this.opts.device.getWebInspectorSocket();
  return new _appiumRemoteDebugger.RemoteDebugger({
    bundleId: this.opts.bundleId,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : true
  });
});
extensions.mobileGetContexts = (0, _asyncToGenerator2.default)(function* () {
  const curOpt = this.opts.fullContextList;

  try {
    this.opts.fullContextList = true;
    return yield this.getContexts();
  } finally {
    this.opts.fullContextList = curOpt;
  }
});
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
