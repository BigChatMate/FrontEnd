"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};

function extractMandatoryOptions(opts = {}, keys) {
  const result = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const key = _step.value;
      const value = opts[key];

      if (!_lodash.default.isString(value) || _lodash.default.isEmpty(value)) {
        _logger.default.errorAndThrow(`'${key}' is expected to be a valid string. '${value}' is given instead`);
      }

      result[key] = value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

commands.mobileInstallApp = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _extractMandatoryOpti = extractMandatoryOptions(opts, ['app']),
          app = _extractMandatoryOpti.app;

    const dstPath = yield this.helpers.configureApp(app, '.app');

    _logger.default.info(`Installing '${dstPath}' to the ${this.isRealDevice() ? 'real device' : 'Simulator'} ` + `with UDID ${this.opts.device.udid}`);

    if (!(yield _appiumSupport.fs.exists(dstPath))) {
      _logger.default.errorAndThrow(`The application at '${dstPath}' does not exist or is not accessible`);
    }

    try {
      yield this.opts.device.installApp(dstPath);

      _logger.default.info(`Installation of '${dstPath}' succeeded`);
    } finally {
      if (dstPath !== app) {
        yield _appiumSupport.fs.rimraf(dstPath);
      }
    }
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

commands.mobileIsAppInstalled = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _extractMandatoryOpti2 = extractMandatoryOptions(opts, ['bundleId']),
          bundleId = _extractMandatoryOpti2.bundleId;

    const installed = yield this.opts.device.isAppInstalled(bundleId);

    _logger.default.info(`App '${bundleId}' is${installed ? '' : ' not'} installed`);

    return installed;
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

commands.mobileRemoveApp = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _extractMandatoryOpti3 = extractMandatoryOptions(opts, ['bundleId']),
          bundleId = _extractMandatoryOpti3.bundleId;

    _logger.default.info(`Uninstalling the application with bundle identifier '${bundleId}' ` + `from the ${this.isRealDevice() ? 'real device' : 'Simulator'} with UDID ${this.opts.device.udid}`);

    try {
      yield this.opts.device.removeApp(bundleId);

      _logger.default.info(`Removal of '${bundleId}' succeeded`);

      return true;
    } catch (err) {
      _logger.default.warn(`Cannot remove '${bundleId}'. Original error: ${err.message}`);

      return false;
    }
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

commands.mobileLaunchApp = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const wdaOpts = extractMandatoryOptions(opts, ['bundleId']);

    if (opts.arguments) {
      wdaOpts.arguments = _lodash.default.isArray(opts.arguments) ? opts.arguments : [opts.arguments];
    }

    if (opts.environment) {
      wdaOpts.environment = opts.environment;
    }

    return yield this.proxyCommand('/wda/apps/launch', 'POST', wdaOpts);
  });

  return function () {
    return _ref4.apply(this, arguments);
  };
}();

commands.mobileTerminateApp = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.proxyCommand('/wda/apps/terminate', 'POST', extractMandatoryOptions(opts, ['bundleId']));
  });

  return function () {
    return _ref5.apply(this, arguments);
  };
}();

commands.mobileActivateApp = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.proxyCommand('/wda/apps/activate', 'POST', extractMandatoryOptions(opts, ['bundleId']));
  });

  return function () {
    return _ref6.apply(this, arguments);
  };
}();

commands.mobileQueryAppState = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.proxyCommand('/wda/apps/state', 'POST', extractMandatoryOptions(opts, ['bundleId']));
  });

  return function () {
    return _ref7.apply(this, arguments);
  };
}();

commands.installApp = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (appPath) {
    yield this.mobileInstallApp({
      app: appPath
    });
  });

  return function (_x) {
    return _ref8.apply(this, arguments);
  };
}();

commands.activateApp = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (bundleId, opts = {}) {
    return yield this.mobileLaunchApp(Object.assign({}, opts, {
      bundleId
    }));
  });

  return function (_x2) {
    return _ref9.apply(this, arguments);
  };
}();

commands.isAppInstalled = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (bundleId) {
    return yield this.mobileIsAppInstalled({
      bundleId
    });
  });

  return function (_x3) {
    return _ref10.apply(this, arguments);
  };
}();

commands.terminateApp = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (bundleId) {
    return yield this.mobileTerminateApp({
      bundleId
    });
  });

  return function (_x4) {
    return _ref11.apply(this, arguments);
  };
}();

commands.queryAppState = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (bundleId) {
    return yield this.mobileQueryAppState({
      bundleId
    });
  });

  return function (_x5) {
    return _ref12.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
