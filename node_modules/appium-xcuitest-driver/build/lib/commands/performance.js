"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

let commands = {};
exports.commands = commands;
const RECORDERS_CACHE = {};
const DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
const STOP_TIMEOUT_MS = 3 * 60 * 1000;
const START_TIMEOUT_MS = 15 * 1000;
const DEFAULT_PROFILE_NAME = 'Activity Monitor';
const DEFAULT_EXT = '.trace';

function finishPerfRecord(_x) {
  return _finishPerfRecord.apply(this, arguments);
}

function _finishPerfRecord() {
  _finishPerfRecord = (0, _asyncToGenerator2.default)(function* (proc, stopGracefully = true) {
    if (!proc.isRunning) {
      return;
    }

    if (stopGracefully) {
      _logger.default.debug(`Sending SIGINT to the running instruments process`);

      return yield proc.stop('SIGINT', STOP_TIMEOUT_MS);
    }

    _logger.default.debug(`Sending SIGTERM to the running instruments process`);

    yield proc.stop();
  });
  return _finishPerfRecord.apply(this, arguments);
}

function uploadTrace(_x2) {
  return _uploadTrace.apply(this, arguments);
}

function _uploadTrace() {
  _uploadTrace = (0, _asyncToGenerator2.default)(function* (localFile, remotePath = null, uploadOptions = {}) {
    try {
      return yield (0, _utils.encodeBase64OrUpload)(localFile, remotePath, uploadOptions);
    } finally {
      yield _appiumSupport.fs.rimraf(localFile);
    }
  });
  return _uploadTrace.apply(this, arguments);
}

commands.mobileStartPerfRecord = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!this.relaxedSecurityEnabled && !this.isRealDevice()) {
      _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for Simulator performance measurement to work`);
    }

    const _opts$timeout = opts.timeout,
          timeout = _opts$timeout === void 0 ? DEFAULT_TIMEOUT_MS : _opts$timeout,
          _opts$profileName = opts.profileName,
          profileName = _opts$profileName === void 0 ? DEFAULT_PROFILE_NAME : _opts$profileName,
          pid = opts.pid;
    const runningRecorders = RECORDERS_CACHE[profileName];

    if (_lodash.default.isPlainObject(runningRecorders) && runningRecorders[this.opts.device.udid]) {
      const _runningRecorders$thi = runningRecorders[this.opts.device.udid],
            proc = _runningRecorders$thi.proc,
            localPath = _runningRecorders$thi.localPath;
      yield finishPerfRecord(proc, false);

      if (yield _appiumSupport.fs.exists(localPath)) {
        yield _appiumSupport.fs.rimraf(localPath);
      }

      delete runningRecorders[this.opts.device.udid];
    }

    if (!(yield _appiumSupport.fs.which('instruments'))) {
      _logger.default.errorAndThrow(`Cannot start performance recording, because 'instruments' ` + `tool cannot be found in PATH. Are Xcode development tools installed?`);
    }

    const localPath = yield _appiumSupport.tempDir.path({
      prefix: `appium_perf_${profileName}_${Date.now()}`.replace(/\W/g, '_'),
      suffix: DEFAULT_EXT
    });
    const args = ['-w', this.opts.device.udid, '-t', profileName, '-D', localPath, '-l', timeout];

    if (pid) {
      if (`${pid}`.toLowerCase() === 'current') {
        const appInfo = yield this.proxyCommand('/wda/activeAppInfo', 'GET');
        args.push('-p', appInfo.pid);
      } else {
        args.push('-p', pid);
      }
    }

    const proc = new _teen_process.SubProcess('instruments', args);

    _logger.default.info(`Starting 'instruments' with arguments: ${args.join(' ')}`);

    proc.on('exit', code => {
      const msg = `instruments exited with code '${code}'`;

      if (code) {
        _logger.default.warn(msg);
      } else {
        _logger.default.debug(msg);
      }
    });
    proc.on('output', (stdout, stderr) => {
      (stdout || stderr).split('\n').filter(x => x.length).map(x => _logger.default.debug(`[instruments] ${x}`));
    });
    yield proc.start(0);

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        return yield _appiumSupport.fs.exists(localPath);
      }), {
        waitMs: START_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (err) {
      try {
        yield proc.stop('SIGKILL');
      } catch (ign) {}

      _logger.default.errorAndThrow(`Cannot start performance monitoring for '${profileName}' profile in ${START_TIMEOUT_MS}ms. ` + `Make sure you can execute it manually.`);
    }

    RECORDERS_CACHE[profileName] = Object.assign({}, RECORDERS_CACHE[profileName] || {}, {
      [this.opts.device.udid]: {
        proc,
        localPath
      }
    });
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

commands.mobileStopPerfRecord = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!this.relaxedSecurityEnabled && !this.isRealDevice()) {
      _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for Simulator performance measurement to work`);
    }

    const remotePath = opts.remotePath,
          user = opts.user,
          pass = opts.pass,
          method = opts.method,
          _opts$profileName2 = opts.profileName,
          profileName = _opts$profileName2 === void 0 ? DEFAULT_PROFILE_NAME : _opts$profileName2;
    const runningRecorders = RECORDERS_CACHE[profileName];

    if (!_lodash.default.isPlainObject(runningRecorders) || !runningRecorders[this.opts.device.udid]) {
      _logger.default.errorAndThrow(`There are no records for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. ` + `Have you started the profiling before?`);
    }

    const _runningRecorders$thi2 = runningRecorders[this.opts.device.udid],
          proc = _runningRecorders$thi2.proc,
          localPath = _runningRecorders$thi2.localPath;
    yield finishPerfRecord(proc, true);

    if (!(yield _appiumSupport.fs.exists(localPath))) {
      _logger.default.errorAndThrow(`There is no .trace file found for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. ` + `Make sure the profile is supported on this device. ` + `You can use 'instruments -s' command to see the list of all available profiles.`);
    }

    const zipPath = `${localPath}.zip`;
    const zipArgs = ['-9', '-r', zipPath, _path.default.basename(localPath)];

    _logger.default.info(`Found perf trace record '${localPath}'. Compressing it with 'zip ${zipArgs.join(' ')}'`);

    try {
      yield (0, _teen_process.exec)('zip', zipArgs, {
        cwd: _path.default.dirname(localPath)
      });
      return yield uploadTrace(zipPath, remotePath, {
        user,
        pass,
        method
      });
    } finally {
      delete runningRecorders[this.opts.device.udid];

      if (yield _appiumSupport.fs.exists(localPath)) {
        yield _appiumSupport.fs.rimraf(localPath);
      }
    }
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
