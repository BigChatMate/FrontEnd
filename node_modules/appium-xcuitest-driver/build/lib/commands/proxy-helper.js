"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const GET = 'GET';
const POST = 'POST';
const DELETE = 'DELETE';
const SUPPORTED_METHODS = [GET, POST, DELETE];
let helpers = {},
    extensions = {};
exports.helpers = helpers;
const WDA_ROUTES = {
  '/wda/touch/perform': {
    POST: 'performTouch'
  },
  '/wda/touch/multi/perform': {
    POST: 'performMultiAction'
  },
  '/wda/screen': {
    GET: 'getScreenInfo'
  },
  '/wda/alert/buttons': {
    GET: 'getAlertButtons'
  },
  '/wda/apps/launch': {
    POST: 'mobileLaunchApp'
  },
  '/wda/apps/terminate': {
    POST: 'mobileTerminateApp'
  },
  '/wda/apps/activate': {
    POST: 'mobileActivateApp'
  },
  '/wda/apps/state': {
    POST: 'mobileQueryAppState'
  },
  '/wda/keys': {
    POST: 'keys'
  },
  '/wda/touch_id': {
    POST: 'touchId'
  },
  '/wda/keyboard/dismiss': {
    POST: 'hideKeyboard'
  },
  '/wda/lock': {
    POST: 'lock'
  },
  '/wda/unlock': {
    POST: 'unlock'
  },
  '/wda/locked': {
    GET: 'isLocked'
  },
  '/wda/tap/nil': {
    POST: 'clickCoords'
  },
  '/window/size': {
    GET: 'getWindowSize'
  }
};

function wdaRouteToCommandName(endpoint, method) {
  return WDA_ROUTES[endpoint] ? WDA_ROUTES[endpoint][method] : null;
}

helpers.proxyCommand = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (endpoint, method, body, isSessionCommand = true) {
    if (this.shutdownUnexpectedly) {
      return;
    }

    if (!endpoint) {
      _logger.default.errorAndThrow('Proxying requires an endpoint');
    } else if (SUPPORTED_METHODS.indexOf(method) === -1) {
      _logger.default.errorAndThrow(`Proxying only works for the following requests: ${SUPPORTED_METHODS.join(', ')}`);
    }

    if (!this.wda) {
      throw new Error('Cannot call proxyCommand without WDA driver active');
    }

    const proxy = isSessionCommand ? this.wda.jwproxy : this.wda.noSessionProxy;

    if (!proxy) {
      throw new Error('Cannot call proxyCommand without WDA proxy active');
    }

    let cmdName = wdaRouteToCommandName(endpoint, method) || (0, _appiumBaseDriver.routeToCommandName)(endpoint, method);

    const timeout = this._getCommandTimeout(cmdName);

    if (!cmdName) {
      cmdName = 'Unknown';

      _logger.default.warn(`Proxying to WDA with an unknown route: ${method} ${endpoint}`);
    }

    if (!timeout) {
      return yield proxy.command(endpoint, method, body);
    }

    _logger.default.debug(`Setting custom timeout to ${timeout} ms for '${cmdName}' command`);

    let isCommandExpired = false;
    const res = yield _bluebird.default.resolve(proxy.command(endpoint, method, body)).timeout(timeout).catch(_bluebird.default.Promise.TimeoutError, () => {
      isCommandExpired = true;
    });

    if (isCommandExpired) {
      proxy.cancelActiveRequests();
      const errMsg = `Appium did not get any response from '${cmdName}' command in ${timeout} ms`;
      yield this.startUnexpectedShutdown(new _appiumBaseDriver.errors.TimeoutError(errMsg));

      _logger.default.errorAndThrow(errMsg);
    }

    return res;
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

Object.assign(extensions, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
