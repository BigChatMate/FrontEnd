"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumIosDriver = require("appium-ios-driver");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const IPHONE_EXTRA_WEB_COORD_SCROLL_OFFSET = -15;
const IPHONE_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = 10;
const IPHONE_WEB_COORD_OFFSET = -10;
const IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
const IPHONE_X_EXTRA_WEB_COORD_SCROLL_OFFSET = -90;
const IPHONE_X_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = -10;
const IPHONE_X_WEB_COORD_OFFSET = 40;
const IPAD_EXTRA_WEB_COORD_SCROLL_OFFSET = -10;
const IPAD_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = 0;
const IPAD_WEB_COORD_OFFSET = 10;
const IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;
const IPHONE_X_WIDTH = 375;
const IPHONE_X_HEIGHT = 812;
const ATOM_WAIT_TIMEOUT = 5 * 60000;
let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.web);

extensions.getSafariIsIphone = function () {
  var _getSafariIsIphone = (0, _asyncToGenerator2.default)(function* () {
    try {
      const userAgent = yield this.execute('return navigator.userAgent');
      return userAgent.toLowerCase().includes('iphone');
    } catch (err) {
      _logger.default.warn(`Unable to find device type from useragent. Assuming iPhone`);

      _logger.default.debug(`Error: ${err.message}`);
    }

    return true;
  });

  return function getSafariIsIphone() {
    return _getSafariIsIphone.apply(this, arguments);
  };
}();

extensions.getSafariIsIphoneX = function () {
  var _getSafariIsIphone2 = (0, _asyncToGenerator2.default)(function* () {
    try {
      const script = 'return {height: window.screen.availHeight, width: window.screen.availWidth};';

      const _ref = yield this.execute(script),
            height = _ref.height,
            width = _ref.width;

      return height === IPHONE_X_HEIGHT && width === IPHONE_X_WIDTH || height === IPHONE_X_WIDTH && width === IPHONE_X_HEIGHT;
    } catch (err) {
      _logger.default.warn(`Unable to find device type from useragent. Assuming not iPhone X`);

      _logger.default.debug(`Error: ${err.message}`);
    }

    return false;
  });

  return function getSafariIsIphone() {
    return _getSafariIsIphone2.apply(this, arguments);
  };
}();

const getElementHeightMemoized = _lodash.default.memoize(function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (key, driver, el) {
    el = _appiumSupport.util.unwrapElement(el);
    return (yield driver.getNativeRect(el)).height;
  });

  return function (_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}());

extensions.getExtraTranslateWebCoordsOffset = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (coords, webviewRect) {
    let offset = 0;
    const implicitWaitMs = this.implicitWaitMs;
    const isIphone = yield this.getSafariIsIphone();
    const isIphoneX = isIphone && (yield this.getSafariIsIphoneX());

    try {
      this.setImplicitWait(0);
      yield this.findNativeElementOrElements('accessibility id', 'ReloadButton', false);

      if (isIphoneX) {
        offset += IPHONE_X_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
      } else if (isIphone) {
        offset += IPHONE_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
      } else {
        offset += IPAD_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
      }
    } catch (err) {
      try {
        const el = yield this.findNativeElementOrElements('accessibility id', 'URL', false);
        offset -= yield getElementHeightMemoized('URLBar', this, el);
      } catch (ign) {}
    } finally {
      this.setImplicitWait(implicitWaitMs);
    }

    if (coords.y > webviewRect.height) {
      if (isIphoneX) {
        offset += IPHONE_X_EXTRA_WEB_COORD_SCROLL_OFFSET;
      } else if (isIphone) {
        offset += IPHONE_EXTRA_WEB_COORD_SCROLL_OFFSET;
      } else {
        offset += IPAD_EXTRA_WEB_COORD_SCROLL_OFFSET;
      }
    }

    offset += isIphone ? IPHONE_WEB_COORD_OFFSET : IPAD_WEB_COORD_OFFSET;
    offset += isIphoneX ? IPHONE_X_WEB_COORD_OFFSET : 0;

    _logger.default.debug(`Extra translated web coordinates offset: ${offset}`);

    return offset;
  });

  return function (_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

extensions.getExtraNativeWebTapOffset = (0, _asyncToGenerator2.default)(function* () {
  let offset = 0;
  const implicitWaitMs = this.implicitWaitMs;

  try {
    this.setImplicitWait(0);

    try {
      const el = yield this.findNativeElementOrElements('-ios predicate string', `name LIKE '*, Tab' AND visible = 1`, false);
      offset += yield getElementHeightMemoized('TabBar', this, el);
    } catch (ign) {}

    try {
      yield this.findNativeElementOrElements('accessibility id', 'Close app download offer', false);
      offset += (yield this.getSafariIsIphone()) ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
    } catch (ign) {}
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  _logger.default.debug(`Additional native web tap offset computed: ${offset}`);

  return offset;
});

function tapWebElementNatively(_x6, _x7) {
  return _tapWebElementNatively.apply(this, arguments);
}

function _tapWebElementNatively() {
  _tapWebElementNatively = (0, _asyncToGenerator2.default)(function* (driver, atomsElement) {
    try {
      let text = yield driver.executeAtom('get_text', [atomsElement]);

      if (!text) {
        text = yield driver.executeAtom('get_attribute_value', [atomsElement, 'value']);
      }

      if (text) {
        const el = yield driver.findNativeElementOrElements('accessibility id', text, false);
        const rect = yield driver.proxyCommand(`/element/${el.ELEMENT}/rect`, 'GET');
        const coords = {
          x: Math.round(rect.x + rect.width / 2),
          y: Math.round(rect.y + rect.height / 2)
        };
        yield driver.clickCoords(coords);
        return true;
      }
    } catch (err) {
      _logger.default.warn(`Error attempting to click: ${err.message}`);
    }

    return false;
  });
  return _tapWebElementNatively.apply(this, arguments);
}

extensions.nativeWebTap = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (el) {
    const atomsElement = this.useAtomsElement(el);

    if (yield tapWebElementNatively(this, atomsElement)) {
      return;
    }

    _logger.default.warn('Unable to do simple native web tap. Attempting to convert coordinates');

    yield this.executeAtom('get_size', [atomsElement]);
    yield this.executeAtom('get_top_left_coordinates', [atomsElement]);

    const _ref6 = yield this.executeAtom('get_size', [atomsElement]),
          width = _ref6.width,
          height = _ref6.height;

    let _ref7 = yield this.executeAtom('get_top_left_coordinates', [atomsElement]),
        x = _ref7.x,
        y = _ref7.y;

    x += width / 2;
    y += height / 2;
    this.curWebCoords = {
      x,
      y
    };
    yield this.clickWebCoords();
  });

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}();

extensions.clickCoords = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (coords) {
    yield this.performTouch([{
      action: 'tap',
      options: coords
    }]);
  });

  return function (_x9) {
    return _ref8.apply(this, arguments);
  };
}();

extensions.translateWebCoords = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (coords) {
    var _this = this;

    _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

    const implicitWaitMs = this.implicitWaitMs;
    let webview;

    try {
      this.setImplicitWait(0);
      webview = yield (0, _asyncbox.retryInterval)(5, 100, (0, _asyncToGenerator2.default)(function* () {
        return yield _this.findNativeElementOrElements('-ios predicate string', `type = 'XCUIElementTypeWebView' AND visible = 1`, false);
      }));
    } finally {
      this.setImplicitWait(implicitWaitMs);
    }

    webview = _appiumSupport.util.unwrapElement(webview);
    const rect = yield this.proxyCommand(`/element/${webview}/rect`, 'GET');
    const wvPos = {
      x: rect.x,
      y: rect.y
    };
    const realDims = {
      w: rect.width,
      h: rect.height
    };
    const cmd = '(function () { return {w: document.documentElement.clientWidth, h: document.documentElement.clientHeight}; })()';
    const wvDims = yield this.remote.execute(cmd);
    const urlBarHeight = 64;
    wvPos.y += urlBarHeight;
    const realDimensionHeight = 108;
    realDims.h -= realDimensionHeight;
    let yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
    yOffset += yield this.getExtraNativeWebTapOffset();
    coords.y += yield this.getExtraTranslateWebCoordsOffset(coords, rect);

    if (wvDims && realDims && wvPos) {
      let xRatio = realDims.w / wvDims.w;
      let yRatio = realDims.h / wvDims.h;
      let newCoords = {
        x: wvPos.x + Math.round(xRatio * coords.x),
        y: wvPos.y + yOffset + Math.round(yRatio * coords.y)
      };

      _logger.default.debug(`Converted coordinates: ${JSON.stringify(newCoords)}`);

      _logger.default.debug(`    rect: ${JSON.stringify(rect)}`);

      _logger.default.debug(`    wvPos: ${JSON.stringify(wvPos)}`);

      _logger.default.debug(`    realDims: ${JSON.stringify(realDims)}`);

      _logger.default.debug(`    wvDims: ${JSON.stringify(wvDims)}`);

      _logger.default.debug(`    xRatio: ${JSON.stringify(xRatio)}`);

      _logger.default.debug(`    yRatio: ${JSON.stringify(yRatio)}`);

      _logger.default.debug(`    yOffset: ${JSON.stringify(yOffset)}`);

      _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

      return newCoords;
    }
  });

  return function (_x10) {
    return _ref9.apply(this, arguments);
  };
}();

extensions.checkForAlert = (0, _asyncToGenerator2.default)(function* () {
  return false;
});

extensions.waitForAtom = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (promise) {
    const started = process.hrtime();

    try {
      return this.parseExecuteResponse((yield _bluebird.default.resolve(promise).timeout(ATOM_WAIT_TIMEOUT)));
    } catch (err) {
      if (err instanceof _bluebird.default.TimeoutError) {
        throw new Error(`Did not get any response after ${process.hrtime(started)[0]}s`);
      }

      throw err;
    }
  });

  return function (_x11) {
    return _ref12.apply(this, arguments);
  };
}();

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
