"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.back = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    yield this.nativeBack();
  } else {
    yield this.mobileWebNav('back');
  }
});
helpers.nativeBack = (0, _asyncToGenerator2.default)(function* () {
  try {
    let navBar = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeNavigationBar', false);
    let buttons = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, navBar);

    if (buttons.length === 0) {
      throw new Error('No buttons found in navigation bar');
    }

    let backButton = _lodash.default.filter(buttons, value => value.label === 'Back')[0];

    if (backButton) {
      _logger.default.debug(`Found navigation bar 'back' button. Clicking.`);
    } else {
      _logger.default.debug(`Unable to find 'Back' button. Trying first button in navigation bar`);

      backButton = buttons[0];
    }

    yield this.nativeClick(backButton);
  } catch (err) {
    _logger.default.error(`Unable to find navigation bar and back button: ${err.message}`);
  }
});
commands.forward = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {}

  yield this.mobileWebNav('forward');
});
commands.closeWindow = (0, _asyncToGenerator2.default)(function* () {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  let script = "return window.open('','_self').close();";
  return yield this.executeAtom('execute_script', [script, []], true);
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uYXZpZ2F0aW9uLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJiYWNrIiwiaXNXZWJDb250ZXh0IiwibmF0aXZlQmFjayIsIm1vYmlsZVdlYk5hdiIsIm5hdkJhciIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsImJ1dHRvbnMiLCJsZW5ndGgiLCJFcnJvciIsImJhY2tCdXR0b24iLCJfIiwiZmlsdGVyIiwidmFsdWUiLCJsYWJlbCIsImxvZyIsImRlYnVnIiwibmF0aXZlQ2xpY2siLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiLCJmb3J3YXJkIiwiY2xvc2VXaW5kb3ciLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwic2NyaXB0IiwiZXhlY3V0ZUF0b20iLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7O0FBRUFGLFFBQVEsQ0FBQ0csSUFBVCxtQ0FBZ0IsYUFBa0I7QUFDaEMsTUFBSSxDQUFDLEtBQUtDLFlBQUwsRUFBTCxFQUEwQjtBQUN4QixVQUFNLEtBQUtDLFVBQUwsRUFBTjtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU0sS0FBS0MsWUFBTCxDQUFrQixNQUFsQixDQUFOO0FBQ0Q7QUFDRixDQU5EO0FBUUFMLE9BQU8sQ0FBQ0ksVUFBUixtQ0FBcUIsYUFBa0I7QUFDckMsTUFBSTtBQUNGLFFBQUlFLE1BQU0sU0FBUyxLQUFLQywyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyw4QkFBL0MsRUFBK0UsS0FBL0UsQ0FBbkI7QUFDQSxRQUFJQyxPQUFPLFNBQVMsS0FBS0QsMkJBQUwsQ0FBaUMsWUFBakMsRUFBK0MsdUJBQS9DLEVBQXdFLElBQXhFLEVBQThFRCxNQUE5RSxDQUFwQjs7QUFDQSxRQUFJRSxPQUFPLENBQUNDLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsWUFBTSxJQUFJQyxLQUFKLENBQVUsb0NBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUlDLFVBQVUsR0FBR0MsZ0JBQUVDLE1BQUYsQ0FBU0wsT0FBVCxFQUFtQk0sS0FBRCxJQUFXQSxLQUFLLENBQUNDLEtBQU4sS0FBZ0IsTUFBN0MsRUFBcUQsQ0FBckQsQ0FBakI7O0FBQ0EsUUFBSUosVUFBSixFQUFnQjtBQUNkSyxzQkFBSUMsS0FBSixDQUFXLCtDQUFYO0FBQ0QsS0FGRCxNQUVPO0FBQ0xELHNCQUFJQyxLQUFKLENBQVcscUVBQVg7O0FBQ0FOLE1BQUFBLFVBQVUsR0FBR0gsT0FBTyxDQUFDLENBQUQsQ0FBcEI7QUFDRDs7QUFDRCxVQUFNLEtBQUtVLFdBQUwsQ0FBaUJQLFVBQWpCLENBQU47QUFDRCxHQWZELENBZUUsT0FBT1EsR0FBUCxFQUFZO0FBQ1pILG9CQUFJSSxLQUFKLENBQVcsa0RBQWlERCxHQUFHLENBQUNFLE9BQVEsRUFBeEU7QUFDRDtBQUNGLENBbkJEO0FBcUJBdEIsUUFBUSxDQUFDdUIsT0FBVCxtQ0FBbUIsYUFBa0I7QUFDbkMsTUFBSSxDQUFDLEtBQUtuQixZQUFMLEVBQUwsRUFBMEIsQ0FDekI7O0FBQ0QsUUFBTSxLQUFLRSxZQUFMLENBQWtCLFNBQWxCLENBQU47QUFDRCxDQUpEO0FBTUFOLFFBQVEsQ0FBQ3dCLFdBQVQsbUNBQXVCLGFBQWtCO0FBQ3ZDLE1BQUksQ0FBQyxLQUFLcEIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSXFCLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBQ0QsTUFBSUMsTUFBTSxHQUFHLHlDQUFiO0FBQ0EsZUFBYSxLQUFLQyxXQUFMLENBQWlCLGdCQUFqQixFQUFtQyxDQUFDRCxNQUFELEVBQVMsRUFBVCxDQUFuQyxFQUFpRCxJQUFqRCxDQUFiO0FBQ0QsQ0FORDtBQVNBRSxNQUFNLENBQUNDLE1BQVAsQ0FBYzVCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5iYWNrID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBhd2FpdCB0aGlzLm5hdGl2ZUJhY2soKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLm1vYmlsZVdlYk5hdignYmFjaycpO1xuICB9XG59O1xuXG5oZWxwZXJzLm5hdGl2ZUJhY2sgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IG5hdkJhciA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZU5hdmlnYXRpb25CYXInLCBmYWxzZSk7XG4gICAgbGV0IGJ1dHRvbnMgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVCdXR0b24nLCB0cnVlLCBuYXZCYXIpO1xuICAgIGlmIChidXR0b25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBidXR0b25zIGZvdW5kIGluIG5hdmlnYXRpb24gYmFyJyk7XG4gICAgfVxuXG4gICAgbGV0IGJhY2tCdXR0b24gPSBfLmZpbHRlcihidXR0b25zLCAodmFsdWUpID0+IHZhbHVlLmxhYmVsID09PSAnQmFjaycpWzBdO1xuICAgIGlmIChiYWNrQnV0dG9uKSB7XG4gICAgICBsb2cuZGVidWcoYEZvdW5kIG5hdmlnYXRpb24gYmFyICdiYWNrJyBidXR0b24uIENsaWNraW5nLmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZGVidWcoYFVuYWJsZSB0byBmaW5kICdCYWNrJyBidXR0b24uIFRyeWluZyBmaXJzdCBidXR0b24gaW4gbmF2aWdhdGlvbiBiYXJgKTtcbiAgICAgIGJhY2tCdXR0b24gPSBidXR0b25zWzBdO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLm5hdGl2ZUNsaWNrKGJhY2tCdXR0b24pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYFVuYWJsZSB0byBmaW5kIG5hdmlnYXRpb24gYmFyIGFuZCBiYWNrIGJ1dHRvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZm9yd2FyZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gIH1cbiAgYXdhaXQgdGhpcy5tb2JpbGVXZWJOYXYoJ2ZvcndhcmQnKTtcbn07XG5cbmNvbW1hbmRzLmNsb3NlV2luZG93ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuICBsZXQgc2NyaXB0ID0gXCJyZXR1cm4gd2luZG93Lm9wZW4oJycsJ19zZWxmJykuY2xvc2UoKTtcIjtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2V4ZWN1dGVfc2NyaXB0JywgW3NjcmlwdCwgW11dLCB0cnVlKTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL25hdmlnYXRpb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
