"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _iproxy = _interopRequireDefault(require("../wda/iproxy"));

let commands = {};
exports.commands = commands;
const MAX_RECORDING_TIME_SEC = 60 * 30;
const DEFAULT_RECORDING_TIME_SEC = 60 * 3;
const DEFAULT_MJPEG_SERVER_PORT = 9100;
const MP4_EXT = '.mp4';
const DEFAULT_FPS = 10;
const FFMPEG_BINARY = 'ffmpeg';

const ffmpegLogger = _appiumSupport.logger.getLogger(FFMPEG_BINARY);

class ScreenRecorder {
  constructor(udid, videoPath, opts = {}) {
    this.videoPath = videoPath;
    this.opts = opts;
    this.udid = udid;
    this.mainProcess = null;
    this.iproxy = null;
    this.timeoutHandler = null;
  }

  start(timeoutMs) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _appiumSupport.fs.which(FFMPEG_BINARY);
      } catch (err) {
        throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` + `Check https://www.ffmpeg.org/download.html for more details.`);
      }

      const localPort = _this.opts.remotePort;

      if (_this.opts.usePortForwarding) {
        yield _this.startIproxy(localPort);
      }

      const args = ['-f', 'mjpeg', '-r', _this.opts.videoFps, '-i', `http://localhost:${localPort}`, '-vcodec', 'mjpeg', '-y', _this.videoPath];
      _this.mainProcess = new _teen_process.SubProcess(FFMPEG_BINARY, args);

      _this.mainProcess.on('output', (stdout, stderr) => {
        if (stderr && !stderr.includes('frame=')) {
          ffmpegLogger.info(`${stderr}`);
        }
      });

      yield _this.mainProcess.start(5000);

      _logger.default.info(`Starting screen capture on the device '${_this.udid}' with command: '${FFMPEG_BINARY} ${args.join(' ')}'. ` + `Will timeout in ${timeoutMs}ms`);

      _this.timeoutHandler = setTimeout((0, _asyncToGenerator2.default)(function* () {
        if (!(yield _this.interrupt())) {
          _logger.default.warn(`Cannot finish the active screen recording on the device '${_this.udid}' after ${timeoutMs}ms timeout`);
        }
      }), timeoutMs);
    })();
  }

  startIproxy(localPort) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this2.iproxy = new _iproxy.default(_this2.udid, localPort, _this2.opts.remotePort);

      try {
        yield _this2.iproxy.start();
      } catch (err) {
        _logger.default.warn(`Cannot start iproxy. Assuming it is already forwarding the remote port ${_this2.opts.remotePort} to ${localPort} ` + `for the device ${_this2.udid}. Set the custom value to 'mjpegServerPort' capability if this is an undesired behavior. ` + `Original error: ${err.message}`);

        _this2.iproxy = null;
      }
    })();
  }

  stopIproxy() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this3.iproxy) {
        return;
      }

      const quitPromise = _this3.iproxy.quit();

      _this3.iproxy = null;

      try {
        yield quitPromise;
      } catch (err) {
        _logger.default.warn(`Cannot stop iproxy. Original error: ${err.message}`);
      }
    })();
  }

  interrupt(force = false) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let result = true;

      if (_this4.timeoutHandler) {
        clearTimeout(_this4.timeoutHandler);
        _this4.timeoutHandler = null;
      }

      if (_this4.mainProcess && _this4.mainProcess.isRunning) {
        const interruptPromise = _this4.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');

        _this4.mainProcess = null;

        try {
          yield interruptPromise;
        } catch (e) {
          _logger.default.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` + `Original error: ${e.message}`);

          result = false;
        }
      }

      if (_this4.opts.usePortForwarding) {
        yield _this4.stopIproxy();
      }

      return result;
    })();
  }

  finish() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this5.interrupt();
      return _this5.videoPath;
    })();
  }

  cleanup() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (yield _appiumSupport.fs.exists(_this6.videoPath)) {
        yield _appiumSupport.fs.rimraf(_this6.videoPath);
      }
    })();
  }

}

commands.startRecordingScreen = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (options = {}) {
    const videoType = options.videoType,
          _options$timeLimit = options.timeLimit,
          timeLimit = _options$timeLimit === void 0 ? DEFAULT_RECORDING_TIME_SEC : _options$timeLimit,
          _options$videoQuality = options.videoQuality,
          videoQuality = _options$videoQuality === void 0 ? 'medium' : _options$videoQuality,
          _options$videoFps = options.videoFps,
          videoFps = _options$videoFps === void 0 ? DEFAULT_FPS : _options$videoFps,
          forceRestart = options.forceRestart;
    let result = '';

    if (!forceRestart) {
      _logger.default.info(`Checking if there is/was a previous screen recording. ` + `Set 'forceRestart' option to 'true' if you'd like to skip this step.`);

      result = yield this.stopRecordingScreen(options);
    }

    const videoPath = yield _appiumSupport.tempDir.path({
      prefix: `appium_${Math.random().toString(16).substring(2, 8)}`,
      suffix: MP4_EXT
    });
    const screenRecorder = new ScreenRecorder(this.opts.device.udid, videoPath, {
      videoType,
      videoQuality,
      videoFps: videoFps || DEFAULT_FPS,
      remotePort: this.opts.mjpegServerPort || DEFAULT_MJPEG_SERVER_PORT,
      usePortForwarding: this.isRealDevice()
    });

    if (!(yield screenRecorder.interrupt(true))) {
      _logger.default.errorAndThrow('Unable to stop screen recording process');
    }

    if (this._recentScreenRecorder) {
      yield this._recentScreenRecorder.cleanup();
      this._recentScreenRecorder = null;
    }

    const timeoutSeconds = parseFloat(timeLimit);

    if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {
      _logger.default.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` + `The value of '${timeLimit}' has been passed instead.`);
    }

    try {
      yield screenRecorder.start(timeoutSeconds * 1000);
    } catch (e) {
      yield screenRecorder.interrupt(true);
      yield screenRecorder.cleanup();
      throw e;
    }

    this._recentScreenRecorder = screenRecorder;
    return result;
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

commands.stopRecordingScreen = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (options = {}) {
    const remotePath = options.remotePath,
          user = options.user,
          pass = options.pass,
          method = options.method;

    if (!this._recentScreenRecorder) {
      _logger.default.info('Screen recording is not running. There is nothing to stop.');

      return '';
    }

    try {
      const videoPath = yield this._recentScreenRecorder.finish();

      if (!(yield _appiumSupport.fs.exists(videoPath))) {
        _logger.default.errorAndThrow(`The screen recorder utility has failed ` + `to store the actual screen recording at '${videoPath}'`);
      }

      return yield (0, _utils.encodeBase64OrUpload)(videoPath, remotePath, {
        user,
        pass,
        method
      });
    } finally {
      yield this._recentScreenRecorder.interrupt(true);
      yield this._recentScreenRecorder.cleanup();
      this._recentScreenRecorder = null;
    }
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
