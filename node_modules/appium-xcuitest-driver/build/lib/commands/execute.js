"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.execute);
const iosExecute = extensions.execute;

extensions.execute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (script, args) {
    if (!script.match(/^mobile:/) && !this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }

    return yield iosExecute.call(this, script, args);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const iosExecuteAsync = extensions.executeAsync;

extensions.executeAsync = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (script, args, sessionId) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotImplementedError();
    }

    return yield iosExecuteAsync.call(this, script, args, sessionId);
  });

  return function (_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

extensions.executeMobile = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (mobileCommand, opts = {}) {
    const commandMap = {
      scroll: 'mobileScroll',
      swipe: 'mobileSwipe',
      pinch: 'mobilePinch',
      doubleTap: 'mobileDoubleTap',
      twoFingerTap: 'mobileTwoFingerTap',
      touchAndHold: 'mobileTouchAndHold',
      tap: 'mobileTap',
      dragFromToForDuration: 'mobileDragFromToForDuration',
      selectPickerWheelValue: 'mobileSelectPickerWheelValue',
      alert: 'mobileHandleAlert',
      setPasteboard: 'mobileSetPasteboard',
      getPasteboard: 'mobileGetPasteboard',
      source: 'mobileGetSource',
      getContexts: 'mobileGetContexts',
      installApp: 'mobileInstallApp',
      isAppInstalled: 'mobileIsAppInstalled',
      removeApp: 'mobileRemoveApp',
      launchApp: 'mobileLaunchApp',
      terminateApp: 'mobileTerminateApp',
      queryAppState: 'mobileQueryAppState',
      activateApp: 'mobileActivateApp',
      viewportScreenshot: 'getViewportScreenshot',
      startPerfRecord: 'mobileStartPerfRecord',
      stopPerfRecord: 'mobileStopPerfRecord',
      installCertificate: 'mobileInstallCertificate',
      startLogsBroadcast: 'mobileStartLogsBroadcast',
      stopLogsBroadcast: 'mobileStopLogsBroadcast',
      batteryInfo: 'mobileGetBatteryInfo',
      pressButton: 'mobilePressButton',
      enrollBiometric: 'mobileEnrollBiometric',
      sendBiometricMatch: 'mobileSendBiometricMatch',
      isBiometricEnrolled: 'mobileIsBiometricEnrolled',
      clearKeychains: 'mobileClearKeychains',
      getPermission: 'mobileGetPermission'
    };

    if (!_lodash.default.has(commandMap, mobileCommand)) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". Only ${_lodash.default.keys(commandMap)} commands are supported.`);
    }

    return yield this[commandMap[mobileCommand]](opts);
  });

  return function (_x6) {
    return _ref3.apply(this, arguments);
  };
}();

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpb3NDb21tYW5kcyIsImV4ZWN1dGUiLCJpb3NFeGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNhbGwiLCJpb3NFeGVjdXRlQXN5bmMiLCJleGVjdXRlQXN5bmMiLCJzZXNzaW9uSWQiLCJleGVjdXRlTW9iaWxlIiwibW9iaWxlQ29tbWFuZCIsIm9wdHMiLCJjb21tYW5kTWFwIiwic2Nyb2xsIiwic3dpcGUiLCJwaW5jaCIsImRvdWJsZVRhcCIsInR3b0ZpbmdlclRhcCIsInRvdWNoQW5kSG9sZCIsInRhcCIsImRyYWdGcm9tVG9Gb3JEdXJhdGlvbiIsInNlbGVjdFBpY2tlcldoZWVsVmFsdWUiLCJhbGVydCIsInNldFBhc3RlYm9hcmQiLCJnZXRQYXN0ZWJvYXJkIiwic291cmNlIiwiZ2V0Q29udGV4dHMiLCJpbnN0YWxsQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJyZW1vdmVBcHAiLCJsYXVuY2hBcHAiLCJ0ZXJtaW5hdGVBcHAiLCJxdWVyeUFwcFN0YXRlIiwiYWN0aXZhdGVBcHAiLCJ2aWV3cG9ydFNjcmVlbnNob3QiLCJzdGFydFBlcmZSZWNvcmQiLCJzdG9wUGVyZlJlY29yZCIsImluc3RhbGxDZXJ0aWZpY2F0ZSIsInN0YXJ0TG9nc0Jyb2FkY2FzdCIsInN0b3BMb2dzQnJvYWRjYXN0IiwiYmF0dGVyeUluZm8iLCJwcmVzc0J1dHRvbiIsImVucm9sbEJpb21ldHJpYyIsInNlbmRCaW9tZXRyaWNNYXRjaCIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJjbGVhcktleWNoYWlucyIsImdldFBlcm1pc3Npb24iLCJfIiwiaGFzIiwiVW5rbm93bkNvbW1hbmRFcnJvciIsImtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7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bUIsRUFBRSwyQkEvQ0o7QUFpRGpCQyxNQUFBQSxjQUFjLEVBQUUsc0JBakRDO0FBbURqQkMsTUFBQUEsYUFBYSxFQUFFO0FBbkRFLEtBQW5COztBQXNEQSxRQUFJLENBQUNDLGdCQUFFQyxHQUFGLENBQU1wQyxVQUFOLEVBQWtCRixhQUFsQixDQUFMLEVBQXVDO0FBQ3JDLFlBQU0sSUFBSVAseUJBQU84QyxtQkFBWCxDQUFnQywyQkFBMEJ2QyxhQUFjLFdBQVVxQyxnQkFBRUcsSUFBRixDQUFPdEMsVUFBUCxDQUFtQiwwQkFBckcsQ0FBTjtBQUNEOztBQUNELGlCQUFhLEtBQUtBLFVBQVUsQ0FBQ0YsYUFBRCxDQUFmLEVBQWdDQyxJQUFoQyxDQUFiO0FBQ0QsR0EzREQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O2VBNkRlbEIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBpb3NDb21tYW5kcyB9IGZyb20gJ2FwcGl1bS1pb3MtZHJpdmVyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy5leGVjdXRlKTtcblxuY29uc3QgaW9zRXhlY3V0ZSA9IGV4dGVuc2lvbnMuZXhlY3V0ZTtcbmV4dGVuc2lvbnMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKCFzY3JpcHQubWF0Y2goL15tb2JpbGU6LykgJiYgIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBpb3NFeGVjdXRlLmNhbGwodGhpcywgc2NyaXB0LCBhcmdzKTtcbn07XG5cbmNvbnN0IGlvc0V4ZWN1dGVBc3luYyA9IGV4dGVuc2lvbnMuZXhlY3V0ZUFzeW5jO1xuZXh0ZW5zaW9ucy5leGVjdXRlQXN5bmMgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzLCBzZXNzaW9uSWQpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgaW9zRXhlY3V0ZUFzeW5jLmNhbGwodGhpcywgc2NyaXB0LCBhcmdzLCBzZXNzaW9uSWQpO1xufTtcblxuLy8gT3ZlcnJpZGVzIHRoZSAnZXhlY3V0ZU1vYmlsZScgZnVuY3Rpb24gZGVmaW5lZCBpbiBhcHBpdW0taW9zLWRyaXZlclxuZXh0ZW5zaW9ucy5leGVjdXRlTW9iaWxlID0gYXN5bmMgZnVuY3Rpb24gKG1vYmlsZUNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBjb21tYW5kTWFwID0ge1xuICAgIC8vcmVnaW9uIGdlc3R1cmVzIHN1cHBvcnRcbiAgICBzY3JvbGw6ICdtb2JpbGVTY3JvbGwnLFxuICAgIHN3aXBlOiAnbW9iaWxlU3dpcGUnLFxuICAgIHBpbmNoOiAnbW9iaWxlUGluY2gnLFxuICAgIGRvdWJsZVRhcDogJ21vYmlsZURvdWJsZVRhcCcsXG4gICAgdHdvRmluZ2VyVGFwOiAnbW9iaWxlVHdvRmluZ2VyVGFwJyxcbiAgICB0b3VjaEFuZEhvbGQ6ICdtb2JpbGVUb3VjaEFuZEhvbGQnLFxuICAgIHRhcDogJ21vYmlsZVRhcCcsXG4gICAgZHJhZ0Zyb21Ub0ZvckR1cmF0aW9uOiAnbW9iaWxlRHJhZ0Zyb21Ub0ZvckR1cmF0aW9uJyxcbiAgICBzZWxlY3RQaWNrZXJXaGVlbFZhbHVlOiAnbW9iaWxlU2VsZWN0UGlja2VyV2hlZWxWYWx1ZScsXG5cbiAgICAvL2VuZHJlZ2lvbiBnZXN0dXJlcyBzdXBwb3J0XG4gICAgYWxlcnQ6ICdtb2JpbGVIYW5kbGVBbGVydCcsXG5cbiAgICBzZXRQYXN0ZWJvYXJkOiAnbW9iaWxlU2V0UGFzdGVib2FyZCcsXG4gICAgZ2V0UGFzdGVib2FyZDogJ21vYmlsZUdldFBhc3RlYm9hcmQnLFxuXG4gICAgc291cmNlOiAnbW9iaWxlR2V0U291cmNlJyxcbiAgICBnZXRDb250ZXh0czogJ21vYmlsZUdldENvbnRleHRzJyxcblxuICAgIC8vcmVnaW9uIG11bHRpcGxlIGFwcHMgbWFuYWdlbWVudFxuICAgIGluc3RhbGxBcHA6ICdtb2JpbGVJbnN0YWxsQXBwJyxcbiAgICBpc0FwcEluc3RhbGxlZDogJ21vYmlsZUlzQXBwSW5zdGFsbGVkJyxcbiAgICByZW1vdmVBcHA6ICdtb2JpbGVSZW1vdmVBcHAnLFxuICAgIGxhdW5jaEFwcDogJ21vYmlsZUxhdW5jaEFwcCcsXG4gICAgdGVybWluYXRlQXBwOiAnbW9iaWxlVGVybWluYXRlQXBwJyxcbiAgICBxdWVyeUFwcFN0YXRlOiAnbW9iaWxlUXVlcnlBcHBTdGF0ZScsXG4gICAgYWN0aXZhdGVBcHA6ICdtb2JpbGVBY3RpdmF0ZUFwcCcsXG4gICAgLy9lbmRyZWdpb24gbXVsdGlwbGUgYXBwcyBtYW5hZ2VtZW50XG5cbiAgICB2aWV3cG9ydFNjcmVlbnNob3Q6ICdnZXRWaWV3cG9ydFNjcmVlbnNob3QnLFxuXG4gICAgc3RhcnRQZXJmUmVjb3JkOiAnbW9iaWxlU3RhcnRQZXJmUmVjb3JkJyxcbiAgICBzdG9wUGVyZlJlY29yZDogJ21vYmlsZVN0b3BQZXJmUmVjb3JkJyxcblxuICAgIGluc3RhbGxDZXJ0aWZpY2F0ZTogJ21vYmlsZUluc3RhbGxDZXJ0aWZpY2F0ZScsXG5cbiAgICBzdGFydExvZ3NCcm9hZGNhc3Q6ICdtb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QnLFxuICAgIHN0b3BMb2dzQnJvYWRjYXN0OiAnbW9iaWxlU3RvcExvZ3NCcm9hZGNhc3QnLFxuXG4gICAgYmF0dGVyeUluZm86ICdtb2JpbGVHZXRCYXR0ZXJ5SW5mbycsXG5cbiAgICBwcmVzc0J1dHRvbjogJ21vYmlsZVByZXNzQnV0dG9uJyxcblxuICAgIGVucm9sbEJpb21ldHJpYzogJ21vYmlsZUVucm9sbEJpb21ldHJpYycsXG4gICAgc2VuZEJpb21ldHJpY01hdGNoOiAnbW9iaWxlU2VuZEJpb21ldHJpY01hdGNoJyxcbiAgICBpc0Jpb21ldHJpY0Vucm9sbGVkOiAnbW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCcsXG5cbiAgICBjbGVhcktleWNoYWluczogJ21vYmlsZUNsZWFyS2V5Y2hhaW5zJyxcblxuICAgIGdldFBlcm1pc3Npb246ICdtb2JpbGVHZXRQZXJtaXNzaW9uJyxcbiAgfTtcblxuICBpZiAoIV8uaGFzKGNvbW1hbmRNYXAsIG1vYmlsZUNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKGBVbmtub3duIG1vYmlsZSBjb21tYW5kIFwiJHttb2JpbGVDb21tYW5kfVwiLiBPbmx5ICR7Xy5rZXlzKGNvbW1hbmRNYXApfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW2NvbW1hbmRNYXBbbW9iaWxlQ29tbWFuZF1dKG9wdHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2V4ZWN1dGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
