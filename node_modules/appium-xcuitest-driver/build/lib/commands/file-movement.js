"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _nodeSimctl = require("node-simctl");

const CONTAINER_PATH_MARKER = '@';
const CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.+)`);
const CONTAINER_TYPE_SEPARATOR = ':';
let commands = _appiumIosDriver.iosCommands.file;
exports.commands = commands;

function verifyIFusePresence() {
  return _verifyIFusePresence.apply(this, arguments);
}

function _verifyIFusePresence() {
  _verifyIFusePresence = (0, _asyncToGenerator2.default)(function* () {
    if (!(yield _appiumSupport.fs.which('ifuse'))) {
      _logger.default.errorAndThrow(`'ifuse' tool is required to be installed on the machine. ` + `Install it using 'brew cask install osxfuse && brew install ifuse' or check ` + `if it is available in PATH environment variable if the tool is already installed. ` + `Current PATH value: ${process.env.PATH}`);
    }
  });
  return _verifyIFusePresence.apply(this, arguments);
}

function mountDevice(_x, _x2) {
  return _mountDevice.apply(this, arguments);
}

function _mountDevice() {
  _mountDevice = (0, _asyncToGenerator2.default)(function* (device, iFuseArgs) {
    _logger.default.debug(`Starting ifuse with args '${iFuseArgs}'...`);

    try {
      yield (0, _teen_process.exec)('ifuse', iFuseArgs);
    } catch (e) {
      _logger.default.errorAndThrow(`Cannot mount the media folder of the device with UDID ${device.udid}. ` + `Make sure osxfuse plugin has necessary permissions in System Preferences->Security & Privacy. ` + `Error code: ${e.code}; stderr output: ${e.stderr}`);
    }
  });
  return _mountDevice.apply(this, arguments);
}

function verifyIsSubPath(originalPath, root) {
  const normalizedRoot = _path.default.normalize(root);

  const normalizedPath = _path.default.normalize(_path.default.dirname(originalPath));

  if (!normalizedPath.startsWith(normalizedRoot)) {
    _logger.default.errorAndThrow(`'${normalizedPath}' is expected to be a subpath of '${normalizedRoot}'`);
  }
}

function parseContainerPath(_x3, _x4) {
  return _parseContainerPath.apply(this, arguments);
}

function _parseContainerPath() {
  _parseContainerPath = (0, _asyncToGenerator2.default)(function* (remotePath, containerRootSupplier) {
    const match = CONTAINER_PATH_PATTERN.exec(remotePath);

    if (!match) {
      _logger.default.errorAndThrow(`It is expected that package identifier ` + `starts with '${CONTAINER_PATH_MARKER}' and is separated from the ` + `relative path with a single slash. '${remotePath}' is given instead`);
    }

    let _match = (0, _slicedToArray2.default)(match, 3),
        bundleId = _match[1],
        relativePath = _match[2];

    let containerType = null;
    const typeSeparatorPos = bundleId.indexOf(CONTAINER_TYPE_SEPARATOR);

    if (typeSeparatorPos > 0 && typeSeparatorPos < bundleId.length - 1) {
      containerType = bundleId.substring(typeSeparatorPos + 1);

      _logger.default.debug(`Parsed container type: ${containerType}`);

      bundleId = bundleId.substring(0, typeSeparatorPos);
    }

    const containerRoot = _lodash.default.isFunction(containerRootSupplier) ? yield containerRootSupplier(bundleId, containerType) : containerRootSupplier;

    const resultPath = _path.default.posix.resolve(containerRoot, relativePath);

    verifyIsSubPath(resultPath, containerRoot);
    return [bundleId, resultPath];
  });
  return _parseContainerPath.apply(this, arguments);
}

function pushFileToSimulator(_x5, _x6, _x7) {
  return _pushFileToSimulator.apply(this, arguments);
}

function _pushFileToSimulator() {
  _pushFileToSimulator = (0, _asyncToGenerator2.default)(function* (device, remotePath, base64Data) {
    const buffer = Buffer.from(base64Data, 'base64');

    if (CONTAINER_PATH_PATTERN.test(remotePath)) {
      const _ref6 = yield parseContainerPath(remotePath, function () {
        var _ref8 = (0, _asyncToGenerator2.default)(function* (appBundle, containerType) {
          return yield (0, _nodeSimctl.getAppContainer)(device.udid, appBundle, null, containerType);
        });

        return function (_x22, _x23) {
          return _ref8.apply(this, arguments);
        };
      }()),
            _ref7 = (0, _slicedToArray2.default)(_ref6, 2),
            bundleId = _ref7[0],
            dstPath = _ref7[1];

      _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will put the data into '${dstPath}'`);

      if (!(yield _appiumSupport.fs.exists(_path.default.dirname(dstPath)))) {
        _logger.default.debug(`The destination folder '${_path.default.dirname(dstPath)}' does not exist. Creating...`);

        yield (0, _appiumSupport.mkdirp)(_path.default.dirname(dstPath));
      }

      yield _appiumSupport.fs.writeFile(dstPath, buffer);
      return;
    }

    const dstFolder = yield _appiumSupport.tempDir.openDir();

    const dstPath = _path.default.resolve(dstFolder, _path.default.basename(remotePath));

    try {
      yield _appiumSupport.fs.writeFile(dstPath, buffer);
      yield (0, _nodeSimctl.addMedia)(device.udid, dstPath);
    } finally {
      yield _appiumSupport.fs.rimraf(dstFolder);
    }
  });
  return _pushFileToSimulator.apply(this, arguments);
}

function pushFileToRealDevice(_x8, _x9, _x10) {
  return _pushFileToRealDevice.apply(this, arguments);
}

function _pushFileToRealDevice() {
  _pushFileToRealDevice = (0, _asyncToGenerator2.default)(function* (device, remotePath, base64Data) {
    yield verifyIFusePresence();
    const mntRoot = yield _appiumSupport.tempDir.openDir();
    let isUnmountSuccessful = true;

    try {
      let dstPath = _path.default.resolve(mntRoot, remotePath);

      let ifuseArgs = ['-u', device.udid, mntRoot];

      if (CONTAINER_PATH_PATTERN.test(remotePath)) {
        const _ref9 = yield parseContainerPath(remotePath, mntRoot),
              _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
              bundleId = _ref10[0],
              pathInContainer = _ref10[1];

        dstPath = pathInContainer;

        _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will put the data into '${dstPath}'`);

        ifuseArgs = ['-u', device.udid, '--container', bundleId, mntRoot];
      } else {
        verifyIsSubPath(dstPath, mntRoot);
      }

      yield mountDevice(device, ifuseArgs);
      isUnmountSuccessful = false;

      try {
        if (!(yield _appiumSupport.fs.exists(_path.default.dirname(dstPath)))) {
          _logger.default.debug(`The destination folder '${_path.default.dirname(dstPath)}' does not exist. Creating...`);

          yield (0, _appiumSupport.mkdirp)(_path.default.dirname(dstPath));
        }

        yield _appiumSupport.fs.writeFile(dstPath, Buffer.from(base64Data, 'base64'));
      } finally {
        yield (0, _teen_process.exec)('umount', [mntRoot]);
        isUnmountSuccessful = true;
      }
    } finally {
      if (isUnmountSuccessful) {
        yield _appiumSupport.fs.rimraf(mntRoot);
      } else {
        _logger.default.warn(`Umount has failed, so not removing '${mntRoot}'`);
      }
    }
  });
  return _pushFileToRealDevice.apply(this, arguments);
}

function pullFromSimulator(_x11, _x12, _x13) {
  return _pullFromSimulator.apply(this, arguments);
}

function _pullFromSimulator() {
  _pullFromSimulator = (0, _asyncToGenerator2.default)(function* (device, remotePath, isFile) {
    let pathOnServer;

    if (CONTAINER_PATH_PATTERN.test(remotePath)) {
      const _ref11 = yield parseContainerPath(remotePath, function () {
        var _ref13 = (0, _asyncToGenerator2.default)(function* (appBundle, containerType) {
          return yield (0, _nodeSimctl.getAppContainer)(device.udid, appBundle, null, containerType);
        });

        return function (_x24, _x25) {
          return _ref13.apply(this, arguments);
        };
      }()),
            _ref12 = (0, _slicedToArray2.default)(_ref11, 2),
            bundleId = _ref12[0],
            dstPath = _ref12[1];

      _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will get the data from '${dstPath}'`);

      pathOnServer = dstPath;
    } else {
      const simRoot = device.getDir();
      pathOnServer = _path.default.posix.join(simRoot, remotePath);
      verifyIsSubPath(pathOnServer, simRoot);

      _logger.default.info(`Got the full item path: ${pathOnServer}`);
    }

    if (!(yield _appiumSupport.fs.exists(pathOnServer))) {
      _logger.default.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${pathOnServer}' does not exist`);
    }

    const buffer = isFile ? yield _appiumSupport.fs.readFile(pathOnServer) : yield _appiumSupport.zip.toInMemoryZip(pathOnServer);
    return Buffer.from(buffer).toString('base64');
  });
  return _pullFromSimulator.apply(this, arguments);
}

function pullFromRealDevice(_x14, _x15, _x16) {
  return _pullFromRealDevice.apply(this, arguments);
}

function _pullFromRealDevice() {
  _pullFromRealDevice = (0, _asyncToGenerator2.default)(function* (device, remotePath, isFile) {
    yield verifyIFusePresence();
    const mntRoot = yield _appiumSupport.tempDir.openDir();
    let isUnmountSuccessful = true;

    try {
      let dstPath = _path.default.resolve(mntRoot, remotePath);

      let ifuseArgs = ['-u', device.udid, mntRoot];

      if (CONTAINER_PATH_PATTERN.test(remotePath)) {
        const _ref14 = yield parseContainerPath(remotePath, mntRoot),
              _ref15 = (0, _slicedToArray2.default)(_ref14, 2),
              bundleId = _ref15[0],
              pathInContainer = _ref15[1];

        dstPath = pathInContainer;

        _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will get the data from '${dstPath}'`);

        ifuseArgs = ['-u', device.udid, '--container', bundleId, mntRoot];
      } else {
        verifyIsSubPath(dstPath, mntRoot);
      }

      yield mountDevice(device, ifuseArgs);
      isUnmountSuccessful = false;

      try {
        if (!(yield _appiumSupport.fs.exists(dstPath))) {
          _logger.default.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${dstPath}' does not exist`);
        }

        const buffer = isFile ? yield _appiumSupport.fs.readFile(dstPath) : yield _appiumSupport.zip.toInMemoryZip(dstPath);
        return Buffer.from(buffer).toString('base64');
      } finally {
        yield (0, _teen_process.exec)('umount', [mntRoot]);
        isUnmountSuccessful = true;
      }
    } finally {
      if (isUnmountSuccessful) {
        yield _appiumSupport.fs.rimraf(mntRoot);
      } else {
        _logger.default.warn(`Umount has failed, so not removing '${mntRoot}'`);
      }
    }
  });
  return _pullFromRealDevice.apply(this, arguments);
}

commands.pushFile = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (remotePath, base64Data) {
    if (remotePath.endsWith('/')) {
      _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
    }

    if (_lodash.default.isArray(base64Data)) {
      base64Data = Buffer.from(base64Data).toString('utf8');
    }

    return this.isSimulator() ? yield pushFileToSimulator(this.opts.device, remotePath, base64Data) : yield pushFileToRealDevice(this.opts.device, remotePath, base64Data);
  });

  return function (_x17, _x18) {
    return _ref.apply(this, arguments);
  };
}();

commands.pullFile = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    if (remotePath.endsWith('/')) {
      _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
    }

    return this.isSimulator() ? yield pullFromSimulator(this.opts.device, remotePath, true) : yield pullFromRealDevice(this.opts.device, remotePath, true);
  });

  return function (_x19) {
    return _ref2.apply(this, arguments);
  };
}();

commands.getSimFileFullPath = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    let basePath = this.opts.device.getDir();
    let appName = null;

    if (this.opts.app) {
      let appNameRegex = new RegExp(`\\${_path.default.sep}([\\w-]+\\.app)`);
      let appNameMatches = appNameRegex.exec(this.opts.app);

      if (appNameMatches) {
        appName = appNameMatches[1];
      }
    }

    if (_appiumSupport.system.isWindows()) {
      if (remotePath.indexof('://') === 1) {
        remotePath = remotePath.slice(4);
      }
    } else {
      if (remotePath.indexOf('/') === 0) {
        remotePath = remotePath.slice(1);
      }
    }

    if (remotePath.indexOf(appName) === 0) {
      let findPath = basePath;

      if (this.opts.platformVersion >= 8) {
        findPath = _path.default.resolve(basePath, 'Containers', 'Bundle');
      }

      findPath = findPath.replace(/\s/g, '\\ ');

      let _ref4 = yield (0, _teen_process.exec)('find', [findPath, '-name', appName]),
          stdout = _ref4.stdout;

      let appRoot = stdout.replace(/\n$/, '');
      let subPath = remotePath.substring(appName.length + 1);

      let fullPath = _path.default.resolve(appRoot, subPath);

      _logger.default.debug(`Finding app-relative file: '${fullPath}'`);

      return fullPath;
    } else {
      let fullPath = _path.default.resolve(basePath, remotePath);

      _logger.default.debug(`Finding sim-relative file: ${fullPath}`);

      return fullPath;
    }
  });

  return function (_x20) {
    return _ref3.apply(this, arguments);
  };
}();

commands.pullFolder = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    if (!remotePath.endsWith('/')) {
      remotePath = `${remotePath}/`;
    }

    return this.isSimulator() ? yield pullFromSimulator(this.opts.device, remotePath, false) : yield pullFromRealDevice(this.opts.device, remotePath, false);
  });

  return function (_x21) {
    return _ref5.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
