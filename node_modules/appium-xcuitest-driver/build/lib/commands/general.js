"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.extensions = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
commands.active = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    return yield this.executeAtom('active_element', []);
  }

  return yield this.proxyCommand(`/element/active`, 'GET');
});

commands.background = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (duration) {
    const homescreenEndpoint = '/wda/homescreen';
    const deactivateAppEndpoint = '/wda/deactivateApp';
    let endpoint;
    let params;

    if (_lodash.default.isUndefined(duration)) {
      _logger.default.warn('commands.background: Application under test will never be restored in the future if no duration is provided. ' + 'See https://github.com/appium/appium/issues/7741');

      endpoint = deactivateAppEndpoint;
      params = {};
    } else if (_lodash.default.isNumber(duration)) {
      _logger.default.warn('commands.background: Passing numbers to \'duration\' argument is deprecated. ' + 'See https://github.com/appium/appium/issues/7741');

      if (duration >= 0) {
        params = {
          duration
        };
        endpoint = deactivateAppEndpoint;
      } else {
        endpoint = homescreenEndpoint;
      }
    } else if (_lodash.default.isPlainObject(duration)) {
      if (_lodash.default.has(duration, 'timeout')) {
        if (duration.timeout === null) {
          endpoint = homescreenEndpoint;
        } else if (_lodash.default.isNumber(duration.timeout)) {
          if (duration.timeout >= 0) {
            params = {
              duration: duration.timeout / 1000.0
            };
            endpoint = deactivateAppEndpoint;
          } else {
            endpoint = homescreenEndpoint;
          }
        }
      }
    }

    if (_lodash.default.isUndefined(endpoint)) {
      _logger.default.errorAndThrow('commands.background: Argument value is expected to be an object or \'undefined\'. ' + `'${duration}' value has been provided instead. ` + 'The \'timeout\' attribute can be \'null\' or any negative number to put the app under test ' + 'into background and never come back or a positive number of milliseconds to wait until the app is restored.');
    }

    return yield this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreenEndpoint);
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

commands.touchId = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (match = true) {
    yield this.mobileSendBiometricMatch({
      match
    });
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

commands.toggleEnrollTouchId = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (isEnabled = true) {
    yield this.mobileEnrollBiometric({
      isEnabled
    });
  });

  return function () {
    return _ref4.apply(this, arguments);
  };
}();

helpers.getWindowSizeWeb = function () {
  var _getWindowSizeWeb = (0, _asyncToGenerator2.default)(function* () {
    return yield this.executeAtom('get_window_size', []);
  });

  return function getWindowSizeWeb() {
    return _getWindowSizeWeb.apply(this, arguments);
  };
}();

helpers.getWindowSizeNative = function () {
  var _getWindowSizeNative = (0, _asyncToGenerator2.default)(function* () {
    return yield this.proxyCommand(`/window/size`, 'GET');
  });

  return function getWindowSizeNative() {
    return _getWindowSizeNative.apply(this, arguments);
  };
}();

commands.getWindowSize = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (windowHandle = 'current') {
    if (windowHandle !== "current") {
      throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
    }

    if (!this.isWebContext()) {
      return yield this.getWindowSizeNative();
    } else {
      return yield this.getWindowSizeWeb();
    }
  });

  return function () {
    return _ref5.apply(this, arguments);
  };
}();

commands.getWindowRect = (0, _asyncToGenerator2.default)(function* () {
  const _ref7 = yield this.getWindowSize(),
        width = _ref7.width,
        height = _ref7.height;

  return {
    width,
    height,
    x: 0,
    y: 0
  };
});

commands.hideKeyboard = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (strategy, ...possibleKeys) {
    if ((this.opts.deviceName || '').indexOf('iPhone') === -1) {
      try {
        yield this.proxyCommand('/wda/keyboard/dismiss', 'POST');
        return;
      } catch (err) {
        _logger.default.debug('Cannot dismiss the keyboard using the native call. Trying to apply a workaround...');
      }
    }

    let keyboard;

    try {
      keyboard = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
    } catch (err) {
      _logger.default.debug('No keyboard found. Unable to hide.');

      return;
    }

    possibleKeys.pop();
    possibleKeys = possibleKeys.filter(element => !!element);

    if (possibleKeys.length) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = possibleKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let key = _step.value;

          let el = _lodash.default.last((yield this.findNativeElementOrElements('accessibility id', key, true, keyboard)));

          if (el) {
            _logger.default.debug(`Attempting to hide keyboard by pressing '${key}' key.`);

            yield this.nativeClick(el);
            return;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      _logger.default.debug('Finding keyboard and clicking final button to close');

      if ((yield this.getAttribute('visible', keyboard)) === 'false') {
        _logger.default.debug('No visible keyboard found. Returning');

        return;
      }

      let buttons = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard);
      yield this.nativeClick(_lodash.default.last(buttons));
    }
  });

  return function (_x2) {
    return _ref8.apply(this, arguments);
  };
}();

commands.getDeviceTime = _appiumIosDriver.iosCommands.general.getDeviceTime;
commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (bundleId) {
    return yield this.mobileRemoveApp({
      bundleId
    });
  });

  return function (_x3) {
    return _ref9.apply(this, arguments);
  };
}();

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;
commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (keys) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');
    }

    let el = yield this.active();

    if (_lodash.default.isUndefined(el.ELEMENT)) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    yield this.setValue(keys, el.ELEMENT);
  });

  return function (_x4) {
    return _ref10.apply(this, arguments);
  };
}();

commands.setUrl = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (url) {
    if (!this.isWebContext() && this.isRealDevice()) {
      return yield this.proxyCommand('/url', 'POST', {
        url
      });
    }

    return yield _appiumIosDriver.iosCommands.general.setUrl.call(this, url);
  });

  return function (_x5) {
    return _ref11.apply(this, arguments);
  };
}();

commands.getViewportRect = _appiumIosDriver.iosCommands.device.getViewportRect;
commands.getScreenInfo = (0, _asyncToGenerator2.default)(function* () {
  return yield this.proxyCommand('/wda/screen', 'GET');
});
commands.getStatusBarHeight = (0, _asyncToGenerator2.default)(function* () {
  const _ref14 = yield this.getScreenInfo(),
        statusBarSize = _ref14.statusBarSize;

  return statusBarSize.height;
});
commands.getDevicePixelRatio = (0, _asyncToGenerator2.default)(function* () {
  const _ref16 = yield this.getScreenInfo(),
        scale = _ref16.scale;

  return scale;
});

commands.mobilePressButton = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const name = opts.name;

    if (!name) {
      _logger.default.errorAndThrow('Button name is mandatory');
    }

    return yield this.proxyCommand('/wda/pressButton', 'POST', {
      name
    });
  });

  return function () {
    return _ref17.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
