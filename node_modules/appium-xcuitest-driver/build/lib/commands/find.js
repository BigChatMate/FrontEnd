"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible\s*=\s*('|")true\1\]/;
const MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable\s*=\s*('|")true\1\]/;
const WDA_CLASS_CHAIN_STRATEGY = 'class chain';
let helpers = {},
    commands = {},
    extensions = {};
exports.commands = commands;
exports.helpers = helpers;

helpers.findElOrEls = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    if (this.isWebview()) {
      return yield this.findWebElementOrElements(strategy, selector, mult, context);
    } else {
      return yield this.findNativeElementOrElements(strategy, selector, mult, context);
    }
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

helpers.findNativeElementOrElements = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    const initSelector = selector;
    let rewroteSelector = false;

    if (strategy === '-ios predicate string') {
      strategy = 'predicate string';
    } else if (strategy === '-ios class chain') {
      strategy = WDA_CLASS_CHAIN_STRATEGY;
    }

    function stripViewFromSelector(selector) {
      let keepView = ['XCUIElementTypeScrollView', 'XCUIElementTypeCollectionView', 'XCUIElementTypeTextView', 'XCUIElementTypeWebView'].indexOf(selector) >= 0;

      if (!keepView && selector.indexOf('View') === selector.length - 4) {
        return selector.substr(0, selector.length - 4);
      } else {
        return selector;
      }
    }

    if (strategy === 'class name') {
      if (selector.indexOf('UIA') === 0) {
        selector = selector.substring(3);
      }

      if (selector.indexOf('XCUIElementType') !== 0) {
        selector = stripViewFromSelector(`XCUIElementType${selector}`);
        rewroteSelector = true;
      }
    }

    if (strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector)) {
      return yield this.getFirstVisibleChild(mult, context);
    } else if (strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector)) {
      var _rewriteMagicScrollab = rewriteMagicScrollable(mult);

      var _rewriteMagicScrollab2 = (0, _slicedToArray2.default)(_rewriteMagicScrollab, 2);

      strategy = _rewriteMagicScrollab2[0];
      selector = _rewriteMagicScrollab2[1];
    } else if (strategy === 'xpath') {
      selector = selector.replace(/(^|\/)(UIA)([^[/]+)/g, (str, g1, g2, g3) => {
        rewroteSelector = true;
        return g1 + stripViewFromSelector(`XCUIElementType${g3}`);
      });
    }

    if (rewroteSelector) {
      _logger.default.info(`Rewrote incoming selector from '${initSelector}' to ` + `'${selector}' to match XCUI type. You should consider ` + `updating your tests to use the new selectors directly`);
    }

    return yield this.doNativeFind(strategy, selector, mult, context);
  });

  return function (_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

helpers.doNativeFind = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    var _this = this;

    context = _appiumSupport.util.unwrapElement(context);
    let endpoint = `/element${context ? `/${context}/element` : ''}${mult ? 's' : ''}`;
    let body = {
      using: strategy,
      value: selector
    };
    let method = 'POST';
    let els;

    try {
      yield this.implicitWaitForCondition((0, _asyncToGenerator2.default)(function* () {
        try {
          els = yield _this.proxyCommand(endpoint, method, body);

          if (mult) {
            return els && els.length;
          } else {
            return !els.status || els.status === 0;
          }
        } catch (err) {
          els = undefined;
          return false;
        }
      }));
    } catch (err) {
      if (err.message && err.message.match(/Condition unmet/)) {
        els = [];
      } else {
        throw err;
      }
    }

    if (mult) {
      return els;
    } else {
      if (!els || _lodash.default.size(els) === 0) {
        throw new _appiumBaseDriver.errors.NoSuchElementError();
      }

      return els;
    }
  });

  return function (_x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
}();

helpers.getFirstVisibleChild = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (mult, context) {
    _logger.default.info(`Getting first visible child`);

    if (mult) {
      throw new Error("Cannot get multiple first visible children!");
    }

    if (!context) {
      throw new Error("Cannot get first visible child without a context element");
    }

    let index = 1;

    while (true) {
      const strategy = WDA_CLASS_CHAIN_STRATEGY;
      const selector = `*[${index}]`;
      const nthChild = yield this.doNativeFind(strategy, selector, false, context);
      const visible = yield this.getAttribute('visible', nthChild);

      if (visible === "true") {
        _logger.default.info(`Found first visible child at position ${index}`);

        return nthChild;
      }

      index++;
    }
  });

  return function (_x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();

function rewriteMagicScrollable(mult) {
  const types = ['ScrollView', 'Table', 'CollectionView', 'WebView'].map(t => `XCUIElementType${t}`);
  const pred = types.map(t => `type == "${t}"`).join(" OR ");
  const strategy = WDA_CLASS_CHAIN_STRATEGY;
  let selector = '**/*[`' + pred + '`]';

  if (!mult) {
    selector += '[1]';
  }

  _logger.default.info("Rewrote request for scrollable descendants to class chain " + `format with selector '${selector}'`);

  return [strategy, selector];
}

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbIk1BR0lDX0ZJUlNUX1ZJU19DSElMRF9TRUwiLCJNQUdJQ19TQ1JPTExBQkxFX1NFTCIsIldEQV9DTEFTU19DSEFJTl9TVFJBVEVHWSIsImhlbHBlcnMiLCJjb21tYW5kcyIsImV4dGVuc2lvbnMiLCJmaW5kRWxPckVscyIsInN0cmF0ZWd5Iiwic2VsZWN0b3IiLCJtdWx0IiwiY29udGV4dCIsImlzV2VidmlldyIsImZpbmRXZWJFbGVtZW50T3JFbGVtZW50cyIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsImluaXRTZWxlY3RvciIsInJld3JvdGVTZWxlY3RvciIsInN0cmlwVmlld0Zyb21TZWxlY3RvciIsImtlZXBWaWV3IiwiaW5kZXhPZiIsImxlbmd0aCIsInN1YnN0ciIsInN1YnN0cmluZyIsInRlc3QiLCJnZXRGaXJzdFZpc2libGVDaGlsZCIsInJld3JpdGVNYWdpY1Njcm9sbGFibGUiLCJyZXBsYWNlIiwic3RyIiwiZzEiLCJnMiIsImczIiwibG9nIiwiaW5mbyIsImRvTmF0aXZlRmluZCIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiZW5kcG9pbnQiLCJib2R5IiwidXNpbmciLCJ2YWx1ZSIsIm1ldGhvZCIsImVscyIsImltcGxpY2l0V2FpdEZvckNvbmRpdGlvbiIsInByb3h5Q29tbWFuZCIsInN0YXR1cyIsImVyciIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJtYXRjaCIsIl8iLCJzaXplIiwiZXJyb3JzIiwiTm9TdWNoRWxlbWVudEVycm9yIiwiRXJyb3IiLCJpbmRleCIsIm50aENoaWxkIiwidmlzaWJsZSIsImdldEF0dHJpYnV0ZSIsInR5cGVzIiwibWFwIiwidCIsInByZWQiLCJqb2luIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUEsTUFBTUEseUJBQXlCLEdBQUcseUNBQWxDO0FBSUEs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UyxHQUQzQzs7QUFFQSxTQUFPLENBQUNELFFBQUQsRUFBV0MsUUFBWCxDQUFQO0FBQ0Q7O0FBR0RzRCxNQUFNLENBQUNDLE1BQVAsQ0FBYzFELFVBQWQsRUFBMEJELFFBQTFCLEVBQW9DRCxPQUFwQztlQUVlRSxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG4vLyB3ZSBvdmVycmlkZSB0aGUgeHBhdGggc2VhcmNoIGZvciB0aGlzIGZpcnN0LXZpc2libGUtY2hpbGQgc2VsZWN0b3IsIHdoaWNoXG4vLyBsb29rcyBsaWtlIC8qW0BmaXJzdFZpc2libGU9XCJ0cnVlXCJdXG5jb25zdCBNQUdJQ19GSVJTVF9WSVNfQ0hJTERfU0VMID0gL1xcL1xcKlxcW0BmaXJzdFZpc2libGVcXHMqPVxccyooJ3xcIil0cnVlXFwxXFxdLztcblxuLy8gd2UgbGlrZXdpc2Ugb3ZlcnJpZGUgeHBhdGggc2VhcmNoIHRvIHByb3ZpZGUgYSBzaG9ydGN1dCBmb3IgZmluZGluZyBhbGxcbi8vIHNjcm9sbGFibGUgZWxlbWVudHNcbmNvbnN0IE1BR0lDX1NDUk9MTEFCTEVfU0VMID0gL1xcL1xcL1xcKlxcW0BzY3JvbGxhYmxlXFxzKj1cXHMqKCd8XCIpdHJ1ZVxcMVxcXS87XG5cbmNvbnN0IFdEQV9DTEFTU19DSEFJTl9TVFJBVEVHWSA9ICdjbGFzcyBjaGFpbic7XG5cbmxldCBoZWxwZXJzID0ge30sIGNvbW1hbmRzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuaGVscGVycy5maW5kRWxPckVscyA9IGFzeW5jIGZ1bmN0aW9uIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcbiAgaWYgKHRoaXMuaXNXZWJ2aWV3KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5kV2ViRWxlbWVudE9yRWxlbWVudHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KTtcbiAgfVxufTtcblxuaGVscGVycy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KSB7XG4gIGNvbnN0IGluaXRTZWxlY3RvciA9IHNlbGVjdG9yO1xuICBsZXQgcmV3cm90ZVNlbGVjdG9yID0gZmFsc2U7XG4gIGlmIChzdHJhdGVneSA9PT0gJy1pb3MgcHJlZGljYXRlIHN0cmluZycpIHtcbiAgICAvLyBXZWJEcml2ZXJBZ2VudCB1c2VzICdwcmVkaWNhdGUgc3RyaW5nJ1xuICAgIHN0cmF0ZWd5ID0gJ3ByZWRpY2F0ZSBzdHJpbmcnO1xuICB9IGVsc2UgaWYgKHN0cmF0ZWd5ID09PSAnLWlvcyBjbGFzcyBjaGFpbicpIHtcbiAgICAvLyBXZWJEcml2ZXJBZ2VudCB1c2VzICdjbGFzcyBjaGFpbidcbiAgICBzdHJhdGVneSA9IFdEQV9DTEFTU19DSEFJTl9TVFJBVEVHWTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSB3b3JkICdWaWV3JyBpcyBhcHBlbmRlZCB0byBzZWxlY3RvciBhbmQgaWYgaXQgaXMsIHN0cmlwIGl0IG91dFxuICBmdW5jdGlvbiBzdHJpcFZpZXdGcm9tU2VsZWN0b3IgKHNlbGVjdG9yKSB7XG4gICAgLy8gRG9uJ3Qgc3RyaXAgaXQgb3V0IGlmIGl0J3Mgb25lIG9mIHRoZXNlIDQgZWxlbWVudCB0eXBlc1xuICAgIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL1dlYkRyaXZlckFnZW50L2Jsb2IvbWFzdGVyL1dlYkRyaXZlckFnZW50TGliL1V0aWxpdGllcy9GQkVsZW1lbnRUeXBlVHJhbnNmb3JtZXIubSBmb3IgcmVmZXJlbmNlKVxuICAgIGxldCBrZWVwVmlldyA9IFtcbiAgICAgICdYQ1VJRWxlbWVudFR5cGVTY3JvbGxWaWV3JyxcbiAgICAgICdYQ1VJRWxlbWVudFR5cGVDb2xsZWN0aW9uVmlldycsXG4gICAgICAnWENVSUVsZW1lbnRUeXBlVGV4dFZpZXcnLFxuICAgICAgJ1hDVUlFbGVtZW50VHlwZVdlYlZpZXcnLFxuICAgIF0uaW5kZXhPZihzZWxlY3RvcikgPj0gMDtcblxuICAgIGlmICgha2VlcFZpZXcgJiYgc2VsZWN0b3IuaW5kZXhPZignVmlldycpID09PSBzZWxlY3Rvci5sZW5ndGggLSA0KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3Iuc3Vic3RyKDAsIHNlbGVjdG9yLmxlbmd0aCAtIDQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0cmF0ZWd5ID09PSAnY2xhc3MgbmFtZScpIHtcbiAgICAvLyBYQ1VJVGVzdCBjbGFzc2VzIGhhdmUgYFhDVUlFbGVtZW50VHlwZWAgcHJlcGVuZGVkXG4gICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgdGhlIG9sZCBgVUlBYCBwcmVmaXhcbiAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZignVUlBJykgPT09IDApIHtcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc3Vic3RyaW5nKDMpO1xuICAgIH1cbiAgICAvLyBub3cgY2hlY2sgaWYgd2UgbmVlZCB0byBhZGQgYFhDVUlFbGVtZW50VHlwZWBcbiAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZignWENVSUVsZW1lbnRUeXBlJykgIT09IDApIHtcbiAgICAgIHNlbGVjdG9yID0gc3RyaXBWaWV3RnJvbVNlbGVjdG9yKGBYQ1VJRWxlbWVudFR5cGUke3NlbGVjdG9yfWApO1xuICAgICAgcmV3cm90ZVNlbGVjdG9yID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RyYXRlZ3kgPT09ICd4cGF0aCcgJiYgTUFHSUNfRklSU1RfVklTX0NISUxEX1NFTC50ZXN0KHNlbGVjdG9yKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEZpcnN0VmlzaWJsZUNoaWxkKG11bHQsIGNvbnRleHQpO1xuICB9IGVsc2UgaWYgKHN0cmF0ZWd5ID09PSAneHBhdGgnICYmIE1BR0lDX1NDUk9MTEFCTEVfU0VMLnRlc3Qoc2VsZWN0b3IpKSB7XG4gICAgW3N0cmF0ZWd5LCBzZWxlY3Rvcl0gPSByZXdyaXRlTWFnaWNTY3JvbGxhYmxlKG11bHQpO1xuICB9IGVsc2UgaWYgKHN0cmF0ZWd5ID09PSAneHBhdGgnKSB7XG4gICAgLy8gUmVwbGFjZSBVSUEgaWYgaXQgY29tZXMgYWZ0ZXIgYSBmb3J3YXJkIHNsYXNoIG9yIGlzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZ1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvKF58XFwvKShVSUEpKFteWy9dKykvZywgKHN0ciwgZzEsIGcyLCBnMykgPT4ge1xuICAgICAgcmV3cm90ZVNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgIHJldHVybiBnMSArIHN0cmlwVmlld0Zyb21TZWxlY3RvcihgWENVSUVsZW1lbnRUeXBlJHtnM31gKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXdyb3RlU2VsZWN0b3IpIHtcbiAgICBsb2cuaW5mbyhgUmV3cm90ZSBpbmNvbWluZyBzZWxlY3RvciBmcm9tICcke2luaXRTZWxlY3Rvcn0nIHRvIGAgK1xuICAgICAgICAgICAgIGAnJHtzZWxlY3Rvcn0nIHRvIG1hdGNoIFhDVUkgdHlwZS4gWW91IHNob3VsZCBjb25zaWRlciBgICtcbiAgICAgICAgICAgICBgdXBkYXRpbmcgeW91ciB0ZXN0cyB0byB1c2UgdGhlIG5ldyBzZWxlY3RvcnMgZGlyZWN0bHlgKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB0aGlzLmRvTmF0aXZlRmluZChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpO1xufTtcblxuaGVscGVycy5kb05hdGl2ZUZpbmQgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSB1dGlsLnVud3JhcEVsZW1lbnQoY29udGV4dCk7XG5cbiAgbGV0IGVuZHBvaW50ID0gYC9lbGVtZW50JHtjb250ZXh0ID8gYC8ke2NvbnRleHR9L2VsZW1lbnRgIDogJyd9JHttdWx0ID8gJ3MnIDogJyd9YDtcblxuICBsZXQgYm9keSA9IHtcbiAgICB1c2luZzogc3RyYXRlZ3ksXG4gICAgdmFsdWU6IHNlbGVjdG9yXG4gIH07XG5cbiAgbGV0IG1ldGhvZCA9ICdQT1NUJztcblxuICBsZXQgZWxzO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVscyA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGVuZHBvaW50LCBtZXRob2QsIGJvZHkpO1xuICAgICAgICBpZiAobXVsdCkge1xuICAgICAgICAgIC8vIHdlIHN1Y2NlZWQgaWYgd2UgZ2V0IHNvbWUgZWxlbWVudHNcbiAgICAgICAgICByZXR1cm4gZWxzICYmIGVscy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2UgbWF5IG5vdCBnZXQgYW55IHN0YXR1cywgd2hpY2ggbWVhbnMgc3VjY2Vzc1xuICAgICAgICAgIHJldHVybiAhZWxzLnN0YXR1cyB8fCBlbHMuc3RhdHVzID09PSAwO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZWxzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5tYXRjaCgvQ29uZGl0aW9uIHVubWV0LykpIHtcbiAgICAgIC8vIGNvbmRpdGlvbiB3YXMgbm90IG1ldCBzZXR0aW5nIHJlcyB0byBlbXB0eSBhcnJheVxuICAgICAgZWxzID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKG11bHQpIHtcbiAgICByZXR1cm4gZWxzO1xuICB9IGVsc2Uge1xuICAgIGlmICghZWxzIHx8IF8uc2l6ZShlbHMpID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gZWxzO1xuICB9XG59O1xuXG5oZWxwZXJzLmdldEZpcnN0VmlzaWJsZUNoaWxkID0gYXN5bmMgZnVuY3Rpb24gKG11bHQsIGNvbnRleHQpIHtcbiAgbG9nLmluZm8oYEdldHRpbmcgZmlyc3QgdmlzaWJsZSBjaGlsZGApO1xuICBpZiAobXVsdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgbXVsdGlwbGUgZmlyc3QgdmlzaWJsZSBjaGlsZHJlbiFcIik7XG4gIH1cbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBmaXJzdCB2aXNpYmxlIGNoaWxkIHdpdGhvdXQgYSBjb250ZXh0IGVsZW1lbnRcIik7XG4gIH1cbiAgbGV0IGluZGV4ID0gMTtcbiAgLy8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIHZpYSBjbGFzcy1jaGFpbiBmaW5kcywgdW50aWwgd2UgcnVuIG91dCBvZiBjaGlsZHJlblxuICAvLyBvciB3ZSBmaW5kIGEgdmlzaWJsZSBvbmUuIFRoaXMgbG9vcCBsb29rcyBpbmZpbml0ZSBidXQgaXRzIG5vdCwgYmVjYXVzZSBhdFxuICAvLyBzb21lIHBvaW50IHRoZSBjYWxsIHRvIGRvTmF0aXZlRmluZCB3aWxsIHRocm93IHdpdGggYW4gRWxlbWVudCBOb3QgRm91bmRcbiAgLy8gZXJyb3IsIHdoZW4gdGhlIGluZGV4IGdldHMgaGlnaGVyIHRoYW4gdGhlIG51bWJlciBvZiBjaGlsZCBlbGVtZW50cy4gVGhpc1xuICAvLyBpcyB3aGF0IHdlIHdhbnQgYmVjYXVzZSB0aGF0IGVycm9yIHdpbGwgaGFsdCB0aGUgbG9vcCBhbmQgbWFrZSBpdCBhbGwgdGhlXG4gIC8vIHdheSB0byB0aGUgY2xpZW50LlxuICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgIGNvbnN0IHN0cmF0ZWd5ID0gV0RBX0NMQVNTX0NIQUlOX1NUUkFURUdZO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCpbJHtpbmRleH1dYDtcbiAgICBjb25zdCBudGhDaGlsZCA9IGF3YWl0IHRoaXMuZG9OYXRpdmVGaW5kKHN0cmF0ZWd5LCBzZWxlY3RvciwgZmFsc2UsIGNvbnRleHQpO1xuICAgIGNvbnN0IHZpc2libGUgPSBhd2FpdCB0aGlzLmdldEF0dHJpYnV0ZSgndmlzaWJsZScsIG50aENoaWxkKTtcbiAgICBpZiAodmlzaWJsZSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIGxvZy5pbmZvKGBGb3VuZCBmaXJzdCB2aXNpYmxlIGNoaWxkIGF0IHBvc2l0aW9uICR7aW5kZXh9YCk7XG4gICAgICByZXR1cm4gbnRoQ2hpbGQ7XG4gICAgfVxuICAgIGluZGV4Kys7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJld3JpdGVNYWdpY1Njcm9sbGFibGUgKG11bHQpIHtcbiAgY29uc3QgdHlwZXMgPSBbXG4gICAgJ1Njcm9sbFZpZXcnLFxuICAgICdUYWJsZScsXG4gICAgJ0NvbGxlY3Rpb25WaWV3JyxcbiAgICAnV2ViVmlldydcbiAgXS5tYXAodCA9PiBgWENVSUVsZW1lbnRUeXBlJHt0fWApO1xuICBjb25zdCBwcmVkID0gdHlwZXMubWFwKHQgPT4gYHR5cGUgPT0gXCIke3R9XCJgKS5qb2luKFwiIE9SIFwiKTtcbiAgY29uc3Qgc3RyYXRlZ3kgPSBXREFfQ0xBU1NfQ0hBSU5fU1RSQVRFR1k7XG4gIGxldCBzZWxlY3RvciA9ICcqKi8qW2AnICsgcHJlZCArICdgXSc7XG4gIGlmICghbXVsdCkge1xuICAgIHNlbGVjdG9yICs9ICdbMV0nO1xuICB9XG4gIGxvZy5pbmZvKFwiUmV3cm90ZSByZXF1ZXN0IGZvciBzY3JvbGxhYmxlIGRlc2NlbmRhbnRzIHRvIGNsYXNzIGNoYWluIFwiICtcbiAgICAgICAgICAgYGZvcm1hdCB3aXRoIHNlbGVjdG9yICcke3NlbGVjdG9yfSdgKTtcbiAgcmV0dXJuIFtzdHJhdGVneSwgc2VsZWN0b3JdO1xufVxuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnN9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2ZpbmQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
