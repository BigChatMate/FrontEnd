"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertIsSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Permissions setting can only be performed on Simulator');
  }
}

function assertPermissionOptions(opts = {}) {
  if (!opts.service) {
    throw new Error('Service name is mandatory to set');
  }

  if (!opts.bundleId) {
    throw new Error('Bundle identifier name is mandatory to set');
  }

  return opts;
}

commands.mobileGetPermission = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const _assertPermissionOpti = assertPermissionOptions(opts),
          service = _assertPermissionOpti.service,
          bundleId = _assertPermissionOpti.bundleId;

    assertIsSimulator(this);
    return yield this.opts.device.getPermission(bundleId, service);
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wZXJtaXNzaW9ucy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiYXNzZXJ0SXNTaW11bGF0b3IiLCJkcml2ZXIiLCJpc1NpbXVsYXRvciIsIkVycm9yIiwiYXNzZXJ0UGVybWlzc2lvbk9wdGlvbnMiLCJvcHRzIiwic2VydmljZSIsImJ1bmRsZUlkIiwibW9iaWxlR2V0UGVybWlzc2lvbiIsImRldmljZSIsImdldFBlcm1pc3Npb24iLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBLFNBQVNDLGlCQUFULENBQTRCQyxNQUE1QixFQUFvQztBQUNsQyxNQUFJLENBQUNBLE1BQU0sQ0FBQ0MsV0FBUCxFQUFMLEVBQTJCO0FBQ3pCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDRDtBQUNGOztBQUVELFNBQVNDLHVCQUFULENBQWtDQyxJQUFJLEdBQUcsRUFBekMsRUFBNkM7QUFDM0MsTUFBSSxDQUFDQSxJQUFJLENBQUNDLE9BQVYsRUFBbUI7QUFDakIsVUFBTSxJQUFJSCxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNEOztBQUNELE1BQUksQ0FBQ0UsSUFBSSxDQUFDRSxRQUFWLEVBQW9CO0FBQ2xCLFVBQU0sSUFBSUosS0FBSixDQUFVLDRDQUFWLENBQU47QUFDRDs7QUFDRCxTQUFPRSxJQUFQO0FBQ0Q7O0FBNEJEUixRQUFRLENBQUNXLG1CQUFUO0FBQUEsNkNBQStCLFdBQWdCSCxJQUFJLEdBQUcsRUFBdkIsRUFBMkI7QUFBQSxrQ0FJcERELHVCQUF1QixDQUFDQyxJQUFELENBSjZCO0FBQUEsVUFFdERDLE9BRnNELHlCQUV0REEsT0FGc0Q7QUFBQSxVQUd0REMsUUFIc0QseUJBR3REQSxRQUhzRDs7QUFNeERQLElBQUFBLGlCQUFpQixDQUFDLElBQUQsQ0FBakI7QUFFQSxpQkFBYSxLQUFLSyxJQUFMLENBQVVJLE1BQVYsQ0FBaUJDLGFBQWpCLENBQStCSCxRQUEvQixFQUF5Q0QsT0FBekMsQ0FBYjtBQUNELEdBVEQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBV0FLLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjYixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gYXNzZXJ0SXNTaW11bGF0b3IgKGRyaXZlcikge1xuICBpZiAoIWRyaXZlci5pc1NpbXVsYXRvcigpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQZXJtaXNzaW9ucyBzZXR0aW5nIGNhbiBvbmx5IGJlIHBlcmZvcm1lZCBvbiBTaW11bGF0b3InKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRQZXJtaXNzaW9uT3B0aW9ucyAob3B0cyA9IHt9KSB7XG4gIGlmICghb3B0cy5zZXJ2aWNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2aWNlIG5hbWUgaXMgbWFuZGF0b3J5IHRvIHNldCcpO1xuICB9XG4gIGlmICghb3B0cy5idW5kbGVJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVuZGxlIGlkZW50aWZpZXIgbmFtZSBpcyBtYW5kYXRvcnkgdG8gc2V0Jyk7XG4gIH1cbiAgcmV0dXJuIG9wdHM7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gR2V0UGVybWlzc2lvbk9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2VydmljZSAtIE9uZSBvZiBhdmFpbGFibGUgc2VydmljZSBuYW1lcy4gVGhlIGZvbGxvd2luZyBzZXJ2aWNlcyBhcmUgc3VwcG9ydGVkOlxuICogY2FsZW5kYXIsXG4gKiBjYW1lcmEsXG4gKiBjb250YWN0cyxcbiAqIGhvbWVraXQsXG4gKiBtaWNyb3Bob25lLFxuICogcGhvdG9zLFxuICogcmVtaW5kZXJzLFxuICogbWVkaWFsaWJyYXJ5LFxuICogbW90aW9uLFxuICogaGVhbHRoOixcbiAqIHNpcmksXG4gKiBzcGVlY2guXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYnVuZGxlSWQgLSBUaGUgYnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIGRlc3RpbmF0aW9uIGFwcC5cbiAqL1xuXG4vKipcbiAqIEdldHMgYXBwbGljYXRpb24gcGVybWlzc2lvbiBzdGF0ZSBvbiBTaW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtHZXRQZXJtaXNzaW9uT3B0aW9uc30gb3B0cyAtIFBlcm1pc3Npb24gb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEVpdGhlciAneWVzJywgJ25vJyBvciAndW5zZXQnXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgcGVybWlzc2lvbiBnZXR0aW5nIGZhaWxzIG9yIHRoZSBkZXZpY2UgaXMgbm90IGEgU2ltdWxhdG9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVHZXRQZXJtaXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgc2VydmljZSxcbiAgICBidW5kbGVJZCxcbiAgfSA9IGFzc2VydFBlcm1pc3Npb25PcHRpb25zKG9wdHMpO1xuXG4gIGFzc2VydElzU2ltdWxhdG9yKHRoaXMpO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmdldFBlcm1pc3Npb24oYnVuZGxlSWQsIHNlcnZpY2UpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3Blcm1pc3Npb25zLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
