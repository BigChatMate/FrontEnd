"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getAlertText = (0, _asyncToGenerator2.default)(function* () {
  try {
    return yield this.proxyCommand('/alert/text', 'GET');
  } catch (err) {
    if (this.isWebContext()) {
      const alert = yield this.getAlert();
      return yield alert.getText();
    }

    throw err;
  }
});

commands.setAlertText = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (value) {
    if (_lodash.default.isString(value)) {
      value = value.split('');
    }

    try {
      return yield this.proxyCommand('/alert/text', 'POST', {
        value
      });
    } catch (err) {
      if (this.isWebContext()) {
        const alert = yield this.getAlert();
        return yield alert.setText(value);
      }

      throw err;
    }
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

commands.postAcceptAlert = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    try {
      let params = {};

      if (opts.buttonLabel) {
        params.name = opts.buttonLabel;
      }

      return yield this.proxyCommand('/alert/accept', 'POST', params);
    } catch (err) {
      if (!this.isWebContext()) {
        throw new _appiumBaseDriver.errors.NoAlertOpenError();
      }

      let alert = yield this.getAlert();

      if (alert.close) {
        return yield alert.close();
      }

      yield alert.ok();
    }
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

commands.postDismissAlert = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    try {
      let params = {};

      if (opts.buttonLabel) {
        params.name = opts.buttonLabel;
      }

      return yield this.proxyCommand('/alert/dismiss', 'POST', params);
    } catch (err) {
      if (!this.isWebContext()) {
        throw new _appiumBaseDriver.errors.NoAlertOpenError();
      }

      let alert = yield this.getAlert();

      if (alert.close) {
        return yield alert.close();
      }

      yield alert.cancel();
    }
  });

  return function () {
    return _ref4.apply(this, arguments);
  };
}();

commands.getAlertButtons = (0, _asyncToGenerator2.default)(function* () {
  try {
    return yield this.proxyCommand('/wda/alert/buttons', 'GET');
  } catch (err) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }
});

commands.mobileHandleAlert = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    switch (opts.action) {
      case 'accept':
        return yield this.postAcceptAlert(opts);

      case 'dismiss':
        return yield this.postDismissAlert(opts);

      case 'getButtons':
        return yield this.getAlertButtons();

      default:
        throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
    }
  });

  return function () {
    return _ref6.apply(this, arguments);
  };
}();

helpers.getAlert = (0, _asyncToGenerator2.default)(function* () {
  var _this = this;

  let possibleAlert = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeScrollView', true);

  if (possibleAlert.length !== 1) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  let possibleAlertButtons = yield this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, possibleAlert[0].ELEMENT);

  if (possibleAlertButtons.length < 1 || possibleAlertButtons.length > 2) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  let assertButtonName = function () {
    var _ref8 = (0, _asyncToGenerator2.default)(function* (button, expectedName) {
      button = button.ELEMENT ? button.ELEMENT : button;
      let name = yield _this.proxyCommand(`/element/${button}/attribute/name`, 'GET');

      if (name.toLowerCase() !== expectedName) {
        throw new _appiumBaseDriver.errors.NoAlertOpenError();
      }
    });

    return function assertButtonName(_x2, _x3) {
      return _ref8.apply(this, arguments);
    };
  }();

  let alert = possibleAlert[0];

  if (possibleAlertButtons.length === 1) {
    let closeButton = possibleAlertButtons[0];
    yield assertButtonName(closeButton, 'close');
    alert.close = (0, _asyncToGenerator2.default)(function* () {
      yield _this.proxyCommand(`/element/${closeButton.ELEMENT}/click`, 'POST');
    });
  } else {
    let cancelButton = possibleAlertButtons[0];
    yield assertButtonName(cancelButton, 'cancel');
    let okButton = possibleAlertButtons[1];
    yield assertButtonName(okButton, 'ok');
    alert.cancel = (0, _asyncToGenerator2.default)(function* () {
      yield _this.proxyCommand(`/element/${cancelButton.ELEMENT}/click`, 'POST');
    });
    alert.ok = (0, _asyncToGenerator2.default)(function* () {
      yield _this.proxyCommand(`/element/${okButton.ELEMENT}/click`, 'POST');
    });
  }

  alert.getText = (0, _asyncToGenerator2.default)(function* () {
    let textView = yield _this.findNativeElementOrElements('class name', 'XCUIElementTypeTextView', false, _appiumSupport.util.unwrapElement(alert));
    return yield _this.proxyCommand(`/element/${textView.ELEMENT}/attribute/value`, 'GET');
  });

  alert.setText = function () {
    var _ref13 = (0, _asyncToGenerator2.default)(function* (value) {
      try {
        let textView = yield _this.findNativeElementOrElements('class name', 'XCUIElementTypeTextField', false, _appiumSupport.util.unwrapElement(alert));
        yield _this.proxyCommand(`/element/${textView.ELEMENT}/value `, 'POST', {
          value
        });
      } catch (err) {
        if ((0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.NoSuchElementError)) {
          throw new Error('Tried to set text of an alert that was not a prompt');
        }

        throw err;
      }
    });

    return function (_x4) {
      return _ref13.apply(this, arguments);
    };
  }();

  return alert;
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZ2V0QWxlcnRUZXh0IiwicHJveHlDb21tYW5kIiwiZXJyIiwiaXNXZWJDb250ZXh0IiwiYWxlcnQiLCJnZXRBbGVydCIsImdldFRleHQiLCJzZXRBbGVydFRleHQiLCJ2YWx1ZSIsIl8iLCJpc1N0cmluZyIsInNwbGl0Iiwic2V0VGV4dCIsInBvc3RBY2NlcHRBbGVydCIsIm9wdHMiLCJwYXJhbXMiLCJidXR0b25MYWJlbCIsIm5hbWUiLCJlcnJvcnMiLCJOb0FsZXJ0T3BlbkVycm9yIiwiY2xvc2UiLCJvayIsInBvc3REaXNtaXNzQWxlcnQiLCJjYW5jZWwiLCJnZXRBbGVydEJ1dHRvbnMiLCJtb2JpbGVIYW5kbGVBbGVydCIsImFjdGlvbiIsIkVycm9yIiwicG9zc2libGVBbGVydCIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsImxlbmd0aCIsInBvc3NpYmxlQWxlcnRCdXR0b25zIiwiRUxFTUVOVCIsImFzc2VydEJ1dHRvbk5hbWUiLCJidXR0b24iLCJleHBlY3RlZE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImNsb3NlQnV0dG9uIiwiY2FuY2VsQnV0dG9uIiwib2tCdXR0b24iLCJ0ZXh0VmlldyIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiTm9TdWNoRWxlbWVudEVycm9yIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBRixRQUFRLENBQUNHLFlBQVQsbUNBQXdCLGFBQWtCO0FBQ3hDLE1BQUk7QUFDRixpQkFBYSxLQUFLQyxZQUFMLENBQWtCLGFBQWxCLEVBQWlDLEtBQWpDLENBQWI7QUFDRCxHQUZELENB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RDtBQUMvQyxnQkFBTSxJQUFJaEIsS0FBSixDQUFVLHFEQUFWLENBQU47QUFDRDs7QUFDRCxjQUFNekIsR0FBTjtBQUNEO0FBQ0YsS0FWRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFZQSxTQUFPRSxLQUFQO0FBQ0QsQ0E1REQ7QUErREF3QyxNQUFNLENBQUNDLE1BQVAsQ0FBYzlDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzLCBpc0Vycm9yVHlwZSB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5nZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvdGV4dCcsICdHRVQnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIGNvbnN0IGFsZXJ0ID0gYXdhaXQgdGhpcy5nZXRBbGVydCgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGFsZXJ0LmdldFRleHQoKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xuXG5jb21tYW5kcy5zZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC90ZXh0JywgJ1BPU1QnLCB7dmFsdWV9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIGNvbnN0IGFsZXJ0ID0gYXdhaXQgdGhpcy5nZXRBbGVydCgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGFsZXJ0LnNldFRleHQodmFsdWUpO1xuICAgIH1cbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnBvc3RBY2NlcHRBbGVydCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgdHJ5IHtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgaWYgKG9wdHMuYnV0dG9uTGFiZWwpIHtcbiAgICAgIHBhcmFtcy5uYW1lID0gb3B0cy5idXR0b25MYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvYWNjZXB0JywgJ1BPU1QnLCBwYXJhbXMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9BbGVydE9wZW5FcnJvcigpO1xuICAgIH1cblxuICAgIGxldCBhbGVydCA9IGF3YWl0IHRoaXMuZ2V0QWxlcnQoKTtcbiAgICBpZiAoYWxlcnQuY2xvc2UpIHtcbiAgICAgIHJldHVybiBhd2FpdCBhbGVydC5jbG9zZSgpO1xuICAgIH1cbiAgICBhd2FpdCBhbGVydC5vaygpO1xuICB9XG59O1xuXG5jb21tYW5kcy5wb3N0RGlzbWlzc0FsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICB0cnkge1xuICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICBpZiAob3B0cy5idXR0b25MYWJlbCkge1xuICAgICAgcGFyYW1zLm5hbWUgPSBvcHRzLmJ1dHRvbkxhYmVsO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9hbGVydC9kaXNtaXNzJywgJ1BPU1QnLCBwYXJhbXMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9BbGVydE9wZW5FcnJvcigpO1xuICAgIH1cblxuICAgIGxldCBhbGVydCA9IGF3YWl0IHRoaXMuZ2V0QWxlcnQoKTtcbiAgICBpZiAoYWxlcnQuY2xvc2UpIHtcbiAgICAgIHJldHVybiBhd2FpdCBhbGVydC5jbG9zZSgpO1xuICAgIH1cbiAgICBhd2FpdCBhbGVydC5jYW5jZWwoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0QWxlcnRCdXR0b25zID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9hbGVydC9idXR0b25zJywgJ0dFVCcpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vQWxlcnRPcGVuRXJyb3IoKTtcbiAgfVxufTtcblxuY29tbWFuZHMubW9iaWxlSGFuZGxlQWxlcnQgPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIHN3aXRjaCAob3B0cy5hY3Rpb24pIHtcbiAgICBjYXNlICdhY2NlcHQnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdEFjY2VwdEFsZXJ0KG9wdHMpO1xuICAgIGNhc2UgJ2Rpc21pc3MnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9zdERpc21pc3NBbGVydChvcHRzKTtcbiAgICBjYXNlICdnZXRCdXR0b25zJzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEFsZXJ0QnV0dG9ucygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSAnYWN0aW9uJyB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyICdhY2NlcHQnLCAnZGlzbWlzcycgb3IgJ2dldEJ1dHRvbnMnLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgJyR7b3B0cy5hY3Rpb259JyBpcyBwcm92aWRlZCBpbnN0ZWFkLmApO1xuICB9XG59O1xuXG5oZWxwZXJzLmdldEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgcG9zc2libGVBbGVydCA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVNjcm9sbFZpZXcnLCB0cnVlKTtcbiAgaWYgKHBvc3NpYmxlQWxlcnQubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob0FsZXJ0T3BlbkVycm9yKCk7XG4gIH1cblxuICBsZXQgcG9zc2libGVBbGVydEJ1dHRvbnMgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVCdXR0b24nLCB0cnVlLCBwb3NzaWJsZUFsZXJ0WzBdLkVMRU1FTlQpO1xuICBpZiAocG9zc2libGVBbGVydEJ1dHRvbnMubGVuZ3RoIDwgMSB8fCBwb3NzaWJsZUFsZXJ0QnV0dG9ucy5sZW5ndGggPiAyKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob0FsZXJ0T3BlbkVycm9yKCk7XG4gIH1cblxuICBsZXQgYXNzZXJ0QnV0dG9uTmFtZSA9IGFzeW5jIChidXR0b24sIGV4cGVjdGVkTmFtZSkgPT4ge1xuICAgIGJ1dHRvbiA9IGJ1dHRvbi5FTEVNRU5UID8gYnV0dG9uLkVMRU1FTlQgOiBidXR0b247XG4gICAgbGV0IG5hbWUgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtidXR0b259L2F0dHJpYnV0ZS9uYW1lYCwgJ0dFVCcpO1xuICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgIT09IGV4cGVjdGVkTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob0FsZXJ0T3BlbkVycm9yKCk7XG4gICAgfVxuICB9O1xuXG4gIGxldCBhbGVydCA9IHBvc3NpYmxlQWxlcnRbMF07XG4gIGlmIChwb3NzaWJsZUFsZXJ0QnV0dG9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGJ1dHRvbiBpcyAnQ2xvc2UnXG4gICAgbGV0IGNsb3NlQnV0dG9uID0gcG9zc2libGVBbGVydEJ1dHRvbnNbMF07XG4gICAgYXdhaXQgYXNzZXJ0QnV0dG9uTmFtZShjbG9zZUJ1dHRvbiwgJ2Nsb3NlJyk7XG5cbiAgICBhbGVydC5jbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2Nsb3NlQnV0dG9uLkVMRU1FTlR9L2NsaWNrYCwgJ1BPU1QnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGVuc3VyZSB0aGUgYnV0dG9ucyBhcmUgJ0NhbmNlbCcgYW5kICdPSydcbiAgICBsZXQgY2FuY2VsQnV0dG9uID0gcG9zc2libGVBbGVydEJ1dHRvbnNbMF07XG4gICAgYXdhaXQgYXNzZXJ0QnV0dG9uTmFtZShjYW5jZWxCdXR0b24sICdjYW5jZWwnKTtcbiAgICBsZXQgb2tCdXR0b24gPSBwb3NzaWJsZUFsZXJ0QnV0dG9uc1sxXTtcbiAgICBhd2FpdCBhc3NlcnRCdXR0b25OYW1lKG9rQnV0dG9uLCAnb2snKTtcblxuICAgIGFsZXJ0LmNhbmNlbCA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2NhbmNlbEJ1dHRvbi5FTEVNRU5UfS9jbGlja2AsICdQT1NUJyk7XG4gICAgfTtcbiAgICBhbGVydC5vayA9IGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke29rQnV0dG9uLkVMRU1FTlR9L2NsaWNrYCwgJ1BPU1QnKTtcbiAgICB9O1xuICB9XG5cbiAgYWxlcnQuZ2V0VGV4dCA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgdGV4dFZpZXcgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVUZXh0VmlldycsIGZhbHNlLCB1dGlsLnVud3JhcEVsZW1lbnQoYWxlcnQpKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7dGV4dFZpZXcuRUxFTUVOVH0vYXR0cmlidXRlL3ZhbHVlYCwgJ0dFVCcpO1xuICB9O1xuICBhbGVydC5zZXRUZXh0ID0gYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCB0ZXh0VmlldyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZVRleHRGaWVsZCcsIGZhbHNlLCB1dGlsLnVud3JhcEVsZW1lbnQoYWxlcnQpKTtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke3RleHRWaWV3LkVMRU1FTlR9L3ZhbHVlIGAsICdQT1NUJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyaWVkIHRvIHNldCB0ZXh0IG9mIGFuIGFsZXJ0IHRoYXQgd2FzIG5vdCBhIHByb21wdCcpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gYWxlcnQ7XG59O1xuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9hbGVydC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
