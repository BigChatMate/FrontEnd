"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const APPIUM_SRC_XML = '<?xml version="1.0" encoding="UTF-8"?><AppiumAUT/>';
commands.getPageSource = (0, _asyncToGenerator2.default)(function* () {
  if (this.isWebContext()) {
    const script = 'return document.documentElement.outerHTML';
    return yield this.executeAtom('execute_script', [script, []]);
  }

  if ((yield this.settings.getSettings()).useJSONSource) {
    let srcTree = yield this.mobileGetSource({
      format: 'json'
    });
    return getSourceXml(getTreeForXML(srcTree));
  }

  return yield this.getNativePageSource();
});
helpers.getNativePageSource = (0, _asyncToGenerator2.default)(function* () {
  let srcTree = yield this.proxyCommand('/source', 'GET');
  let parser = new _xmldom.default.DOMParser();
  let tree = parser.parseFromString(srcTree);
  let doc = parser.parseFromString(APPIUM_SRC_XML);
  doc.documentElement.appendChild(tree.documentElement);
  return new _xmldom.default.XMLSerializer().serializeToString(doc);
});

helpers.mobileGetSource = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!_lodash.default.isString(opts.format)) {
      return yield this.getNativePageSource();
    }

    return yield this.proxyCommand(`/source?format=${encodeURIComponent(opts.format)}`, 'GET');
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

function getTreeForXML(srcTree) {
  function getTree(element, elementIndex, parentPath) {
    let curPath = `${parentPath}/${elementIndex}`;
    let rect = element.rect || {};
    let subtree = {
      '@': {
        type: `XCUIElementType${element.type}`,
        enabled: parseInt(element.isEnabled, 10) === 1,
        visible: parseInt(element.isVisible, 10) === 1,
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height
      },
      '>': []
    };

    if (element.name !== null) {
      subtree['@'].name = element.name;
    }

    if (element.label !== null) {
      subtree['@'].label = element.label;
    }

    if (element.value !== null) {
      subtree['@'].value = element.value;
    }

    for (let i = 0; i < (element.children || []).length; i++) {
      subtree['>'].push(getTree(element.children[i], i, curPath));
    }

    return {
      [`XCUIElementType${element.type}`]: subtree
    };
  }

  let tree = getTree(srcTree, 0, '');
  return tree;
}

function getSourceXml(jsonSource) {
  return (0, _js2xmlparser.default)("AppiumAUT", jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: 'element'
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: '  '
    }
  });
}

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
