"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _teen_process = require("teen_process");

let extensions = {},
    commands = {};
exports.commands = commands;
const CONFIG_EXTENSION = 'mobileconfig';

function extractCommonName(_x) {
  return _extractCommonName.apply(this, arguments);
}

function _extractCommonName() {
  _extractCommonName = (0, _asyncToGenerator2.default)(function* (certBuffer) {
    const tempCert = yield _appiumSupport.tempDir.open({
      prefix: 'cert',
      suffix: '.cer'
    });

    try {
      yield _appiumSupport.fs.writeFile(tempCert.path, certBuffer);

      const _ref2 = yield (0, _teen_process.exec)('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]),
            stdout = _ref2.stdout;

      const cnMatch = /\/CN=([^\/]+)/.exec(stdout);

      if (cnMatch) {
        return cnMatch[1].trim();
      }

      throw new Error(`There is no common name value in '${stdout}' output`);
    } catch (err) {
      throw new Error(`Cannot parse common name value from the certificate. Is it valid and base64-encoded? ` + `Original error: ${err.message}`);
    } finally {
      yield _appiumSupport.fs.rimraf(tempCert.path);
    }
  });
  return _extractCommonName.apply(this, arguments);
}

function toMobileConfig(certBuffer, commonName) {
  const getUUID = () => _uuidJs.default.create().hex.toUpperCase();

  const contentUuid = getUUID();
  return {
    PayloadContent: [{
      PayloadCertificateFileName: `${commonName}.cer`,
      PayloadContent: certBuffer,
      PayloadDescription: 'Adds a CA root certificate',
      PayloadDisplayName: commonName,
      PayloadIdentifier: `com.apple.security.root.${contentUuid}`,
      PayloadType: 'com.apple.security.root',
      PayloadUUID: contentUuid,
      PayloadVersion: 1
    }],
    PayloadDisplayName: commonName,
    PayloadIdentifier: `${_os.default.hostname().split('.')[0]}.${getUUID()}`,
    PayloadRemovalDisallowed: false,
    PayloadType: 'Configuration',
    PayloadUUID: getUUID(),
    PayloadVersion: 1
  };
}

function clickElement(_x2, _x3) {
  return _clickElement.apply(this, arguments);
}

function _clickElement() {
  _clickElement = (0, _asyncToGenerator2.default)(function* (driver, locator, options = {}) {
    let element = null;
    const _options$timeout = options.timeout,
          timeout = _options$timeout === void 0 ? 5000 : _options$timeout,
          _options$skipIfInvisi = options.skipIfInvisible,
          skipIfInvisible = _options$skipIfInvisi === void 0 ? false : _options$skipIfInvisi;
    const lookupDelay = 500;

    try {
      element = yield (0, _asyncbox.retryInterval)(timeout < lookupDelay ? 1 : timeout / lookupDelay, lookupDelay, () => driver.findNativeElementOrElements(locator.type, locator.value, false));
    } catch (err) {
      if (skipIfInvisible) {
        return false;
      }

      throw new Error(`Cannot find ${JSON.stringify(locator)} within ${timeout}ms timeout`);
    }

    yield driver.nativeClick(element);
    return true;
  });
  return _clickElement.apply(this, arguments);
}

function installCertificateInPreferences(_x4) {
  return _installCertificateInPreferences.apply(this, arguments);
}

function _installCertificateInPreferences() {
  _installCertificateInPreferences = (0, _asyncToGenerator2.default)(function* (driver) {
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'Allow'
    }, {
      timeout: 15000
    });
    yield _bluebird.default.delay(2000);

    if (!(yield clickElement(driver, {
      type: 'accessibility id',
      value: 'Install'
    }, {
      skipIfInvisible: true
    }))) {
      return false;
    }

    yield _bluebird.default.delay(1500);
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'Install'
    });
    yield clickElement(driver, {
      type: '-ios class chain',
      value: '**/XCUIElementTypeSheet/**/XCUIElementTypeButton[`label == \'Install\'`]'
    });
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'Done'
    });
    return true;
  });
  return _installCertificateInPreferences.apply(this, arguments);
}

function trustCertificateInPreferences(_x5, _x6) {
  return _trustCertificateInPreferences.apply(this, arguments);
}

function _trustCertificateInPreferences() {
  _trustCertificateInPreferences = (0, _asyncToGenerator2.default)(function* (driver, name) {
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'Return to Settings'
    });
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'General'
    });
    yield clickElement(driver, {
      type: 'accessibility id',
      value: 'About'
    });
    const switchLocator = {
      type: '-ios class chain',
      value: `**/XCUIElementTypeCell[\`label == '${name}'\`]/**/XCUIElementTypeSwitch`
    };
    yield (0, _asyncbox.retry)(5, (0, _asyncToGenerator2.default)(function* () {
      yield driver.mobileSwipe({
        element: yield driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),
        direction: 'up'
      });
      yield clickElement(driver, {
        type: 'accessibility id',
        value: 'Certificate Trust Settings'
      }, {
        timeout: 500
      });
      yield driver.findNativeElementOrElements(switchLocator.type, switchLocator.value, false);
    }));

    if (yield clickElement(driver, {
      type: switchLocator.type,
      value: `${switchLocator.value}[\`value == '0'\`]`
    }, {
      timeout: 1000,
      skipIfInvisible: true
    })) {
      yield driver.postAcceptAlert();
    }
  });
  return _trustCertificateInPreferences.apply(this, arguments);
}

commands.mobileInstallCertificate = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const content = opts.content,
          commonName = opts.commonName;

    if (_lodash.default.isEmpty(content)) {
      throw new Error('Certificate content should not be empty');
    }

    if (!(yield _appiumSupport.fs.exists(_appiumBaseDriver.STATIC_DIR))) {
      throw new Error(`The static content root '${_appiumBaseDriver.STATIC_DIR}' ` + `does not exist or is not accessible`);
    }

    const configName = `${(Math.random() * 0x100000000 + 1).toString(36)}.${CONFIG_EXTENSION}`;

    const configPath = _path.default.resolve(_appiumBaseDriver.STATIC_DIR, configName);

    const certBuffer = Buffer.from(content, 'base64');
    const cn = commonName || (yield extractCommonName(certBuffer));
    const mobileConfig = toMobileConfig(certBuffer, cn);

    try {
      yield _appiumSupport.plist.updatePlistFile(configPath, mobileConfig, false, false);
    } catch (err) {
      throw new Error(`Cannot store the generated config as '${configPath}'. ` + `Original error: ${err.message}`);
    }

    try {
      const _this$server$address = this.server.address(),
            address = _this$server$address.address,
            port = _this$server$address.port;

      const certUrl = `http://${address ? address : _os.default.hostname()}:${port ? port : 4723}/${configName}`;

      try {
        if (this.isRealDevice()) {
          try {
            yield this.proxyCommand('/url', 'POST', {
              url: certUrl
            });
          } catch (err) {
            if (this.isWebContext()) {
              yield _appiumIosDriver.iosCommands.general.setUrl.call(this, certUrl);
            } else {
              throw err;
            }
          }
        } else {
          yield (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, certUrl);
        }

        if (yield installCertificateInPreferences(this)) {
          yield trustCertificateInPreferences(this, cn);
        } else {
          _logger.default.info(`It looks like the '${cn}' certificate has been already added to the CA root`);
        }
      } finally {
        try {
          yield this.activateApp(this.opts.bundleId);
        } catch (e) {
          _logger.default.warn(`Cannot restore the application '${this.opts.bundleId}'. Original error: ${e.message}`);
        }
      }

      return (yield _appiumSupport.fs.readFile(configPath)).toString('base64');
    } finally {
      yield _appiumSupport.fs.rimraf(configPath);
    }
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
