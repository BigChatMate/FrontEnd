"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CarthageCheck = exports.AuthorizationDbCheck = exports.DevToolsSecurityCheck = exports.XcodeCmdLineToolsCheck = exports.XcodeCheck = exports.fixes = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _logger = _interopRequireDefault(require("./logger"));

var _carthageDetector = _interopRequireDefault(require("./carthage-detector"));

var _prompt = require("./prompt");

var _env = _interopRequireDefault(require("./env"));

let checks = [];
let fixes = {};
exports.fixes = fixes;

class XcodeCheck extends _doctor.DoctorCheck {
  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      let xcodePath;

      try {
        let _ref = yield (0, _teen_process.exec)('xcode-select', ['--print-path']),
            stdout = _ref.stdout;

        xcodePath = (stdout || '').replace("\n", "");
      } catch (err) {
        return (0, _utils.nok)('Xcode is NOT installed!');
      }

      return xcodePath && (yield _appiumSupport.fs.exists(xcodePath)) ? (0, _utils.ok)(`Xcode is installed at: ${xcodePath}`) : (0, _utils.nok)(`Xcode cannot be found at '${xcodePath}'!`);
    })();
  }

  fix() {
    return (0, _asyncToGenerator2.default)(function* () {
      return 'Manually install Xcode.';
    })();
  }

}

exports.XcodeCheck = XcodeCheck;
checks.push(new XcodeCheck());

class XcodeCmdLineToolsCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      const errMess = 'Xcode Command Line Tools are NOT installed!';
      let pkgName = (yield _appiumSupport.system.macOsxVersion()) === '10.8' ? 'com.apple.pkg.DeveloperToolsCLI' : 'com.apple.pkg.CLTools_Executables';
      let stdout;

      try {
        stdout = (yield (0, _teen_process.exec)('pkgutil', [`--pkg-info=${pkgName}`])).stdout;
      } catch (err) {
        _logger.default.debug(err);

        return (0, _utils.nok)(errMess);
      }

      return stdout.match(/install-time/) ? (0, _utils.ok)('Xcode Command Line Tools are installed.') : (0, _utils.nok)(errMess);
    })();
  }

  fix() {
    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`The following command need be executed: xcode-select --install`);

      let yesno = yield (0, _prompt.fixIt)();

      if (yesno === 'yes') {
        yield (0, _teen_process.exec)('xcode-select', ['--install']);
      } else {
        _logger.default.info('Skipping you will need to install Xcode manually.');

        throw new _doctor.FixSkippedError();
      }
    })();
  }

}

exports.XcodeCmdLineToolsCheck = XcodeCmdLineToolsCheck;
checks.push(new XcodeCmdLineToolsCheck());
fixes.authorizeIosFix = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.info(`The authorize iOS script need to be run.`);

  let yesno = yield (0, _prompt.fixIt)();

  if (yesno === 'yes') {
    yield (0, _utils.authorizeIos)();
  } else {
    _logger.default.info('Skipping you will need to run the authorize iOS manually.');

    throw new _doctor.FixSkippedError();
  }
});

class DevToolsSecurityCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      const errMess = 'DevToolsSecurity is NOT enabled!';
      let stdout;

      try {
        stdout = (yield (0, _teen_process.exec)('DevToolsSecurity', [])).stdout;
      } catch (err) {
        _logger.default.debug(err);

        return (0, _utils.nok)(errMess);
      }

      return stdout && stdout.match(/enabled/) ? (0, _utils.ok)('DevToolsSecurity is enabled.') : (0, _utils.nok)(errMess);
    })();
  }

  fix() {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield fixes.authorizeIosFix();
    })();
  }

}

exports.DevToolsSecurityCheck = DevToolsSecurityCheck;
checks.push(new DevToolsSecurityCheck());

class AuthorizationDbCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      const successMess = 'The Authorization DB is set up properly.';
      const errMess = 'The Authorization DB is NOT set up properly.';
      let stdout;

      try {
        stdout = (yield (0, _teen_process.exec)('security', ['authorizationdb', 'read', 'system.privilege.taskport'])).stdout;
      } catch (err) {
        if ((yield _appiumSupport.system.macOsxVersion()) === '10.8') {
          let data;

          try {
            data = yield _appiumSupport.fs.readFile('/etc/authorization', 'utf8');
          } catch (err) {
            _logger.default.debug(err);

            return (0, _utils.nok)(errMess);
          }

          let rg = /<key>system.privilege.taskport<\/key>\s*\n\s*<dict>\n\s*<key>allow-root<\/key>\n\s*(<true\/>)/;
          return data && data.match(rg) ? (0, _utils.ok)(successMess) : (0, _utils.nok)(errMess);
        } else {
          _logger.default.debug(err);

          return (0, _utils.nok)(errMess);
        }
      }

      return stdout && (stdout.match(/is-developer/) || stdout.match(/allow/)) ? (0, _utils.ok)(successMess) : (0, _utils.nok)(errMess);
    })();
  }

  fix() {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield fixes.authorizeIosFix();
    })();
  }

}

exports.AuthorizationDbCheck = AuthorizationDbCheck;
checks.push(new AuthorizationDbCheck());

class CarthageCheck extends _doctor.DoctorCheck {
  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      let carthagePath = yield _carthageDetector.default.detect();
      return carthagePath ? (0, _utils.ok)(`Carthage was found at: ${carthagePath}`) : (0, _utils.nok)(`Carthage was NOT found!`);
    })();
  }

  fix() {
    return (0, _asyncToGenerator2.default)(function* () {
      return 'Please install Carthage. Visit https://github.com/Carthage' + '/Carthage#installing-carthage for more information.';
    })();
  }

}

exports.CarthageCheck = CarthageCheck;
checks.push(new CarthageCheck());
checks.push(new _env.default('HOME'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
