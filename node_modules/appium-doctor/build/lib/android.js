"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EnvVarAndPathCheck", {
  enumerable: true,
  get: function get() {
    return _env.default;
  }
});
exports.default = exports.JavaOnPathCheck = exports.AndroidToolCheck = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _env = _interopRequireDefault(require("./env"));

let checks = [];
let javaHome = _appiumSupport.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new _env.default('ANDROID_HOME'));
checks.push(new _env.default('JAVA_HOME'));

class JavaOnPathCheck extends _doctor.DoctorCheck {
  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      if (process.env.JAVA_HOME) {
        let javaHomeBin = _path.default.resolve(process.env.JAVA_HOME, 'bin');

        if (process.env.PATH.indexOf(javaHomeBin) + 1) {
          return (0, _utils.ok)(`Bin directory of ${javaHome} is set`);
        }
      }

      return (0, _utils.nok)(`Bin directory for ${javaHome} is not set`);
    })();
  }

  fix() {
    return `Add '${javaHome}${_path.default.sep}bin' to your PATH environment`;
  }

}

exports.JavaOnPathCheck = JavaOnPathCheck;

class AndroidToolCheck extends _doctor.DoctorCheck {
  constructor(toolName, toolPath) {
    super();
    this.toolName = toolName;
    this.toolPath = toolPath;
  }

  diagnose() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (typeof process.env.ANDROID_HOME === 'undefined') {
        return (0, _utils.nok)(`${_this.toolName} could not be found because ANDROID_HOME is NOT set!`);
      }

      let fullPath = _path.default.resolve(process.env.ANDROID_HOME, _this.toolPath);

      return (yield _appiumSupport.fs.exists(fullPath)) ? (0, _utils.ok)(`${_this.toolName} exists at: ${fullPath}`) : (0, _utils.nok)(`${_this.toolName} could NOT be found at '${fullPath}'!`);
    })();
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return 'Manually configure ANDROID_HOME and run appium-doctor again.';
    }

    return `Manually install ${this.toolName} and add it to PATH.`;
  }

}

exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck('adb', _path.default.join("platform-tools", _appiumSupport.system.isWindows() ? 'adb.exe' : 'adb')));
checks.push(new AndroidToolCheck('android', _path.default.join("tools", _appiumSupport.system.isWindows() ? 'android.bat' : 'android')));
checks.push(new AndroidToolCheck('emulator', _path.default.join("tools", _appiumSupport.system.isWindows() ? 'emulator.exe' : 'emulator')));
checks.push(new JavaOnPathCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hbmRyb2lkLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsImphdmFIb21lIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwicHVzaCIsIkVudlZhckFuZFBhdGhDaGVjayIsIkphdmFPblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiZGlhZ25vc2UiLCJwcm9jZXNzIiwiZW52IiwiSkFWQV9IT01FIiwiamF2YUhvbWVCaW4iLCJwYXRoIiwicmVzb2x2ZSIsIlBBVEgiLCJpbmRleE9mIiwiZml4Iiwic2VwIiwiQW5kcm9pZFRvb2xDaGVjayIsImNvbnN0cnVjdG9yIiwidG9vbE5hbWUiLCJ0b29sUGF0aCIsIkFORFJPSURfSE9NRSIsImZ1bGxQYXRoIiwiZnMiLCJleGlzdHMiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLE1BQU0sR0FBRyxFQUFiO0FBRUEsSUFBSUMsUUFBUSxHQUFHQyxzQkFBT0MsU0FBUCxLQUFxQixhQUFyQixHQUFxQyxZQUFwRDtBQUVBSCxNQUFNLENBQUNJLElBQVAsQ0FBWSxJQUFJQyxZQUFKLENBQXVCLGNBQXZCLENBQVo7QUFDQUwsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSUMsWUFBSixDQUF1QixXQUF2QixDQUFaOztBQUdBLE1BQU1DLGVBQU4sU0FBOEJDLG1CQUE5QixDQUEwQztBQUNsQ0MsRUFBQUEsUUFBTixHQUFrQjtBQUFBO0FBQ2hCLFVBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFoQixFQUEyQjtBQUN6QixZQUFJQyxXQUFXLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUwsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQXpCLEVBQW9DLEtBQXBDLENBQWxCOztBQUNBLFlBQUlGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxJQUFaLENBQWlCQyxPQUFqQixDQUF5QkosV0FBekIsSUFBd0MsQ0FBNUMsRUFBK0M7QUFDN0MsaUJBQU8sZUFBSSxvQkFBbUJYLFFBQVMsU0FBaEMsQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsYUFBTyxnQkFBSyxxQkFBb0JBLFFBQVMsYUFBbEMsQ0FBUDtBQVBnQjtBQVFqQjs7QUFFRGdCLEVBQUFBLEdBQUcsR0FBSTtBQUNMLFdBQVEsUUFBT2hCLFFBQVMsR0FBRVksY0FBS0ssR0FBSSwrQkFBbkM7QUFDRDs7QUFidUM7Ozs7QUFpQjFDLE1BQU1DLGdCQUFOLFNBQStCWixtQkFBL0IsQ0FBMkM7QUFDekNhLEVBQUFBLFdBQVcsQ0FBRUMsUUFBRixFQUFZQyxRQUFaLEVBQXNCO0FBQy9CO0FBQ0EsU0FBS0QsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNEOztBQUVLZCxFQUFBQSxRQUFOLEdBQWtCO0FBQUE7O0FBQUE7QUFDaEIsVUFBSSxPQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FBWWEsWUFBbkIsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkQsZUFBTyxnQkFBSyxHQUFFLEtBQUksQ0FBQ0YsUUFBUyxzREFBckIsQ0FBUDtBQUNEOztBQUNELFVBQUlHLFFBQVEsR0FBR1gsY0FBS0MsT0FBTCxDQUFhTCxPQUFPLENBQUNDLEdBQVIsQ0FBWWEsWUFBekIsRUFBdUMsS0FBSSxDQUFDRCxRQUE1QyxDQUFmOztBQUNBLGFBQU8sT0FBTUcsa0JBQUdDLE1BQUgsQ0FBVUYsUUFBVixDQUFOLElBQTRCLGVBQUksR0FBRSxLQUFJLENBQUNILFFBQVMsZUFBY0csUUFBUyxFQUEzQyxDQUE1QixHQUNMLGdCQUFLLEdBQUUsS0FBSSxDQUFDSCxRQUFTLDJCQUEwQkcsUUFBUyxJQUF4RCxDQURGO0FBTGdCO0FBT2pCOztBQUVEUCxFQUFBQSxHQUFHLEdBQUk7QUFDTCxRQUFJLE9BQU9SLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxZQUFuQixLQUFvQyxXQUF4QyxFQUFxRDtBQUNuRCxhQUFPLDhEQUFQO0FBQ0Q7O0FBQ0QsV0FBUSxvQkFBbUIsS0FBS0YsUUFBUyxzQkFBekM7QUFDRDs7QUFyQndDOzs7QUF1QjNDckIsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSWUsZ0JBQUosQ0FBcUIsS0FBckIsRUFDVk4sY0FBS2MsSUFBTCxDQUFVLGdCQUFWLEVBQTRCekIsc0JBQU9DLFNBQVAsS0FBcUIsU0FBckIsR0FBaUMsS0FBN0QsQ0FEVSxDQUFaO0FBRUFILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUllLGdCQUFKLENBQXFCLFNBQXJCLEVBQ1ZOLGNBQUtjLElBQUwsQ0FBVSxPQUFWLEVBQW1CekIsc0JBQU9DLFNBQVAsS0FBcUIsYUFBckIsR0FBcUMsU0FBeEQsQ0FEVSxDQUFaO0FBRUFILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUllLGdCQUFKLENBQXFCLFVBQXJCLEVBQ1ZOLGNBQUtjLElBQUwsQ0FBVSxPQUFWLEVBQW1CekIsc0JBQU9DLFNBQVAsS0FBcUIsY0FBckIsR0FBc0MsVUFBekQsQ0FEVSxDQUFaO0FBRUFILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUlFLGVBQUosRUFBWjtlQUdlTixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdG9yQ2hlY2sgfSBmcm9tICcuL2RvY3Rvcic7XG5pbXBvcnQgeyBvaywgbm9rIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBmcywgc3lzdGVtIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgRW52VmFyQW5kUGF0aENoZWNrIGZyb20gJy4vZW52JztcblxuXG5sZXQgY2hlY2tzID0gW107XG5cbmxldCBqYXZhSG9tZSA9IHN5c3RlbS5pc1dpbmRvd3MoKSA/ICclSkFWQV9IT01FJScgOiAnJEpBVkFfSE9NRSc7XG5cbmNoZWNrcy5wdXNoKG5ldyBFbnZWYXJBbmRQYXRoQ2hlY2soJ0FORFJPSURfSE9NRScpKTtcbmNoZWNrcy5wdXNoKG5ldyBFbnZWYXJBbmRQYXRoQ2hlY2soJ0pBVkFfSE9NRScpKTtcblxuLy8gQ2hlY2sgdGhhdCB0aGUgUEFUSCBpbmNsdWRlcyB0aGUgamRrJ3MgYmluIGRpcmVjdG9yeVxuY2xhc3MgSmF2YU9uUGF0aENoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBhc3luYyBkaWFnbm9zZSAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIGlmIChwcm9jZXNzLmVudi5KQVZBX0hPTUUpIHtcbiAgICAgIGxldCBqYXZhSG9tZUJpbiA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmVudi5KQVZBX0hPTUUsICdiaW4nKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5QQVRILmluZGV4T2YoamF2YUhvbWVCaW4pICsgMSkge1xuICAgICAgICByZXR1cm4gb2soYEJpbiBkaXJlY3Rvcnkgb2YgJHtqYXZhSG9tZX0gaXMgc2V0YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2soYEJpbiBkaXJlY3RvcnkgZm9yICR7amF2YUhvbWV9IGlzIG5vdCBzZXRgKTtcbiAgfVxuXG4gIGZpeCAoKSB7XG4gICAgcmV0dXJuIGBBZGQgJyR7amF2YUhvbWV9JHtwYXRoLnNlcH1iaW4nIHRvIHlvdXIgUEFUSCBlbnZpcm9ubWVudGA7XG4gIH1cbn1cblxuLy8gQ2hlY2sgdG9vbHNcbmNsYXNzIEFuZHJvaWRUb29sQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yICh0b29sTmFtZSwgdG9vbFBhdGgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudG9vbE5hbWUgPSB0b29sTmFtZTtcbiAgICB0aGlzLnRvb2xQYXRoID0gdG9vbFBhdGg7XG4gIH1cblxuICBhc3luYyBkaWFnbm9zZSAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbm9rKGAke3RoaXMudG9vbE5hbWV9IGNvdWxkIG5vdCBiZSBmb3VuZCBiZWNhdXNlIEFORFJPSURfSE9NRSBpcyBOT1Qgc2V0IWApO1xuICAgIH1cbiAgICBsZXQgZnVsbFBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FLCB0aGlzLnRvb2xQYXRoKTtcbiAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKGZ1bGxQYXRoKSA/IG9rKGAke3RoaXMudG9vbE5hbWV9IGV4aXN0cyBhdDogJHtmdWxsUGF0aH1gKSA6XG4gICAgICBub2soYCR7dGhpcy50b29sTmFtZX0gY291bGQgTk9UIGJlIGZvdW5kIGF0ICcke2Z1bGxQYXRofSchYCk7XG4gIH1cblxuICBmaXggKCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuICdNYW51YWxseSBjb25maWd1cmUgQU5EUk9JRF9IT01FIGFuZCBydW4gYXBwaXVtLWRvY3RvciBhZ2Fpbi4nO1xuICAgIH1cbiAgICByZXR1cm4gYE1hbnVhbGx5IGluc3RhbGwgJHt0aGlzLnRvb2xOYW1lfSBhbmQgYWRkIGl0IHRvIFBBVEguYDtcbiAgfVxufVxuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2FkYicsXG4gIHBhdGguam9pbihcInBsYXRmb3JtLXRvb2xzXCIsIHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhZGIuZXhlJyA6ICdhZGInKSkpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2FuZHJvaWQnLFxuICBwYXRoLmpvaW4oXCJ0b29sc1wiLCBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnYW5kcm9pZC5iYXQnIDogJ2FuZHJvaWQnKSkpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2VtdWxhdG9yJyxcbiAgcGF0aC5qb2luKFwidG9vbHNcIiwgc3lzdGVtLmlzV2luZG93cygpID8gJ2VtdWxhdG9yLmV4ZScgOiAnZW11bGF0b3InKSkpO1xuY2hlY2tzLnB1c2gobmV3IEphdmFPblBhdGhDaGVjaygpKTtcblxuZXhwb3J0IHsgRW52VmFyQW5kUGF0aENoZWNrLCBBbmRyb2lkVG9vbENoZWNrLCBKYXZhT25QYXRoQ2hlY2sgfTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrcztcbiJdLCJmaWxlIjoibGliL2FuZHJvaWQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
