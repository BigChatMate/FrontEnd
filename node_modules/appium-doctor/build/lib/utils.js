"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureBinaryLog = configureBinaryLog;
exports.authorizeIos = exports.inquirer = exports.nok = exports.ok = exports.pkgRoot = void 0;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _inquirer2 = _interopRequireDefault(require("inquirer"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _authorizeIos = _interopRequireDefault(require("authorize-ios"));

const authorizeIos = _authorizeIos.default;
exports.authorizeIos = authorizeIos;
const pkgRoot = process.env.NO_PRECOMPILE ? _path.default.resolve(__dirname, '..') : _path.default.resolve(__dirname, '..', '..');
exports.pkgRoot = pkgRoot;

const ok = message => {
  return {
    ok: true,
    message
  };
};

exports.ok = ok;

const nok = message => {
  return {
    ok: false,
    message
  };
};

exports.nok = nok;
const inquirer = {
  prompt: _bluebird.default.promisify(function (question, cb) {
    _inquirer2.default.prompt(question, function (resp) {
      cb(null, resp);
    });
  })
};
exports.inquirer = inquirer;

function configureBinaryLog(opts) {
  let actualLog = _logger.default.unwrap().log;

  _logger.default.unwrap().log = function (level, prefix, msg) {
    let l = this.levels[level];
    if (l < this.levels[this.level]) return;
    actualLog(level, prefix, msg);
  };

  _logger.default.level = opts.debug ? 'debug' : 'info';
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJhdXRob3JpemVJb3MiLCJhdXRob3JpemUiLCJwa2dSb290IiwicHJvY2VzcyIsImVudiIsIk5PX1BSRUNPTVBJTEUiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIm9rIiwibWVzc2FnZSIsIm5vayIsImlucXVpcmVyIiwicHJvbXB0IiwiQiIsInByb21pc2lmeSIsInF1ZXN0aW9uIiwiY2IiLCJfaW5xdWlyZXIiLCJyZXNwIiwiY29uZmlndXJlQmluYXJ5TG9nIiwib3B0cyIsImFjdHVhbExvZyIsImxvZyIsInVud3JhcCIsImxldmVsIiwicHJlZml4IiwibXNnIiwibCIsImxldmVscyIsImRlYnVnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUEsTUFBTUEsWUFBWSxHQUFHQyxxQkFBckI7O0FBRUEsTUFBTUMsT0FBTyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBWixHQUNkQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsSUFBeEIsQ0FEYyxHQUNrQkYsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLENBRGxDOzs7QUFHQSxNQUFNQyxFQUFFLEdBQUlDLE9BQUQsSUFBYTtBQUFFLFNBQU87QUFBQ0QsSUFBQUEsRUFBRSxFQUFFLElBQUw7QUFBV0MsSUFBQUE7QUFBWCxHQUFQO0FBQTZCLENBQXZEOzs7O0FBQ0EsTUFBTUMsR0FBRyxHQUFJRCxPQUFELElBQWE7QUFBRSxTQUFPO0FBQUNELElBQUFBLEVBQUUsRUFBRSxLQUFMO0FBQVlDLElBQUFBO0FBQVosR0FBUDtBQUE4QixDQUF6RDs7O0FBRUEsTUFBTUUsUUFBUSxHQUFHO0FBQ2ZDLEVBQUFBLE1BQU0sRUFBRUMsa0JBQUVDLFNBQUYsQ0FBWSxVQUFVQyxRQUFWLEVBQW9CQyxFQUFwQixFQUF3QjtBQUMxQ0MsdUJBQVVMLE1BQVYsQ0FBaUJHLFFBQWpCLEVBQTJCLFVBQVVHLElBQVYsRUFBZ0I7QUFBRUYsTUFBQUEsRUFBRSxDQUFDLElBQUQsRUFBT0UsSUFBUCxDQUFGO0FBQWlCLEtBQTlEO0FBQ0QsR0FGTztBQURPLENBQWpCOzs7QUFNQSxTQUFTQyxrQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUM7QUFDakMsTUFBSUMsU0FBUyxHQUFHQyxnQkFBSUMsTUFBSixHQUFhRCxHQUE3Qjs7QUFDQUEsa0JBQUlDLE1BQUosR0FBYUQsR0FBYixHQUFtQixVQUFVRSxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QkMsR0FBekIsRUFBOEI7QUFDL0MsUUFBSUMsQ0FBQyxHQUFHLEtBQUtDLE1BQUwsQ0FBWUosS0FBWixDQUFSO0FBQ0EsUUFBSUcsQ0FBQyxHQUFHLEtBQUtDLE1BQUwsQ0FBWSxLQUFLSixLQUFqQixDQUFSLEVBQWlDO0FBQ2pDSCxJQUFBQSxTQUFTLENBQUNHLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsR0FBaEIsQ0FBVDtBQUNELEdBSkQ7O0FBS0FKLGtCQUFJRSxLQUFKLEdBQVlKLElBQUksQ0FBQ1MsS0FBTCxHQUFhLE9BQWIsR0FBdUIsTUFBbkM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF9pbnF1aXJlciBmcm9tICdpbnF1aXJlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xpYi9sb2dnZXInO1xuaW1wb3J0IGF1dGhvcml6ZSBmcm9tICdhdXRob3JpemUtaW9zJztcblxuXG4vLyByZW5hbWUgdG8gbWFrZSBtb3JlIHNlbnNlXG5jb25zdCBhdXRob3JpemVJb3MgPSBhdXRob3JpemU7XG5cbmNvbnN0IHBrZ1Jvb3QgPSBwcm9jZXNzLmVudi5OT19QUkVDT01QSUxFID9cbiAgcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJykgOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nKTtcblxuY29uc3Qgb2sgPSAobWVzc2FnZSkgPT4geyByZXR1cm4ge29rOiB0cnVlLCBtZXNzYWdlfTsgfTtcbmNvbnN0IG5vayA9IChtZXNzYWdlKSA9PiB7IHJldHVybiB7b2s6IGZhbHNlLCBtZXNzYWdlfTsgfTtcblxuY29uc3QgaW5xdWlyZXIgPSB7XG4gIHByb21wdDogQi5wcm9taXNpZnkoZnVuY3Rpb24gKHF1ZXN0aW9uLCBjYikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgIF9pbnF1aXJlci5wcm9tcHQocXVlc3Rpb24sIGZ1bmN0aW9uIChyZXNwKSB7IGNiKG51bGwsIHJlc3ApOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgfSlcbn07XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZUJpbmFyeUxvZyAob3B0cykge1xuICBsZXQgYWN0dWFsTG9nID0gbG9nLnVud3JhcCgpLmxvZztcbiAgbG9nLnVud3JhcCgpLmxvZyA9IGZ1bmN0aW9uIChsZXZlbCwgcHJlZml4LCBtc2cpIHtcbiAgICBsZXQgbCA9IHRoaXMubGV2ZWxzW2xldmVsXTtcbiAgICBpZiAobCA8IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICBhY3R1YWxMb2cobGV2ZWwsIHByZWZpeCwgbXNnKTtcbiAgfTtcbiAgbG9nLmxldmVsID0gb3B0cy5kZWJ1ZyA/ICdkZWJ1ZycgOiAnaW5mbyc7XG59XG5cbmV4cG9ydCB7IHBrZ1Jvb3QsIG9rLCBub2ssIGlucXVpcmVyLCBjb25maWd1cmVCaW5hcnlMb2csIGF1dGhvcml6ZUlvcywgfTtcbiJdLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
