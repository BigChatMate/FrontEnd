"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidSdkExists = exports.BinaryIsInPathCheck = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

let checks = [];

class BinaryIsInPathCheck extends _doctor.DoctorCheck {
  constructor(binary) {
    super();
    this.binary = binary;
  }

  diagnose() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let resolvedPath;

      try {
        let executable = _appiumSupport.system.isWindows() ? 'where' : 'which';

        let _ref = yield (0, _teen_process.exec)(executable, [_this.binary]),
            stdout = _ref.stdout;

        if (stdout.match(/not found/gi)) {
          throw new Error('Not Found');
        }

        resolvedPath = _appiumSupport.system.isWindows() ? stdout.split(_os.EOL)[0] : stdout.replace(_os.EOL, '');
      } catch (err) {
        return (0, _utils.nok)(`${_this.binary} is MISSING in PATH!`);
      }

      return (yield _appiumSupport.fs.exists(resolvedPath)) ? (0, _utils.ok)(`${_this.binary} was found at ${resolvedPath}`) : (0, _utils.nok)(`${_this.binary} was found in PATH at '${resolvedPath}', but this is NOT a valid path!`);
    })();
  }

  fix() {
    return `Manually install the ${this.binary} binary and add it to PATH.`;
  }

}

exports.BinaryIsInPathCheck = BinaryIsInPathCheck;
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'mvn.bat' : 'mvn'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'ant.bat' : 'ant'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'adb.exe' : 'adb'));

class AndroidSdkExists extends _doctor.DoctorCheck {
  constructor(sdk) {
    super();
    this.sdk = sdk;
  }

  diagnose() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (typeof process.env.ANDROID_HOME === 'undefined') {
        return (0, _utils.nok)(`${_this2.sdk} could not be found because ANDROID_HOME is NOT set!`);
      }

      let sdkPath = _path.default.resolve(process.env.ANDROID_HOME, _path.default.join("platforms", _this2.sdk));

      return (yield _appiumSupport.fs.exists(sdkPath)) ? (0, _utils.ok)(`${_this2.sdk} was found at: ${sdkPath}`) : (0, _utils.nok)(`${_this2.sdk} could NOT be found at '${sdkPath}'!`);
    })();
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === "undefined") {
      return 'Manually configure ANDROID_HOME.';
    }

    return `Manually install the ${this.sdk} sdk.`;
  }

}

exports.AndroidSdkExists = AndroidSdkExists;
checks.push(new AndroidSdkExists('android-16'));
checks.push(new AndroidSdkExists('android-19'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXYuanMiXSwibmFtZXMiOlsiY2hlY2tzIiwiQmluYXJ5SXNJblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiY29uc3RydWN0b3IiLCJiaW5hcnkiLCJkaWFnbm9zZSIsInJlc29sdmVkUGF0aCIsImV4ZWN1dGFibGUiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJzdGRvdXQiLCJtYXRjaCIsIkVycm9yIiwic3BsaXQiLCJFT0wiLCJyZXBsYWNlIiwiZXJyIiwiZnMiLCJleGlzdHMiLCJmaXgiLCJwdXNoIiwiQW5kcm9pZFNka0V4aXN0cyIsInNkayIsInByb2Nlc3MiLCJlbnYiLCJBTkRST0lEX0hPTUUiLCJzZGtQYXRoIiwicGF0aCIsInJlc29sdmUiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLE1BQU0sR0FBRyxFQUFiOztBQUdBLE1BQU1DLG1CQUFOLFNBQWtDQyxtQkFBbEMsQ0FBOEM7QUFDNUNDLEVBQUFBLFdBQVcsQ0FBRUMsTUFBRixFQUFVO0FBQ25CO0FBQ0EsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7O0FBRUtDLEVBQUFBLFFBQU4sR0FBa0I7QUFBQTs7QUFBQTtBQUNoQixVQUFJQyxZQUFKOztBQUNBLFVBQUk7QUFDRixZQUFJQyxVQUFVLEdBQUdDLHNCQUFPQyxTQUFQLEtBQXFCLE9BQXJCLEdBQStCLE9BQWhEOztBQURFLHlCQUVtQix3QkFBS0YsVUFBTCxFQUFpQixDQUFDLEtBQUksQ0FBQ0gsTUFBTixDQUFqQixDQUZuQjtBQUFBLFlBRUdNLE1BRkgsUUFFR0EsTUFGSDs7QUFHRixZQUFJQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxhQUFiLENBQUosRUFBaUM7QUFDL0IsZ0JBQU0sSUFBSUMsS0FBSixDQUFVLFdBQVYsQ0FBTjtBQUNEOztBQUNETixRQUFBQSxZQUFZLEdBQUdFLHNCQUFPQyxTQUFQLEtBQXFCQyxNQUFNLENBQUNHLEtBQVAsQ0FBYUMsT0FBYixFQUFrQixDQUFsQixDQUFyQixHQUE0Q0osTUFBTSxDQUFDSyxPQUFQLENBQWVELE9BQWYsRUFBb0IsRUFBcEIsQ0FBM0Q7QUFDRCxPQVBELENBT0UsT0FBT0UsR0FBUCxFQUFZO0FBQ1osZUFBTyxnQkFBSyxHQUFFLEtBQUksQ0FBQ1osTUFBTyxzQkFBbkIsQ0FBUDtBQUNEOztBQUNELGFBQU8sT0FBTWEsa0JBQUdDLE1BQUgsQ0FBVVosWUFBVixDQUFOLElBQWdDLGVBQUksR0FBRSxLQUFJLENBQUNGLE1BQU8saUJBQWdCRSxZQUFhLEVBQS9DLENBQWhDLEdBQ0wsZ0JBQUssR0FBRSxLQUFJLENBQUNGLE1BQU8sMEJBQXlCRSxZQUFhLGtDQUF6RCxDQURGO0FBWmdCO0FBY2pCOztBQUVEYSxFQUFBQSxHQUFHLEdBQUk7QUFDTCxXQUFRLHdCQUF1QixLQUFLZixNQUFPLDZCQUEzQztBQUNEOztBQXhCMkM7OztBQTJCOUNKLE1BQU0sQ0FBQ29CLElBQVAsQ0FBWSxJQUFJbkIsbUJBQUosQ0FBd0JPLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQXpELENBQVo7QUFDQVQsTUFBTSxDQUFDb0IsSUFBUCxDQUFZLElBQUluQixtQkFBSixDQUF3Qk8sc0JBQU9DLFNBQVAsS0FBcUIsU0FBckIsR0FBaUMsS0FBekQsQ0FBWjtBQUNBVCxNQUFNLENBQUNvQixJQUFQLENBQVksSUFBSW5CLG1CQUFKLENBQXdCTyxzQkFBT0MsU0FBUCxLQUFxQixTQUFyQixHQUFpQyxLQUF6RCxDQUFaOztBQUdBLE1BQU1ZLGdCQUFOLFNBQStCbkIsbUJBQS9CLENBQTJDO0FBQ3pDQyxFQUFBQSxXQUFXLENBQUVtQixHQUFGLEVBQU87QUFDaEI7QUFDQSxTQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDRDs7QUFFS2pCLEVBQUFBLFFBQU4sR0FBa0I7QUFBQTs7QUFBQTtBQUNoQixVQUFJLE9BQU9rQixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsWUFBbkIsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkQsZUFBTyxnQkFBSyxHQUFFLE1BQUksQ0FBQ0gsR0FBSSxzREFBaEIsQ0FBUDtBQUNEOztBQUNELFVBQUlJLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhTCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsWUFBekIsRUFBdUNFLGNBQUtFLElBQUwsQ0FBVSxXQUFWLEVBQXVCLE1BQUksQ0FBQ1AsR0FBNUIsQ0FBdkMsQ0FBZDs7QUFDQSxhQUFPLE9BQU1MLGtCQUFHQyxNQUFILENBQVVRLE9BQVYsQ0FBTixJQUEyQixlQUFJLEdBQUUsTUFBSSxDQUFDSixHQUFJLGtCQUFpQkksT0FBUSxFQUF4QyxDQUEzQixHQUNMLGdCQUFLLEdBQUUsTUFBSSxDQUFDSixHQUFJLDJCQUEwQkksT0FBUSxJQUFsRCxDQURGO0FBTGdCO0FBT2pCOztBQUVEUCxFQUFBQSxHQUFHLEdBQUk7QUFDTCxRQUFJLE9BQU9JLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxZQUFuQixLQUFvQyxXQUF4QyxFQUFxRDtBQUNuRCxhQUFPLGtDQUFQO0FBQ0Q7O0FBQ0QsV0FBUSx3QkFBdUIsS0FBS0gsR0FBSSxPQUF4QztBQUNEOztBQXBCd0M7OztBQXVCM0N0QixNQUFNLENBQUNvQixJQUFQLENBQVksSUFBSUMsZ0JBQUosQ0FBcUIsWUFBckIsQ0FBWjtBQUNBckIsTUFBTSxDQUFDb0IsSUFBUCxDQUFZLElBQUlDLGdCQUFKLENBQXFCLFlBQXJCLENBQVo7ZUFHZXJCLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IERvY3RvckNoZWNrIH0gZnJvbSAnLi9kb2N0b3InO1xuaW1wb3J0IHsgb2ssIG5vayB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMsIHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuXG5sZXQgY2hlY2tzID0gW107XG5cbi8vIENoZWNrIFBBVEggYmluYXJpZXNcbmNsYXNzIEJpbmFyeUlzSW5QYXRoQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChiaW5hcnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYmluYXJ5ID0gYmluYXJ5O1xuICB9XG5cbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGxldCByZXNvbHZlZFBhdGg7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBleGVjdXRhYmxlID0gc3lzdGVtLmlzV2luZG93cygpID8gJ3doZXJlJyA6ICd3aGljaCc7XG4gICAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKGV4ZWN1dGFibGUsIFt0aGlzLmJpbmFyeV0pO1xuICAgICAgaWYgKHN0ZG91dC5tYXRjaCgvbm90IGZvdW5kL2dpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBGb3VuZCcpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRQYXRoID0gc3lzdGVtLmlzV2luZG93cygpID8gc3Rkb3V0LnNwbGl0KEVPTClbMF0gOiBzdGRvdXQucmVwbGFjZShFT0wsICcnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBub2soYCR7dGhpcy5iaW5hcnl9IGlzIE1JU1NJTkcgaW4gUEFUSCFgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhyZXNvbHZlZFBhdGgpID8gb2soYCR7dGhpcy5iaW5hcnl9IHdhcyBmb3VuZCBhdCAke3Jlc29sdmVkUGF0aH1gKSA6XG4gICAgICBub2soYCR7dGhpcy5iaW5hcnl9IHdhcyBmb3VuZCBpbiBQQVRIIGF0ICcke3Jlc29sdmVkUGF0aH0nLCBidXQgdGhpcyBpcyBOT1QgYSB2YWxpZCBwYXRoIWApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICByZXR1cm4gYE1hbnVhbGx5IGluc3RhbGwgdGhlICR7dGhpcy5iaW5hcnl9IGJpbmFyeSBhbmQgYWRkIGl0IHRvIFBBVEguYDtcbiAgfVxufVxuXG5jaGVja3MucHVzaChuZXcgQmluYXJ5SXNJblBhdGhDaGVjayhzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnbXZuLmJhdCcgOiAnbXZuJykpO1xuY2hlY2tzLnB1c2gobmV3IEJpbmFyeUlzSW5QYXRoQ2hlY2soc3lzdGVtLmlzV2luZG93cygpID8gJ2FudC5iYXQnIDogJ2FudCcpKTtcbmNoZWNrcy5wdXNoKG5ldyBCaW5hcnlJc0luUGF0aENoZWNrKHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhZGIuZXhlJyA6ICdhZGInKSk7XG5cbi8vIENoZWNrIEFuZHJvaWQgU0RLc1xuY2xhc3MgQW5kcm9pZFNka0V4aXN0cyBleHRlbmRzIERvY3RvckNoZWNrIHtcbiAgY29uc3RydWN0b3IgKHNkaykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZGsgPSBzZGs7XG4gIH1cblxuICBhc3luYyBkaWFnbm9zZSAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbm9rKGAke3RoaXMuc2RrfSBjb3VsZCBub3QgYmUgZm91bmQgYmVjYXVzZSBBTkRST0lEX0hPTUUgaXMgTk9UIHNldCFgKTtcbiAgICB9XG4gICAgbGV0IHNka1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FLCBwYXRoLmpvaW4oXCJwbGF0Zm9ybXNcIiwgdGhpcy5zZGspKTtcbiAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKHNka1BhdGgpID8gb2soYCR7dGhpcy5zZGt9IHdhcyBmb3VuZCBhdDogJHtzZGtQYXRofWApIDpcbiAgICAgIG5vayhgJHt0aGlzLnNka30gY291bGQgTk9UIGJlIGZvdW5kIGF0ICcke3Nka1BhdGh9JyFgKTtcbiAgfVxuXG4gIGZpeCAoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiAnTWFudWFsbHkgY29uZmlndXJlIEFORFJPSURfSE9NRS4nO1xuICAgIH1cbiAgICByZXR1cm4gYE1hbnVhbGx5IGluc3RhbGwgdGhlICR7dGhpcy5zZGt9IHNkay5gO1xuICB9XG59XG5cbmNoZWNrcy5wdXNoKG5ldyBBbmRyb2lkU2RrRXhpc3RzKCdhbmRyb2lkLTE2JykpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRTZGtFeGlzdHMoJ2FuZHJvaWQtMTknKSk7XG5cbmV4cG9ydCB7IEJpbmFyeUlzSW5QYXRoQ2hlY2ssIEFuZHJvaWRTZGtFeGlzdHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrcztcbiJdLCJmaWxlIjoibGliL2Rldi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
