"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash"));

var _doctor = require("./doctor");

var _general = _interopRequireDefault(require("./general"));

var _ios = _interopRequireDefault(require("./ios"));

var _android = _interopRequireDefault(require("./android"));

var _dev = _interopRequireDefault(require("./dev"));

var _demo = _interopRequireDefault(require("./demo"));

let checks = {
  generalChecks: _general.default,
  iosChecks: _ios.default,
  androidChecks: _android.default,
  devChecks: _dev.default,
  demoChecks: _demo.default
};

let newDoctor = opts => {
  let doctor = new _doctor.Doctor();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.toPairs(opts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          k = _step$value[0],
          v = _step$value[1];

      if (v) {
        doctor.register(checks[`${k}Checks`] || []);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return doctor;
};

var _default = newDoctor;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mYWN0b3J5LmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsImdlbmVyYWxDaGVja3MiLCJpb3NDaGVja3MiLCJhbmRyb2lkQ2hlY2tzIiwiZGV2Q2hlY2tzIiwiZGVtb0NoZWNrcyIsIm5ld0RvY3RvciIsIm9wdHMiLCJkb2N0b3IiLCJEb2N0b3IiLCJfIiwidG9QYWlycyIsImsiLCJ2IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsTUFBTSxHQUFHO0FBQUNDLEVBQUFBLGFBQWEsRUFBYkEsZ0JBQUQ7QUFBZ0JDLEVBQUFBLFNBQVMsRUFBVEEsWUFBaEI7QUFBMkJDLEVBQUFBLGFBQWEsRUFBYkEsZ0JBQTNCO0FBQTBDQyxFQUFBQSxTQUFTLEVBQVRBLFlBQTFDO0FBQXFEQyxFQUFBQSxVQUFVLEVBQVZBO0FBQXJELENBQWI7O0FBRUEsSUFBSUMsU0FBUyxHQUFJQyxJQUFELElBQVU7QUFDeEIsTUFBSUMsTUFBTSxHQUFHLElBQUlDLGNBQUosRUFBYjtBQUR3QjtBQUFBO0FBQUE7O0FBQUE7QUFFeEIseUJBQW1CQyxnQkFBRUMsT0FBRixDQUFVSixJQUFWLENBQW5CLDhIQUFvQztBQUFBO0FBQUEsVUFBMUJLLENBQTBCO0FBQUEsVUFBdkJDLENBQXVCOztBQUNsQyxVQUFJQSxDQUFKLEVBQU87QUFDTEwsUUFBQUEsTUFBTSxDQUFDTSxRQUFQLENBQWdCZCxNQUFNLENBQUUsR0FBRVksQ0FBRSxRQUFOLENBQU4sSUFBd0IsRUFBeEM7QUFDRDtBQUNGO0FBTnVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBT3hCLFNBQU9KLE1BQVA7QUFDRCxDQVJEOztlQVVlRixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IERvY3RvciB9IGZyb20gJy4vZG9jdG9yJztcbmltcG9ydCBnZW5lcmFsQ2hlY2tzIGZyb20gJy4vZ2VuZXJhbCc7XG5pbXBvcnQgaW9zQ2hlY2tzIGZyb20gJy4vaW9zJztcbmltcG9ydCBhbmRyb2lkQ2hlY2tzIGZyb20gJy4vYW5kcm9pZCc7XG5pbXBvcnQgZGV2Q2hlY2tzIGZyb20gJy4vZGV2JztcbmltcG9ydCBkZW1vQ2hlY2tzIGZyb20gJy4vZGVtbyc7XG5cblxubGV0IGNoZWNrcyA9IHtnZW5lcmFsQ2hlY2tzLCBpb3NDaGVja3MsIGFuZHJvaWRDaGVja3MsIGRldkNoZWNrcywgZGVtb0NoZWNrc307XG5cbmxldCBuZXdEb2N0b3IgPSAob3B0cykgPT4ge1xuICBsZXQgZG9jdG9yID0gbmV3IERvY3RvcigpO1xuICBmb3IgKGxldCBbaywgdl0gb2YgXy50b1BhaXJzKG9wdHMpKSB7XG4gICAgaWYgKHYpIHtcbiAgICAgIGRvY3Rvci5yZWdpc3RlcihjaGVja3NbYCR7a31DaGVja3NgXSB8fCBbXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkb2N0b3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZXdEb2N0b3I7XG4iXSwiZmlsZSI6ImxpYi9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
