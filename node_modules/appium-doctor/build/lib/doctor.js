"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixSkippedError = exports.DoctorCheck = exports.Doctor = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

require("colors");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _package = require("../../package.json");

class FixSkippedError extends Error {}

exports.FixSkippedError = FixSkippedError;

class DoctorCheck {
  constructor(opts = {}) {
    this.autofix = !!opts.autofix;
  }

  diagnose() {
    throw new Error('Not Implemented!');
  }

  fix() {
    throw new Error('Not Implemented!');
  }

}

exports.DoctorCheck = DoctorCheck;

class Doctor {
  constructor() {
    this.checks = [];
    this.toFix = [];
  }

  register(checks) {
    checks = Array.isArray(checks) ? checks : [checks];
    this.checks = this.checks.concat(checks);
  }

  diagnose() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info('### Diagnostic starting ###');

      _this.toFix = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.checks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let check = _step.value;
          let res = yield check.diagnose();

          if (res.ok) {
            _logger.default.info(` ${'\u2714'.green} ${res.message}`);
          } else {
            let errorMessage = ` ${'\u2716'.red} ${res.message}`;

            _logger.default.warn(errorMessage);

            _this.toFix.push({
              error: errorMessage,
              check
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      let fixMessage;

      switch (_this.toFix.length) {
        case 0:
          fixMessage = 'no fix needed';
          break;

        case 1:
          fixMessage = 'one fix needed';
          break;

        default:
          fixMessage = `${_this.toFix.length} fixes needed`;
      }

      _logger.default.info(`### Diagnostic completed, ${fixMessage}. ###`);

      _logger.default.info('');
    })();
  }

  reportSuccess() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this2.toFix.length === 0) {
        _logger.default.info('Everything looks good, bye!');

        _logger.default.info('');

        return true;
      } else {
        return false;
      }
    })();
  }

  reportManualFixes() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let manualFixes = _lodash.default.filter(_this3.toFix, f => {
        return !f.check.autofix;
      });

      if (manualFixes.length > 0) {
        _logger.default.info('### Manual Fixes Needed ###');

        _logger.default.info('The configuration cannot be automatically fixed, please do the following first:');

        let fixMessages = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = manualFixes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            let f = _step2.value;
            fixMessages.push((yield f.check.fix()));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = _lodash.default.uniq(fixMessages)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            let m = _step3.value;

            _logger.default.warn(`- ${m}`);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        _logger.default.info('###');

        _logger.default.info('');

        _logger.default.info('Bye! Run appium-doctor again when all manual fixes have been applied!');

        _logger.default.info('');

        return true;
      } else {
        return false;
      }
    })();
  }

  runAutoFix(f) {
    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`### Fixing: ${f.error} ###`);

      try {
        yield f.check.fix();
      } catch (err) {
        if (err instanceof FixSkippedError) {
          _logger.default.info(`### Skipped fix ###`);

          return;
        } else {
          _logger.default.warn(`${err}`.replace(/\n$/g, ''));

          _logger.default.info(`### Fix did not succeed ###`);

          return;
        }
      }

      _logger.default.info('Checking if this was fixed:');

      let res = yield f.check.diagnose();

      if (res.ok) {
        f.fixed = true;

        _logger.default.info(` ${'\u2714'.green} ${res.message}`);

        _logger.default.info(`### Fix was successfully applied ###`);
      } else {
        _logger.default.info(` ${'\u2716'.red} ${res.message}`);

        _logger.default.info(`### Fix was applied but issue remains ###`);
      }
    })();
  }

  runAutoFixes() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let autoFixes = _lodash.default.filter(_this4.toFix, f => {
        return f.check.autofix;
      });

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = autoFixes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          let f = _step4.value;
          yield _this4.runAutoFix(f);

          _logger.default.info('');
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      if (_lodash.default.find(autoFixes, f => {
        return !f.fixed;
      })) {
        _logger.default.info('Bye! A few issues remain, fix manually and/or rerun appium-doctor!');
      } else {
        _logger.default.info('Bye! All issues have been fixed!');
      }

      _logger.default.info('');
    })();
  }

  run() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`Appium Doctor v.${_package.version}`);

      yield _this5.diagnose();

      if (yield _this5.reportSuccess()) {
        return;
      }

      if (yield _this5.reportManualFixes()) {
        return;
      }

      yield _this5.runAutoFixes();
    })();
  }

}

exports.Doctor = Doctor;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
