"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FileCheck = exports.DirCheck = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _logger = _interopRequireDefault(require("./logger"));

var _prompt = require("./prompt");

let checks = [];

class DirCheck extends _doctor.DoctorCheck {
  constructor(path) {
    super({
      autofix: false
    });
    this.path = path;
  }

  diagnose() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield _appiumSupport.fs.exists(_this.path))) {
        return (0, _utils.nok)(`Could NOT find directory at '${_this.path}'!`);
      }

      let stats = yield _appiumSupport.fs.lstat(_this.path);
      return stats.isDirectory() ? (0, _utils.ok)(`Found directory at: ${_this.path}`) : (0, _utils.nok)(`'${_this.path}' is NOT a directory!`);
    })();
  }

  fix() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return `Manually create a directory at: ${_this2.path}`;
    })();
  }

}

exports.DirCheck = DirCheck;
checks.push(new DirCheck('/tmp/appium-doctor'));
checks.push(new DirCheck('/tmp/appium-doctor/demo'));

class FileCheck extends _doctor.DoctorCheck {
  constructor(path) {
    super({
      autofix: true
    });
    this.path = path;
  }

  diagnose() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return (yield _appiumSupport.fs.exists(_this3.path)) ? (0, _utils.ok)(`Found file at: ${_this3.path}`) : (0, _utils.nok)(`Could NOT find file at '${_this3.path}'!`);
    })();
  }

  fix() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`The following command need be executed: touch '${_this4.path}'`);

      let yesno = yield (0, _prompt.fixIt)();

      if (yesno === 'yes') {
        yield (0, _teen_process.exec)('touch', [_this4.path]);
      } else {
        _logger.default.info(`Skipping you will need to touch '${_this4.path}' manually.`);

        throw new _doctor.FixSkippedError('bbb');
      }
    })();
  }

}

exports.FileCheck = FileCheck;
checks.push(new FileCheck('/tmp/appium-doctor/demo/apple.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/pear.fruit'));
checks.push(new FileCheck('/tmp/appium-doctor/demo/orange.fruit'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZW1vLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsIkRpckNoZWNrIiwiRG9jdG9yQ2hlY2siLCJjb25zdHJ1Y3RvciIsInBhdGgiLCJhdXRvZml4IiwiZGlhZ25vc2UiLCJmcyIsImV4aXN0cyIsInN0YXRzIiwibHN0YXQiLCJpc0RpcmVjdG9yeSIsImZpeCIsInB1c2giLCJGaWxlQ2hlY2siLCJsb2ciLCJpbmZvIiwieWVzbm8iLCJGaXhTa2lwcGVkRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsTUFBTSxHQUFHLEVBQWI7O0FBRUEsTUFBTUMsUUFBTixTQUF1QkMsbUJBQXZCLENBQW1DO0FBQ2pDQyxFQUFBQSxXQUFXLENBQUVDLElBQUYsRUFBUTtBQUNqQixVQUFNO0FBQUNDLE1BQUFBLE9BQU8sRUFBRTtBQUFWLEtBQU47QUFDQSxTQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFS0UsRUFBQUEsUUFBTixHQUFrQjtBQUFBOztBQUFBO0FBQ2hCLFVBQUksUUFBT0Msa0JBQUdDLE1BQUgsQ0FBVSxLQUFJLENBQUNKLElBQWYsQ0FBUCxDQUFKLEVBQWlDO0FBQy9CLGVBQU8sZ0JBQUssZ0NBQStCLEtBQUksQ0FBQ0EsSUFBSyxJQUE5QyxDQUFQO0FBQ0Q7O0FBQ0QsVUFBSUssS0FBSyxTQUFTRixrQkFBR0csS0FBSCxDQUFTLEtBQUksQ0FBQ04sSUFBZCxDQUFsQjtBQUNBLGFBQU9LLEtBQUssQ0FBQ0UsV0FBTixLQUNMLGVBQUksdUJBQXNCLEtBQUksQ0FBQ1AsSUFBSyxFQUFwQyxDQURLLEdBQ29DLGdCQUFLLElBQUcsS0FBSSxDQUFDQSxJQUFLLHVCQUFsQixDQUQzQztBQUxnQjtBQU9qQjs7QUFFS1EsRUFBQUEsR0FBTixHQUFhO0FBQUE7O0FBQUE7QUFDWCxhQUFRLG1DQUFrQyxNQUFJLENBQUNSLElBQUssRUFBcEQ7QUFEVztBQUVaOztBQWpCZ0M7OztBQW9CbkNKLE1BQU0sQ0FBQ2EsSUFBUCxDQUFZLElBQUlaLFFBQUosQ0FBYSxvQkFBYixDQUFaO0FBQ0FELE1BQU0sQ0FBQ2EsSUFBUCxDQUFZLElBQUlaLFFBQUosQ0FBYSx5QkFBYixDQUFaOztBQUVBLE1BQU1hLFNBQU4sU0FBd0JaLG1CQUF4QixDQUFvQztBQUNsQ0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVE7QUFDakIsVUFBTTtBQUFDQyxNQUFBQSxPQUFPLEVBQUU7QUFBVixLQUFOO0FBQ0EsU0FBS0QsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7O0FBRUtFLEVBQUFBLFFBQU4sR0FBa0I7QUFBQTs7QUFBQTtBQUNoQixhQUFPLE9BQU1DLGtCQUFHQyxNQUFILENBQVUsTUFBSSxDQUFDSixJQUFmLENBQU4sSUFDTCxlQUFJLGtCQUFpQixNQUFJLENBQUNBLElBQUssRUFBL0IsQ0FESyxHQUMrQixnQkFBSywyQkFBMEIsTUFBSSxDQUFDQSxJQUFLLElBQXpDLENBRHRDO0FBRGdCO0FBR2pCOztBQUVLUSxFQUFBQSxHQUFOLEdBQWE7QUFBQTs7QUFBQTtBQUNYRyxzQkFBSUMsSUFBSixDQUFVLGtEQUFpRCxNQUFJLENBQUNaLElBQUssR0FBckU7O0FBQ0EsVUFBSWEsS0FBSyxTQUFTLG9CQUFsQjs7QUFDQSxVQUFJQSxLQUFLLEtBQUssS0FBZCxFQUFxQjtBQUNuQixjQUFNLHdCQUFLLE9BQUwsRUFBYyxDQUFDLE1BQUksQ0FBQ2IsSUFBTixDQUFkLENBQU47QUFDRCxPQUZELE1BRU87QUFDTFcsd0JBQUlDLElBQUosQ0FBVSxvQ0FBbUMsTUFBSSxDQUFDWixJQUFLLGFBQXZEOztBQUNBLGNBQU0sSUFBSWMsdUJBQUosQ0FBb0IsS0FBcEIsQ0FBTjtBQUNEO0FBUlU7QUFTWjs7QUFwQmlDOzs7QUF1QnBDbEIsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLHFDQUFkLENBQVo7QUFDQWQsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLG9DQUFkLENBQVo7QUFDQWQsTUFBTSxDQUFDYSxJQUFQLENBQVksSUFBSUMsU0FBSixDQUFjLHNDQUFkLENBQVo7ZUFHZWQsTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlbW8gcnVsZSB0byB0ZXN0IHRoZSBndWlcblxuaW1wb3J0IHsgb2ssIG5vayB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IERvY3RvckNoZWNrLCBGaXhTa2lwcGVkRXJyb3IgfSBmcm9tICcuL2RvY3Rvcic7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGZpeEl0IH0gZnJvbSAnLi9wcm9tcHQnO1xuXG5cbmxldCBjaGVja3MgPSBbXTtcblxuY2xhc3MgRGlyQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChwYXRoKSB7XG4gICAgc3VwZXIoe2F1dG9maXg6IGZhbHNlfSk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyh0aGlzLnBhdGgpKSB7XG4gICAgICByZXR1cm4gbm9rKGBDb3VsZCBOT1QgZmluZCBkaXJlY3RvcnkgYXQgJyR7dGhpcy5wYXRofSchYCk7XG4gICAgfVxuICAgIGxldCBzdGF0cyA9IGF3YWl0IGZzLmxzdGF0KHRoaXMucGF0aCk7XG4gICAgcmV0dXJuIHN0YXRzLmlzRGlyZWN0b3J5KCkgP1xuICAgICAgb2soYEZvdW5kIGRpcmVjdG9yeSBhdDogJHt0aGlzLnBhdGh9YCkgOiBub2soYCcke3RoaXMucGF0aH0nIGlzIE5PVCBhIGRpcmVjdG9yeSFgKTtcbiAgfVxuXG4gIGFzeW5jIGZpeCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHJldHVybiBgTWFudWFsbHkgY3JlYXRlIGEgZGlyZWN0b3J5IGF0OiAke3RoaXMucGF0aH1gO1xuICB9XG59XG5cbmNoZWNrcy5wdXNoKG5ldyBEaXJDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yJykpO1xuY2hlY2tzLnB1c2gobmV3IERpckNoZWNrKCcvdG1wL2FwcGl1bS1kb2N0b3IvZGVtbycpKTtcblxuY2xhc3MgRmlsZUNoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAocGF0aCkge1xuICAgIHN1cGVyKHthdXRvZml4OiB0cnVlfSk7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKHRoaXMucGF0aCkgP1xuICAgICAgb2soYEZvdW5kIGZpbGUgYXQ6ICR7dGhpcy5wYXRofWApIDogbm9rKGBDb3VsZCBOT1QgZmluZCBmaWxlIGF0ICcke3RoaXMucGF0aH0nIWApO1xuICB9XG5cbiAgYXN5bmMgZml4ICgpIHtcbiAgICBsb2cuaW5mbyhgVGhlIGZvbGxvd2luZyBjb21tYW5kIG5lZWQgYmUgZXhlY3V0ZWQ6IHRvdWNoICcke3RoaXMucGF0aH0nYCk7XG4gICAgbGV0IHllc25vID0gYXdhaXQgZml4SXQoKTtcbiAgICBpZiAoeWVzbm8gPT09ICd5ZXMnKSB7XG4gICAgICBhd2FpdCBleGVjKCd0b3VjaCcsIFt0aGlzLnBhdGhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oYFNraXBwaW5nIHlvdSB3aWxsIG5lZWQgdG8gdG91Y2ggJyR7dGhpcy5wYXRofScgbWFudWFsbHkuYCk7XG4gICAgICB0aHJvdyBuZXcgRml4U2tpcHBlZEVycm9yKCdiYmInKTtcbiAgICB9XG4gIH1cbn1cblxuY2hlY2tzLnB1c2gobmV3IEZpbGVDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yL2RlbW8vYXBwbGUuZnJ1aXQnKSk7XG5jaGVja3MucHVzaChuZXcgRmlsZUNoZWNrKCcvdG1wL2FwcGl1bS1kb2N0b3IvZGVtby9wZWFyLmZydWl0JykpO1xuY2hlY2tzLnB1c2gobmV3IEZpbGVDaGVjaygnL3RtcC9hcHBpdW0tZG9jdG9yL2RlbW8vb3JhbmdlLmZydWl0JykpO1xuXG5leHBvcnQgeyBEaXJDaGVjaywgRmlsZUNoZWNrIH07XG5leHBvcnQgZGVmYXVsdCBjaGVja3M7XG4iXSwiZmlsZSI6ImxpYi9kZW1vLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
