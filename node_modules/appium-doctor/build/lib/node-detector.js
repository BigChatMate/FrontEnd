"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

const NODE_COMMON_PATHS = [process.env.NODE_BIN, '/usr/local/bin/node', '/opt/local/bin/node'];

class NodeDetector {
  static retrieveInCommonPlaces() {
    return (0, _asyncToGenerator2.default)(function* () {
      for (var _i = 0; _i < NODE_COMMON_PATHS.length; _i++) {
        let p = NODE_COMMON_PATHS[_i];

        if (p && (yield _appiumSupport.fs.exists(p))) {
          _logger.default.debug(`Node binary found at common place: ${p}`);

          return p;
        }
      }

      _logger.default.debug('Node binary wasn\'t found at common places.');

      return null;
    })();
  }

  static retrieveUsingSystemCall() {
    return (0, _asyncToGenerator2.default)(function* () {
      let stdout;
      let cmd = 'which';

      if (_appiumSupport.system.isWindows()) {
        cmd = 'where';
      }

      try {
        stdout = (yield (0, _teen_process.exec)(cmd, ['node'])).stdout;
      } catch (err) {
        _logger.default.debug(err);

        return null;
      }

      let nodePath = stdout.replace(/[\n\r]/g, "");

      if (yield _appiumSupport.fs.exists(nodePath)) {
        _logger.default.debug(`Node binary found using ${cmd} command at: ${nodePath}`);

        return nodePath;
      } else {
        _logger.default.debug(`Node binary not found using the ${cmd} command.`);

        return null;
      }
    })();
  }

  static retrieveUsingAppleScript() {
    return (0, _asyncToGenerator2.default)(function* () {
      if (!_appiumSupport.system.isMac()) {
        _logger.default.debug('Not on Darwin, skipping Apple Script');

        return null;
      }

      const appScript = ['try', '  set appiumIsRunning to false', '  tell application "System Events"', '    set appiumIsRunning to name of every process contains "Appium"', '  end tell', '  if appiumIsRunning then', '    tell application "Appium" to return node path', '  end if', 'end try', 'return "NULL"'].join("\n");
      let stdout;

      try {
        stdout = (yield (0, _teen_process.exec)('osascript', ['-e', appScript])).stdout;
      } catch (err) {
        _logger.default.debug(err);

        return null;
      }

      let nodePath = stdout.replace("\n", "");

      if (yield _appiumSupport.fs.exists(nodePath)) {
        _logger.default.debug(`Node binary found using AppleScript at: ${nodePath}`);

        return nodePath;
      } else {
        _logger.default.debug('Node binary not found using AppleScript.');

        return null;
      }
    })();
  }

  static retrieveUsingAppiumConfigFile() {
    return (0, _asyncToGenerator2.default)(function* () {
      let jsonobj;

      try {
        const appiumConfigPath = _path.default.resolve(__dirname, '..', '..', '.appiumconfig.json');

        if (yield _appiumSupport.fs.exists(appiumConfigPath)) {
          jsonobj = JSON.parse((yield _appiumSupport.fs.readFile(appiumConfigPath, 'utf8')));
        }
      } catch (err) {
        _logger.default.debug(err);

        return null;
      }

      if (jsonobj && jsonobj.node_bin && (yield _appiumSupport.fs.exists(jsonobj.node_bin))) {
        _logger.default.debug(`Node binary found using .appiumconfig.json at: ${jsonobj.node_bin}`);

        return jsonobj.node_bin;
      } else {
        _logger.default.debug('Node binary not found in the .appiumconfig.json file.');

        return null;
      }
    })();
  }

  static detect() {
    return (0, _asyncToGenerator2.default)(function* () {
      let nodePath = (yield NodeDetector.retrieveUsingSystemCall()) || (yield NodeDetector.retrieveInCommonPlaces()) || (yield NodeDetector.retrieveUsingAppleScript()) || (yield NodeDetector.retrieveUsingAppiumConfigFile());

      if (nodePath) {
        return nodePath;
      } else {
        _logger.default.warn('The node binary could not be found.');

        return null;
      }
    })();
  }

}

var _default = NodeDetector;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
