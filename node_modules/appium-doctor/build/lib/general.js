"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NodeVersionCheck = exports.NodeBinaryCheck = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _nodeDetector = _interopRequireDefault(require("./node-detector"));

let checks = [];

class NodeBinaryCheck extends _doctor.DoctorCheck {
  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      let nodePath = yield _nodeDetector.default.detect();
      return nodePath ? (0, _utils.ok)(`The Node.js binary was found at: ${nodePath}`) : (0, _utils.nok)('The Node.js binary was NOT found!');
    })();
  }

  fix() {
    return `Manually setup Node.js.`;
  }

}

exports.NodeBinaryCheck = NodeBinaryCheck;
checks.push(new NodeBinaryCheck());

class NodeVersionCheck extends _doctor.DoctorCheck {
  diagnose() {
    return (0, _asyncToGenerator2.default)(function* () {
      let nodePath = yield _nodeDetector.default.detect();

      if (!nodePath) {
        return (0, _utils.nok)('Node is not installed, so no version to check!');
      }

      let _ref = yield (0, _teen_process.exec)(nodePath, ['--version']),
          stdout = _ref.stdout;

      let versionString = stdout.replace('v', '').trim();
      let version = parseInt(versionString, 10);

      if (Number.isNaN(version)) {
        return (0, _utils.nok)(`Unable to find node version (version = '${versionString}')`);
      }

      return version >= 4 ? (0, _utils.ok)(`Node version is ${versionString}`) : (0, _utils.nok)('Node version should be at least 4!');
    })();
  }

  fix() {
    return `Manually upgrade Node.js.`;
  }

}

exports.NodeVersionCheck = NodeVersionCheck;
checks.push(new NodeVersionCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsIk5vZGVCaW5hcnlDaGVjayIsIkRvY3RvckNoZWNrIiwiZGlhZ25vc2UiLCJub2RlUGF0aCIsIk5vZGVEZXRlY3RvciIsImRldGVjdCIsImZpeCIsInB1c2giLCJOb2RlVmVyc2lvbkNoZWNrIiwic3Rkb3V0IiwidmVyc2lvblN0cmluZyIsInJlcGxhY2UiLCJ0cmltIiwidmVyc2lvbiIsInBhcnNlSW50IiwiTnVtYmVyIiwiaXNOYU4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsTUFBTSxHQUFHLEVBQWI7O0FBR0EsTUFBTUMsZUFBTixTQUE4QkMsbUJBQTlCLENBQTBDO0FBQ2xDQyxFQUFBQSxRQUFOLEdBQWtCO0FBQUE7QUFDaEIsVUFBSUMsUUFBUSxTQUFTQyxzQkFBYUMsTUFBYixFQUFyQjtBQUNBLGFBQU9GLFFBQVEsR0FBRyxlQUFJLG9DQUFtQ0EsUUFBUyxFQUFoRCxDQUFILEdBQ2IsZ0JBQUksbUNBQUosQ0FERjtBQUZnQjtBQUlqQjs7QUFFREcsRUFBQUEsR0FBRyxHQUFJO0FBQ0wsV0FBUSx5QkFBUjtBQUNEOztBQVR1Qzs7O0FBVzFDUCxNQUFNLENBQUNRLElBQVAsQ0FBWSxJQUFJUCxlQUFKLEVBQVo7O0FBR0EsTUFBTVEsZ0JBQU4sU0FBK0JQLG1CQUEvQixDQUEyQztBQUNuQ0MsRUFBQUEsUUFBTixHQUFrQjtBQUFBO0FBQ2hCLFVBQUlDLFFBQVEsU0FBU0Msc0JBQWFDLE1BQWIsRUFBckI7O0FBQ0EsVUFBSSxDQUFDRixRQUFMLEVBQWU7QUFDYixlQUFPLGdCQUFJLGdEQUFKLENBQVA7QUFDRDs7QUFKZSx1QkFLSyx3QkFBS0EsUUFBTCxFQUFlLENBQUMsV0FBRCxDQUFmLENBTEw7QUFBQSxVQUtYTSxNQUxXLFFBS1hBLE1BTFc7O0FBTWhCLFVBQUlDLGFBQWEsR0FBR0QsTUFBTSxDQUFDRSxPQUFQLENBQWUsR0FBZixFQUFvQixFQUFwQixFQUF3QkMsSUFBeEIsRUFBcEI7QUFDQSxVQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0osYUFBRCxFQUFnQixFQUFoQixDQUF0Qjs7QUFDQSxVQUFJSyxNQUFNLENBQUNDLEtBQVAsQ0FBYUgsT0FBYixDQUFKLEVBQTJCO0FBQ3pCLGVBQU8sZ0JBQUssMkNBQTBDSCxhQUFjLElBQTdELENBQVA7QUFDRDs7QUFDRCxhQUFPRyxPQUFPLElBQUksQ0FBWCxHQUFlLGVBQUksbUJBQWtCSCxhQUFjLEVBQXBDLENBQWYsR0FDTCxnQkFBSSxvQ0FBSixDQURGO0FBWGdCO0FBYWpCOztBQUVESixFQUFBQSxHQUFHLEdBQUk7QUFDTCxXQUFRLDJCQUFSO0FBQ0Q7O0FBbEJ3Qzs7O0FBb0IzQ1AsTUFBTSxDQUFDUSxJQUFQLENBQVksSUFBSUMsZ0JBQUosRUFBWjtlQUdlVCxNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2ssIG5vayB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBEb2N0b3JDaGVjayB9IGZyb20gJy4vZG9jdG9yJztcbmltcG9ydCBOb2RlRGV0ZWN0b3IgZnJvbSAnLi9ub2RlLWRldGVjdG9yJztcblxuXG5sZXQgY2hlY2tzID0gW107XG5cbi8vIE5vZGUgQmluYXJ5XG5jbGFzcyBOb2RlQmluYXJ5Q2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBsZXQgbm9kZVBhdGggPSBhd2FpdCBOb2RlRGV0ZWN0b3IuZGV0ZWN0KCk7XG4gICAgcmV0dXJuIG5vZGVQYXRoID8gb2soYFRoZSBOb2RlLmpzIGJpbmFyeSB3YXMgZm91bmQgYXQ6ICR7bm9kZVBhdGh9YCkgOlxuICAgICAgbm9rKCdUaGUgTm9kZS5qcyBiaW5hcnkgd2FzIE5PVCBmb3VuZCEnKTtcbiAgfVxuXG4gIGZpeCAoKSB7XG4gICAgcmV0dXJuIGBNYW51YWxseSBzZXR1cCBOb2RlLmpzLmA7XG4gIH1cbn1cbmNoZWNrcy5wdXNoKG5ldyBOb2RlQmluYXJ5Q2hlY2soKSk7XG5cbi8vIE5vZGUgdmVyc2lvblxuY2xhc3MgTm9kZVZlcnNpb25DaGVjayBleHRlbmRzIERvY3RvckNoZWNrIHtcbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGxldCBub2RlUGF0aCA9IGF3YWl0IE5vZGVEZXRlY3Rvci5kZXRlY3QoKTtcbiAgICBpZiAoIW5vZGVQYXRoKSB7XG4gICAgICByZXR1cm4gbm9rKCdOb2RlIGlzIG5vdCBpbnN0YWxsZWQsIHNvIG5vIHZlcnNpb24gdG8gY2hlY2shJyk7XG4gICAgfVxuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMobm9kZVBhdGgsIFsnLS12ZXJzaW9uJ10pO1xuICAgIGxldCB2ZXJzaW9uU3RyaW5nID0gc3Rkb3V0LnJlcGxhY2UoJ3YnLCAnJykudHJpbSgpO1xuICAgIGxldCB2ZXJzaW9uID0gcGFyc2VJbnQodmVyc2lvblN0cmluZywgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4odmVyc2lvbikpIHtcbiAgICAgIHJldHVybiBub2soYFVuYWJsZSB0byBmaW5kIG5vZGUgdmVyc2lvbiAodmVyc2lvbiA9ICcke3ZlcnNpb25TdHJpbmd9JylgKTtcbiAgICB9XG4gICAgcmV0dXJuIHZlcnNpb24gPj0gNCA/IG9rKGBOb2RlIHZlcnNpb24gaXMgJHt2ZXJzaW9uU3RyaW5nfWApIDpcbiAgICAgIG5vaygnTm9kZSB2ZXJzaW9uIHNob3VsZCBiZSBhdCBsZWFzdCA0IScpO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICByZXR1cm4gYE1hbnVhbGx5IHVwZ3JhZGUgTm9kZS5qcy5gO1xuICB9XG59XG5jaGVja3MucHVzaChuZXcgTm9kZVZlcnNpb25DaGVjaygpKTtcblxuZXhwb3J0IHsgTm9kZUJpbmFyeUNoZWNrLCBOb2RlVmVyc2lvbkNoZWNrIH07XG5leHBvcnQgZGVmYXVsdCBjaGVja3M7XG4iXSwiZmlsZSI6ImxpYi9nZW5lcmFsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
