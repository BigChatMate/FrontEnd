"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEVICE_PORT = exports.SelendroidDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _selendroid = _interopRequireDefault(require("./selendroid"));

var _appiumSupport = require("appium-support");

var _installer = require("./installer");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _appiumAdb = require("appium-adb");

var _helpers = _interopRequireDefault(require("./helpers"));

var _appiumAndroidDriver = require("appium-android-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

let helpers = {};
Object.assign(helpers, _helpers.default, _appiumAndroidDriver.androidHelpers);
const SYSTEM_PORT_RANGE = [8200, 8299];
const DEVICE_PORT = 8080;
exports.DEVICE_PORT = DEVICE_PORT;
const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/log/types$')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/value')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/rect')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/ime')], ['GET', new RegExp('^/session/[^/]+/ime')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')]];
const APP_EXTENSION = '.apk';

class SelendroidDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.selendroid = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.chromedriver = null;
    this.sessionChromedrivers = {};
    this.opts.systemPort = opts.selendroidPort || SYSTEM_PORT_RANGE[0];
    this.opts.adbPort = opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
  }

  createSession(caps) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        if (!(yield (0, _installer.serverExists)())) {
          throw new Error('Cannot start a selendroid session because the server ' + 'apk does not exist. Please run `npm run-script ' + 'selendroid` in the appium-selendroid-driver package');
        }

        let sessionId;

        var _ref = yield _superprop_callCreateSession(caps);

        var _ref2 = (0, _slicedToArray2.default)(_ref, 1);

        sessionId = _ref2[0];
        _this.curContext = _this.defaultContextName();
        _this.opts.app = yield _this.helpers.configureApp(_this.opts.app, APP_EXTENSION);
        yield _this.checkAppPresent();
        _this.opts.systemPort = _this.opts.selendroidPort || SYSTEM_PORT_RANGE[0];
        _this.opts.adbPort = _this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
        yield _this.startSelendroidSession();
        return [sessionId, caps];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);
    if (!res) return res;

    if (this.opts.reboot) {
      this.setAvdFromCapabilities(caps);
    }
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enabled');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  get driverData() {
    return {};
  }

  isEmulator() {
    return !!this.opts.avd;
  }

  startSelendroidSession() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this2.opts.javaVersion) {
        _this2.opts.javaVersion = yield helpers.getJavaVersion();
      }

      let _ref3 = yield helpers.getDeviceInfoFromCaps(_this2.opts),
          udid = _ref3.udid,
          emPort = _ref3.emPort;

      _this2.opts.udid = udid;
      _this2.opts.emPort = emPort;
      _this2.adb = yield _appiumAndroidDriver.androidHelpers.createADB(_this2.opts);
      yield helpers.ensureInternetPermissionForApp(_this2.adb, _this2.opts.app);
      let appInfo = yield helpers.getLaunchInfo(_this2.adb, _this2.opts);
      Object.assign(_this2.opts, appInfo);
      yield _this2.initSelendroidServer();
      yield helpers.initDevice(_this2.adb, _this2.opts);
      yield _this2.adb.forwardPort(_this2.opts.systemPort, DEVICE_PORT);
      yield _this2.initAUT();
      yield helpers.unlock(_this2, _this2.adb, _this2.caps);
      yield _this2.selendroid.startSession(_this2.caps);
      yield _this2.ensureAppStarts();

      if (_this2.opts.autoWebview) {
        yield (0, _asyncbox.retryInterval)(20, _this2.opts.autoWebviewTimeout || 2000, (0, _asyncToGenerator2.default)(function* () {
          yield _this2.setContext(_this2.defaultWebviewName());
        }));
      }

      _this2.jwpProxyActive = true;
    })();
  }

  initSelendroidServer() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.selendroid = new _selendroid.default({
        host: _this3.opts.host || 'localhost',
        systemPort: _this3.opts.systemPort,
        devicePort: DEVICE_PORT,
        adb: _this3.adb,
        apk: _this3.opts.app,
        tmpDir: _this3.opts.tmpDir,
        appPackage: _this3.opts.appPackage,
        appActivity: _this3.opts.appActivity
      });
      _this3.proxyReqRes = _this3.selendroid.proxyReqRes.bind(_this3.selendroid);
      yield _this3.selendroid.prepareModifiedServer();
    })();
  }

  initAUT() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Initializing application under test');

      _this4.apkStrings[_this4.opts.language] = yield helpers.pushStrings(_this4.opts.language, _this4.adb, _this4.opts);

      if (!_this4.opts.skipUninstall) {
        yield _this4.adb.uninstallApk(_this4.opts.appPackage);
      }

      if (!_this4.opts.noSign) {
        let signed = yield _this4.adb.checkApkCert(_this4.opts.app, _this4.opts.appPackage);

        if (!signed) {
          _logger.default.debug('Application not signed. Signing.');

          yield _this4.adb.sign(_this4.opts.app, _this4.opts.appPackage);
        }
      }

      yield helpers.installApk(_this4.adb, _this4.opts);
      yield _this4.selendroid.installModifiedServer();
    })();
  }

  ensureAppStarts() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let appWaitPackage = _this5.opts.appWaitPackage || _this5.opts.appPackage;
      let appWaitActivity = _this5.opts.appWaitActivity || _this5.opts.appActivity;

      try {
        yield _this5.adb.waitForActivity(appWaitPackage, appWaitActivity, 5000);
      } catch (e) {
        _logger.default.info(`Selendroid did not start the activity we were waiting for, ` + `'${appWaitPackage}/${appWaitActivity}'. ` + `Starting it ourselves`);

        yield _this5.adb.startApp({
          pkg: _this5.opts.appPackage,
          activity: _this5.opts.appActivity,
          action: _this5.opts.intentAction,
          category: _this5.opts.intentCategory,
          flags: _this5.opts.intentFlags,
          waitPkg: _this5.opts.appWaitPackage,
          waitActivity: _this5.opts.appWaitActivity,
          optionalIntentArguments: _this5.opts.optionalIntentArguments,
          stopApp: !_this5.opts.dontStopAppOnReset,
          retry: false
        });
      }
    })();
  }

  deleteSession() {
    var _this6 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting Selendroid session');

      if (_this6.selendroid) {
        if (_this6.jwpProxyActive) {
          yield _this6.selendroid.deleteSession();
        }

        _this6.selendroid = null;
      }

      _this6.jwpProxyActive = false;

      if (_this6.adb) {
        if (_this6.opts.unicodeKeyboard && _this6.opts.resetKeyboard && _this6.defaultIME) {
          _logger.default.debug(`Resetting IME to '${_this6.defaultIME}'`);

          yield _this6.adb.setIME(_this6.defaultIME);
        }

        yield _this6.adb.forceStop(_this6.opts.appPackage);
        yield _this6.adb.stopLogcat();

        if (_this6.opts.reboot) {
          let avdName = _this6.opts.avd.replace('@', '');

          _logger.default.debug(`closing emulator '${avdName}'`);

          yield _this6.adb.killEmulator(avdName);
        }
      }

      yield _superprop_callDeleteSession();
    })();
  }

  checkAppPresent() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Checking whether app is actually present');

      if (!(yield _appiumSupport.fs.exists(_this7.opts.app))) {
        _logger.default.errorAndThrow(`Could not find app apk at '${_this7.opts.app}'`);
      }
    })();
  }

  defaultWebviewName() {
    return `${_appiumAndroidDriver.WEBVIEW_BASE}0`;
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }

}

exports.SelendroidDriver = SelendroidDriver;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        cmd = _step$value[0],
        fn = _step$value[1];

    if (!_lodash.default.includes(['defaultWebviewName'], cmd)) {
      SelendroidDriver.prototype[cmd] = fn;
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _lodash.default.toPairs(_commands.default)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
        cmd = _step2$value[0],
        fn = _step2$value[1];

    SelendroidDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

var _default = SelendroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
