"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupSelendroid = setupSelendroid;
exports.serverExists = serverExists;
exports.SE_MANIFEST_PATH = exports.SE_APK_PATH = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _crypto = _interopRequireDefault(require("crypto"));

const SE_VER = "0.17.0";
const SE_DOWNLOAD_CDNURL = process.env.npm_config_selendroid_driver_cdnurl || process.env.SELENDROID_DRIVER_CDNURL || "http://repo1.maven.org/maven2/io/selendroid/selendroid-standalone";
const SE_DOWNLOAD = `${SE_DOWNLOAD_CDNURL}/${SE_VER}/selendroid-standalone-${SE_VER}-with-dependencies.jar`;
const SE_DOWNLOAD_SHA256 = "7cf7163ac47f1c46eff95b62f78b58c1dabdec534acc6632da3784739f6e9d82";

const SE_DIR = _path.default.resolve(__dirname, "..", "..", "selendroid");

const SE_DOWNLOAD_DIR = _path.default.resolve(SE_DIR, "download");

const SE_JAR_PATH_TMP = _path.default.resolve(SE_DOWNLOAD_DIR, "selendroid-server.jar.tmp");

const SE_JAR_PATH = _path.default.resolve(SE_DOWNLOAD_DIR, `selendroid-server-${SE_DOWNLOAD_SHA256}.jar`);

const SE_APK_PATH = _path.default.resolve(SE_DIR, "selendroid-server.apk");

exports.SE_APK_PATH = SE_APK_PATH;

const SE_MANIFEST_PATH = _path.default.resolve(SE_DIR, "AndroidManifest.xml");

exports.SE_MANIFEST_PATH = SE_MANIFEST_PATH;

function setupSelendroid() {
  return _setupSelendroid.apply(this, arguments);
}

function _setupSelendroid() {
  _setupSelendroid = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield (0, _teen_process.exec)('jar');
    } catch (err) {
      if (err.message.indexOf("ENOENT") !== -1 || err.message.indexOf("exited with code 2") !== -1 || err.message.indexOf("Command 'jar' not found. Is it installed?") !== -1) {
        _fancyLog.default.error("Could not find Java's 'jar' executable on your PATH. Please " + "ensure it is present and try running install again");

        return;
      }
    }

    if (yield _appiumSupport.fs.exists(SE_JAR_PATH)) {
      (0, _fancyLog.default)("Standalone jar exists, skipping download: " + SE_JAR_PATH);
    } else {
      yield downloadSelendroid();
    }

    (0, _fancyLog.default)(`Determining AndroidManifest location`);
    let manifestPath = yield getFilePathFromJar(/AndroidManifest.*\.xml$/, SE_JAR_PATH);
    (0, _fancyLog.default)(`Determining server apk location`);
    let serverPath = yield getFilePathFromJar(/selendroid-server.*\.apk$/, SE_JAR_PATH);
    (0, _fancyLog.default)(`Extracting manifest and apk to ${SE_DOWNLOAD_DIR}`);
    yield (0, _teen_process.exec)('jar', ['xf', SE_JAR_PATH, manifestPath, serverPath], {
      cwd: SE_DOWNLOAD_DIR
    });
    (0, _fancyLog.default)(`Copying manifest and apk to ${SE_DIR}`);

    let extractedManifestPath = _path.default.resolve(SE_DOWNLOAD_DIR, manifestPath);

    let extractedServerPath = _path.default.resolve(SE_DOWNLOAD_DIR, serverPath);

    yield _appiumSupport.fs.copyFile(extractedManifestPath, SE_MANIFEST_PATH);
    yield _appiumSupport.fs.copyFile(extractedServerPath, SE_APK_PATH);
    (0, _fancyLog.default)("Cleaning up temp files");
    yield _appiumSupport.fs.rimraf(extractedManifestPath);
    yield _appiumSupport.fs.rimraf(extractedServerPath);
    (0, _fancyLog.default)(`Fixing AndroidManifest icon bug`);
    yield fixManifestIcons(SE_MANIFEST_PATH);

    if (!(yield serverExists())) {
      throw new Error("Something went wrong in setting up selendroid");
    }
  });
  return _setupSelendroid.apply(this, arguments);
}

function downloadSelendroid() {
  return _downloadSelendroid.apply(this, arguments);
}

function _downloadSelendroid() {
  _downloadSelendroid = (0, _asyncToGenerator2.default)(function* () {
    (0, _fancyLog.default)(`Ensuring ${SE_DOWNLOAD_DIR} exists`);
    yield _appiumSupport.fs.mkdir(SE_DIR);
    yield _appiumSupport.fs.mkdir(SE_DOWNLOAD_DIR);
    (0, _fancyLog.default)(`Downloading Selendroid standalone server version ${SE_VER} from ` + `${SE_DOWNLOAD} --> ${SE_JAR_PATH}`);
    let body = yield _requestPromise.default.get({
      url: SE_DOWNLOAD,
      encoding: null
    });

    if (!(body instanceof Buffer)) {
      throw new Error(Object.prototype.toString.call(body));
    }

    (0, _fancyLog.default)(`Writing binary content to ${SE_JAR_PATH_TMP}`);
    yield _appiumSupport.fs.writeFile(SE_JAR_PATH_TMP, body);
    yield _appiumSupport.fs.chmod(SE_JAR_PATH_TMP, 0o0644);
    let fingerprint = sha256(body);

    if (fingerprint === SE_DOWNLOAD_SHA256) {
      yield _appiumSupport.fs.rename(SE_JAR_PATH_TMP, SE_JAR_PATH);
      (0, _fancyLog.default)("Selendroid standalone server downloaded");
    } else {
      throw new Error(`Bad SHA256 fingerprint: '${fingerprint}', bytes: ${body.length}`);
    }
  });
  return _downloadSelendroid.apply(this, arguments);
}

function sha256(buffer) {
  const hash = _crypto.default.createHash('sha256');

  return hash.update(buffer).digest('hex');
}

function getFilePathFromJar(_x, _x2) {
  return _getFilePathFromJar.apply(this, arguments);
}

function _getFilePathFromJar() {
  _getFilePathFromJar = (0, _asyncToGenerator2.default)(function* (fileRegex, jarPath) {
    let _ref = yield (0, _teen_process.exec)('jar', ['tf', jarPath]),
        stdout = _ref.stdout;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = stdout.split("\n")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;

        if (fileRegex.test(line.trim())) {
          return line.trim();
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    throw new Error(`Could not find ${fileRegex} in ${jarPath}`);
  });
  return _getFilePathFromJar.apply(this, arguments);
}

function serverExists() {
  return _serverExists.apply(this, arguments);
}

function _serverExists() {
  _serverExists = (0, _asyncToGenerator2.default)(function* () {
    try {
      return (yield _appiumSupport.fs.exists(SE_APK_PATH)) && (yield _appiumSupport.fs.exists(SE_MANIFEST_PATH));
    } catch (e) {
      if (e.code.indexOf("ENOENT") !== -1) {
        return false;
      }

      throw e;
    }
  });
  return _serverExists.apply(this, arguments);
}

function fixManifestIcons(_x3) {
  return _fixManifestIcons.apply(this, arguments);
}

function _fixManifestIcons() {
  _fixManifestIcons = (0, _asyncToGenerator2.default)(function* (manifest) {
    let curData = (yield _appiumSupport.fs.readFile(manifest)).toString('utf8');
    let iconRe = /application[\s\S]+android:icon="[^"]+"/;
    let newData = curData.replace(iconRe, "application");
    yield _appiumSupport.fs.writeFile(manifest, newData);
  });
  return _fixManifestIcons.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
