"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _installer = require("./installer");

const REQD_PARAMS = ['adb', 'appPackage', 'appActivity', 'tmpDir', 'apk', 'host', 'systemPort', 'devicePort'];

class SelendroidServer {
  constructor(opts = {}) {
    for (var _i = 0; _i < REQD_PARAMS.length; _i++) {
      let req = REQD_PARAMS[_i];

      if (!opts || !opts[req]) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.modServerPkg = `selendroid.${this.appPackage}`;
    this.modServerPath = _path.default.resolve(this.tmpDir, `${this.modServerPkg}.apk`);
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
  }

  prepareModifiedServer() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let needsUninstall = false;

      if (!(yield _appiumSupport.fs.exists(_this.modServerPath))) {
        yield _this.buildNewModServer();
        needsUninstall = true;
      }

      needsUninstall = (yield _this.checkAndSignCert(_this.modServerPath)) || needsUninstall;

      if (needsUninstall) {
        _logger.default.info("New server was built, uninstalling any instances of it");

        yield _this.adb.uninstallApk(_this.modServerPkg);
      }
    })();
  }

  installModifiedServer() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let installed = yield _this2.adb.isAppInstalled(_this2.modServerPkg);

      if (!installed) {
        yield _this2.adb.install(_this2.modServerPath);
      }
    })();
  }

  buildNewModServer() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`Repackaging selendroid for: '${_this3.appPackage}'`);

      let packageTmpDir = _path.default.resolve(_this3.tmpDir, _this3.appPackage);

      let newManifestPath = _path.default.resolve(_this3.tmpDir, 'AndroidManifest.xml');

      _logger.default.info(`Creating new manifest: '${newManifestPath}'`);

      yield _appiumSupport.fs.mkdir(packageTmpDir);
      yield _appiumSupport.fs.copyFile(_installer.SE_MANIFEST_PATH, newManifestPath);
      yield _this3.adb.initAapt();
      yield _this3.adb.compileManifest(newManifestPath, _this3.modServerPkg, _this3.appPackage);
      yield _this3.adb.insertManifest(newManifestPath, _installer.SE_APK_PATH, _this3.modServerPath);

      _logger.default.info(`Repackaged selendroid ready: '${_this3.modServerPath}'`);
    })();
  }

  checkAndSignCert(apk) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let signed = yield _this4.adb.checkApkCert(apk, _this4.appPackage);

      if (!signed) {
        yield _this4.adb.sign(apk);
      }

      return !signed;
    })();
  }

  startSession(caps) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let instrumentWith = `${_this5.modServerPkg}/` + `io.selendroid.server.ServerInstrumentation`;

      _logger.default.info(`Starting selendroid server with instrumentation: ` + `${instrumentWith}`);

      yield _this5.adb.instrument(_this5.appPackage, _this5.appActivity, instrumentWith);

      _logger.default.info('Waiting for Selendroid to be online...');

      yield (0, _asyncbox.retryInterval)(20, 1000, (0, _asyncToGenerator2.default)(function* () {
        yield _this5.jwproxy.command('/status', 'GET');
      }));
      yield _this5.jwproxy.command('/session', 'POST', {
        desiredCapabilities: caps
      });
    })();
  }

  deleteSession() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting Selendroid server session');

      try {
        yield _this6.jwproxy.command('/', 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation Selendroid deleteSession worked; ` + `Error was: ${err}`);
      }
    })();
  }

}

var _default = SelendroidServer;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
